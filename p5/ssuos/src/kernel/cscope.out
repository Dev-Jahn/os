cscope 15 /media/jahn/External2/os/p5/ssuos/src/kernel               0000230688
	@arch/Main.c

1 
	~<öãºu±.h
>

2 
	~<devi˚/c⁄sﬁe.h
>

3 
	~<devi˚/block.h
>

4 
	~<ty≥.h
>

5 
	~<devi˚/kbd.h
>

6 
	~<devi˚/io.h
>

7 
	~<devi˚/pô.h
>

8 
	~<°d¨g.h
>

9 
	~<ssulib.h
>

10 
	~<mem/∑gög.h
>

11 
	~<¥oc/¥oc.h
>

12 
	~<mem/mm.h
>

13 
	~<sysˇŒ.h
>

14 
	~<devi˚/kbd.h
>

16 
	~<synch.h
>

17 
	~<mem/∑Œoc.h
>

19 
maö_öô
();

20 
¥öt_c⁄åibut‹s
();

22 c⁄° * 
	gVERSION
 = "0.1.03";

23 c⁄° * 
	gAUTHOR
 = "OSLAB";

24 c⁄° * 
	gMODIFIER
 = "You";

26 
	$ssuos_maö
()

28 
	`maö_öô
();

30 
	`idÀ
(
NULL
);

33 
	}
}

35 
	$maö_öô
()

37 
	`öå_dißbÀ
();

40 
	`öô_c⁄sﬁe
();

42 
	`¥öt_c⁄åibut‹s
();

44 
	`dëe˘_mem
();

45 
	`¥ötk
("%s", "Memory Detecting\n");

46 
	`¥ötk
("-Mem‹y sizê%u Kbyãs\n", 
	`mem_size
()/1024);

48 
	`öô_pô
();

49 
	`¥ötk
("%s", "PIT Intialization\n");

51 
	`öô_sysˇŒ
();

52 
	`¥ötk
("%s", "System call Intialization\n");

54 
	`öô_öå
();

55 
	`¥ötk
("%s", "Interrupt Initialization\n");

57 
	`öô_kbd
();

59 
	`öô_∑Œoc
();

60 
	`¥ötk
("%s" "Palloc Initialization\n");

62 
	`öô_∑gög
();

63 
	`¥ötk
("%s", "Paging Initialization\n");

65 
	`öô_¥oc
();

66 
	`¥ötk
("%s", "Process Intialization\n");

68 
	`öå_íabÀ
();

70 
	`∑Œoc_pf_ã°
();

71 #ifde‡
SCREEN_SCROLL


72 
	`ª‰eshS¸ìn
();

75 
	`£ma_£lf_ã°
();

76 
	`¥ötk
("========== initialization complete ==========\n\n");

79 #ifde‡
SCREEN_SCROLL


80 
	`ª‰eshS¸ìn
();

82 
	}
}

84 
	$¥öt_c⁄åibut‹s
()

86 
	`¥ötk
("%s", "SSUOS main start!!!!\n");

87 
	`¥ötk
(" ______ ______ __ __ ______ ______ \n");

88 
	`¥ötk
(" / \\ / \\ / | / | / \\ / \\ \n");

89 
	`¥ötk
(" /$$$$$$ |/$$$$$$ |$$ | $$ | /$$$$$$ |/$$$$$$ |\n");

90 
	`¥ötk
(" $$ \\__$$/ $$ \\__$$/ $$ | $$ | $$ | $$ |$$ \\__$$/ \n");

91 
	`¥ötk
(" $$ \\ $$ \\ $$ | $$ | $$ | $$ |$$ \\ \n");

92 
	`¥ötk
(" $$$$$$ | $$$$$$ |$$ | $$ | $$ | $$ | $$$$$$ |\n");

93 
	`¥ötk
(" / \\__$$ |/ \\__$$ |$$ \\__$$ | $$ \\__$$ |/ \\__$$ |\n");

94 
	`¥ötk
(" $$ $$/ $$ $$/ $$ $$/ $$ $$/ $$ $$/ \n");

95 
	`¥ötk
(" $$$$$$/ $$$$$$/ $$$$$$/ $$$$$$/ $$$$$$/ \n");

96 
	`¥ötk
("\n");

97 
	`¥ötk
("****************Made by OSLAB in SoongSil University*********************\n");

98 
	`¥ötk
("\n");

99 
	`¥ötk
("contributors : Yunkyu Lee , Minwoo Jang , Sanghun Choi , Eunseok Choi\n");

100 
	`¥ötk
(" Hyunho Ji , Giwook Kang , Kisu Kim , Seonguk Lee \n");

101 
	`¥ötk
(" Gibeom Byeon, Jeonghwan Lee, Kyoungmin Kim, Myungjoon Shon\n");

102 
	`¥ötk
(" Jinwoo Lee , Hansol Lee , Mhanwoo Heo, Jeongwoo Choi\n");

103 
	`¥ötk
(" Yongmin Kim\n");

104 
	`¥ötk
("\n");

105 
	`¥ötk
("************************ Professor. Jiman Hong ************************\n");

106 
	`¥ötk
(" \n");

107 
	}
}

	@arch/do_syscall.c

1 
	~<¥oc/sched.h
>

2 
	~<¥oc/¥oc.h
>

3 
	~<devi˚/devi˚.h
>

4 
	~<öãºu±.h
>

5 
	~<devi˚/kbd.h
>

7 
pid_t
 
	$do_f‹k
(
¥oc_func
 
func
, * 
aux
)

9 
pid_t
 
pid
;

10 
¥oc_›ti⁄
 
›t
;

12 
›t
.
¥i‹ôy
 = 
cur_¥o˚ss
->Öriority;

13 
pid
 = 
	`¥oc_¸óã
(
func
, &
›t
, 
aux
);

15  
pid
;

16 
	}
}

18 
	$do_exô
(
°©us
)

20 
cur_¥o˚ss
->
exô_°©us
 = 
°©us
;

21 
	`¥oc_‰ì
();

22 
	`do_sched_⁄_ªtu∫
();

23 
	}
}

25 
pid_t
 
	$do_waô
(*
°©us
)

27 
cur_¥o˚ss
->
chûd_pid
 != -1)

28 
	`scheduÀ
();

30 
pid
 = 
cur_¥o˚ss
->
chûd_pid
;

31 
cur_¥o˚ss
->
chûd_pid
 = -1;

33 
¥o˚ss
 
¥ocs
[];

34 
¥ocs
[
pid
].
°©e
 = 
PROC_UNUSED
;

36 if(!
°©us
)

37 *
°©us
 = 
¥ocs
[
pid
].
exô_°©us
;

39  
pid
;

40 
	}
}

42 
	$do_shutdown
()

44 
	`dev_shutdown
();

46 
	}
}

48 
	$do_ssuªad
()

50  
	`kbd_ªad_ch¨
();

51 
	}
}

	@arch/i386/crset.asm

1 [
SECTION
 .
ãxt
]

3 [
GLOBAL
 
ªad_¸0
]

4 
	gªad_¸0
:

5 
push
 
ebp


6 
mov
 
ebp
, 
e•


7 
mov
 
	góx
, 
¸0


8 
p›
 
ebp


9 
	gªä


11 [
GLOBAL
 
wrôe_¸0
]

12 
	gwrôe_¸0
:

13 
push
 
ebp


14 
mov
 
ebp
, 
e•


15 
mov
 
	góx
, 
	gdw‹d
[
ebp
+8]

16 
mov
 
	g¸0
, 
óx


17 
p›
 
ebp


18 
	gªä


20 [
GLOBAL
 
ªad_¸3
]

21 
	gªad_¸3
:

22 
push
 
ebp


23 
mov
 
ebp
, 
e•


24 
mov
 
	góx
, 
¸3


25 
p›
 
ebp


26 
	gªä


28 [
GLOBAL
 
wrôe_¸3
]

29 
	gwrôe_¸3
:

30 
push
 
ebp


31 
mov
 
ebp
, 
e•


32 
mov
 
	góx
, 
	gdw‹d
[
ebp
+8]

33 
mov
 
	g¸3
, 
óx


34 
p›
 
ebp


35 
	gªä


	@arch/i386/intr-stubs.S

2 .
func
 
öå_íåy


3 
	göå_íåy
:

6 
pushl
 %
ds


7 
pushl
 %
es


8 
pushl
 %
fs


9 
pushl
 %
gs


10 
pushÆ


13 
˛d


15 
ÀÆ
 56(%
e•
), %
ebp


18 
	gpushl
 %
	ge•


19 .
globl
 
öå_comm⁄


20 
ˇŒ
 
öå_comm⁄


21 
addl
 
	g$4
, %
	ge•


22 .
	gídfunc


32 .
globl
 
	göå_exô


33 .
func
 
öå_exô


34 
	göå_exô
:

36 
p›Æ


37 
p›l
 %
gs


38 
p›l
 %
fs


39 
p›l
 %
es


40 
p›l
 %
ds


44 
addl
 
$12
, %
e•


47 
	gúë


48 .
	gídfunc


76 .
	gd©a


77 .
globl
 
öå_°ubs


78 
	göå_°ubs
:

83 
	#zîo
 \

84 
pushl
 %
ebp
; \

85 
pushl
 
$0


	)

90 
	#REAL
 \

91 
	`pushl
 (%
e•
); \

92 
movl
 %
ebp
, 4(%
e•
)

	)

98 
	#STUB
(
NUMBER
, 
TYPE
) \

99 .
ãxt
; \

100 .
func
 
öå
##
NUMBER
##
_°ub
; \

101 
öå
##
NUMBER
##
_°ub
: \

102 
TYPE
; \

103 
push
 
$0x
##
NUMBER
; \

104 
jmp
 
öå_íåy
; \

105 .
ídfunc
; \

107 .
d©a
; \

108 .
öå
##
NUMBER
##
_°ub
;

	)

112 
	$STUB
(00, 
zîo
Ë
	$STUB
(01, 
zîo
Ë
	$STUB
(02, 
zîo
Ë
	$STUB
(03, 
zîo
)

113 
	$STUB
(04, 
zîo
Ë
	$STUB
(05, 
zîo
Ë
	$STUB
(06, 
zîo
Ë
	$STUB
(07, 
zîo
)

114 
	$STUB
(08, 
REAL
Ë
	$STUB
(09, 
zîo
Ë
	$STUB
(0a, 
REAL
Ë
	$STUB
(0b, 
REAL
)

115 
	$STUB
(0c, 
zîo
Ë
	$STUB
(0d, 
REAL
Ë
	$STUB
(0e, 
REAL
Ë
	$STUB
(0f, 
zîo
)

117 
	$STUB
(10, 
zîo
Ë
	$STUB
(11, 
REAL
Ë
	$STUB
(12, 
zîo
Ë
	$STUB
(13, 
zîo
)

118 
	$STUB
(14, 
zîo
Ë
	$STUB
(15, 
zîo
Ë
	$STUB
(16, 
zîo
Ë
	$STUB
(17, 
zîo
)

119 
	$STUB
(18, 
REAL
Ë
	$STUB
(19, 
zîo
Ë
	$STUB
(1a, 
REAL
Ë
	$STUB
(1b, 
REAL
)

120 
	$STUB
(1c, 
zîo
Ë
	$STUB
(1d, 
REAL
Ë
	$STUB
(1e, 
REAL
Ë
	$STUB
(1f, 
zîo
)

122 
	$STUB
(20, 
zîo
Ë
	$STUB
(21, 
zîo
Ë
	$STUB
(22, 
zîo
Ë
	$STUB
(23, 
zîo
)

123 
	$STUB
(24, 
zîo
Ë
	$STUB
(25, 
zîo
Ë
	$STUB
(26, 
zîo
Ë
	$STUB
(27, 
zîo
)

124 
	$STUB
(28, 
zîo
Ë
	$STUB
(29, 
zîo
Ë
	$STUB
(2a, 
zîo
Ë
	$STUB
(2b, 
zîo
)

125 
	$STUB
(2c, 
zîo
Ë
	$STUB
(2d, 
zîo
Ë
	$STUB
(2e, 
zîo
Ë
	$STUB
(2f, 
zîo
)

127 
	$STUB
(30, 
zîo
Ë
	$STUB
(31, 
zîo
Ë
	$STUB
(32, 
zîo
Ë
	$STUB
(33, 
zîo
)

128 
	$STUB
(34, 
zîo
Ë
	$STUB
(35, 
zîo
Ë
	$STUB
(36, 
zîo
Ë
	$STUB
(37, 
zîo
)

129 
	$STUB
(38, 
zîo
Ë
	$STUB
(39, 
zîo
Ë
	$STUB
(3a, 
zîo
Ë
	$STUB
(3b, 
zîo
)

130 
	$STUB
(3c, 
zîo
Ë
	$STUB
(3d, 
zîo
Ë
	$STUB
(3e, 
zîo
Ë
	$STUB
(3f, 
zîo
)

132 
	$STUB
(40, 
zîo
Ë
	$STUB
(41, 
zîo
Ë
	$STUB
(42, 
zîo
Ë
	$STUB
(43, 
zîo
)

133 
	$STUB
(44, 
zîo
Ë
	$STUB
(45, 
zîo
Ë
	$STUB
(46, 
zîo
Ë
	$STUB
(47, 
zîo
)

134 
	$STUB
(48, 
zîo
Ë
	$STUB
(49, 
zîo
Ë
	$STUB
(4a, 
zîo
Ë
	$STUB
(4b, 
zîo
)

135 
	$STUB
(4c, 
zîo
Ë
	$STUB
(4d, 
zîo
Ë
	$STUB
(4e, 
zîo
Ë
	$STUB
(4f, 
zîo
)

137 
	$STUB
(50, 
zîo
Ë
	$STUB
(51, 
zîo
Ë
	$STUB
(52, 
zîo
Ë
	$STUB
(53, 
zîo
)

138 
	$STUB
(54, 
zîo
Ë
	$STUB
(55, 
zîo
Ë
	$STUB
(56, 
zîo
Ë
	$STUB
(57, 
zîo
)

139 
	$STUB
(58, 
zîo
Ë
	$STUB
(59, 
zîo
Ë
	$STUB
(5a, 
zîo
Ë
	$STUB
(5b, 
zîo
)

140 
	$STUB
(5c, 
zîo
Ë
	$STUB
(5d, 
zîo
Ë
	$STUB
(5e, 
zîo
Ë
	$STUB
(5f, 
zîo
)

142 
	$STUB
(60, 
zîo
Ë
	$STUB
(61, 
zîo
Ë
	$STUB
(62, 
zîo
Ë
	$STUB
(63, 
zîo
)

143 
	$STUB
(64, 
zîo
Ë
	$STUB
(65, 
zîo
Ë
	$STUB
(66, 
zîo
Ë
	$STUB
(67, 
zîo
)

144 
	$STUB
(68, 
zîo
Ë
	$STUB
(69, 
zîo
Ë
	$STUB
(6a, 
zîo
Ë
	$STUB
(6b, 
zîo
)

145 
	$STUB
(6c, 
zîo
Ë
	$STUB
(6d, 
zîo
Ë
	$STUB
(6e, 
zîo
Ë
	$STUB
(6f, 
zîo
)

147 
	$STUB
(70, 
zîo
Ë
	$STUB
(71, 
zîo
Ë
	$STUB
(72, 
zîo
Ë
	$STUB
(73, 
zîo
)

148 
	$STUB
(74, 
zîo
Ë
	$STUB
(75, 
zîo
Ë
	$STUB
(76, 
zîo
Ë
	$STUB
(77, 
zîo
)

149 
	$STUB
(78, 
zîo
Ë
	$STUB
(79, 
zîo
Ë
	$STUB
(7a, 
zîo
Ë
	$STUB
(7b, 
zîo
)

150 
	$STUB
(7c, 
zîo
Ë
	$STUB
(7d, 
zîo
Ë
	$STUB
(7e, 
zîo
Ë
	`STUB
(7f, zero)

	@arch/i386/io.asm

1 [
SECTION
 .
ãxt
]

2 [
GLOBAL
 
öb
]

3 
	göb
:

4 
push
 
ebp


5 
mov
 
ebp
, 
e•


7 
x‹
 
	góx
, 
óx


8 
mov
 
	gdx
, 
	gw‹d
[
ebp
+8]

9 
ö
 
	gÆ
, 
dx


11 
p›
 
ebp


12 
	gªt


14 [
GLOBAL
 
outb
]

15 
	goutb
:

16 
push
 
ebp


17 
mov
 
ebp
, 
e•


19 
mov
 
	gÆ
, 
	gbyã
 [
ebp
+12]

20 
mov
 
	gdx
, 
	gw‹d
 [
ebp
+8]

21 
out
 
	gdx
, 
Æ


23 
p›
 
ebp


24 
	gªt


26 [
GLOBAL
 
öl
]

27 
	göl
:

28 
push
 
ebp


29 
mov
 
ebp
, 
e•


30 
push
 
edx


32 
mov
 
	gdx
, 
	gw‹d
 [
ebp
+8]

33 
x‹
 
	góx
, 
óx


35 
ö
 
	góx
, 
dx


36 
p›
 
edx


37 
mov
 
	ge•
, 
ebp


38 
p›
 
ebp


39 
	gªt


41 [
GLOBAL
 
oué
]

42 
	goué
:

43 
push
 
ebp


44 
mov
 
ebp
, 
e•


45 
push
 
edx


46 
push
 
óx


48 
mov
 
	gdx
, 
	gw‹d
 [
ebp
+8]

49 
mov
 
	góx
, 
	gdw‹d
 [
ebp
+12]

50 
out
 
	gdx
, 
óx


52 
p›
 
óx


53 
p›
 
edx


54 
mov
 
	ge•
, 
ebp


55 
p›
 
ebp


56 
	gªt


58 [
GLOBAL
 
iowaô
]

59 
	giowaô
:

60 
push
 
ax


62 
x‹
 
ax
,áx

63 
	gout
 0x80, 
Æ


65 
p›
 
ax


66 
	gªt


	@arch/i386/mem.asm

1 [
SECTION
 .
ãxt
]

3 [
GLOBAL
 
gëMemSize
]

4 
	ggëMemSize
:

5 
push
 
ecx


6 
push
 
edx


7 
x‹
 
ecx
, 
	gecx
 ;
˛ór
 
Æl
 
	gªgi°îs
. 
This
 
is
 
√eded
 
ã°ög
 
œãr


8 
x‹
 
	gedx
, 
edx


9 
mov
 
	gax
, 0xe801

11 
	gjc
 .
îr‹


12 
cmp
 
	gah
, 0x86 ;
unsuµ‹ãd
 
fun˘i⁄


13 
	gje
 .
îr‹


14 
cmp
 
	gah
, 0x80 ;
övÆid
 
comm™d


15 
	gje
 .
îr‹


16 
	gjcxz
 .
	gu£_ax
 ;
bios
 
may
 
have
 
°‹ed
 
ô
 
ö
 
	gax
,
bx
 
‹
 
	gcx
,
	gdx
. 
ã°
 
cx
 
	gis
 0

17 
p›
 
edx


18 
p›
 
ecx


19 
ªt


21 
mov
 
	gax
, 
	gcx
 ;
ôs
 
	gnŸ
, 
so
 
ô
 
should
 
c⁄èö
 
mem
 
	gsize
; 
°‹e
 it

22 
mov
 
	gbx
, 
	gdx


24 .
	gu£_ax
:

25 
mov
 
ax
, 
bx


26 
p›
 
	gedx
 ;
mem
 
size
 
is
 
ö
 
ax
 
™d
 
bx
 
	gÆªady
,  
ô


27 
p›
 
ecx


28 
	gªt


30 .
	gîr‹
:

31 
mov
 
ax
, -1

32 
mov
 
	gbx
, 0

33 
p›
 
edx


34 
p›
 
ecx


35 
	gªt


	@arch/i386/switch.S

2 .
£t
 
	gARG_CUR
, 8

3 .
£t
 
	gARG_NEXT
, 12

5 .
globÆ
 
	gswôch_¥o˚ss


7 .
func
 
swôch_¥o˚ss


8 
	gswôch_¥o˚ss
:

10 
pushl
 %
ebp


11 
movl
 %
e•
, %
ebp


13 
	gpushl
 %
óx


14 
	gpushl
 %
ebx


15 
	gpushl
 %
ecx


16 
	gpushl
 %
edx


17 
	gpushl
 %
esi


18 
	gpushl
 %
	gedi


20 .
globÆ
 
¥o˚ss_°ack_ofs


21 
mov
 
	g¥o˚ss_°ack_ofs
, %
edx


22 
mov
 
	g¥o˚ss_°ack_ofs
, %
ebx


23 
addl
 
	g$4
, %
ebx


25 
movl
 
ARG_CUR
(%
ebp
), %
óx


26 
	gmovl
 %
	ge•
, (%
	góx
, %
	gedx
, 1)

28 
movl
 
ARG_NEXT
(%
ebp
), %
óx


30 
movl
 (%
óx
, %
edx
, 1), %
e•


31 
movl
 (%
óx
, %
ebx
, 1), %
ecx


32 
	gmovl
 %
	gecx
, %
¸3


34 
	gp›l
 %
edi


35 
	gp›l
 %
esi


36 
	gp›l
 %
edx


37 
	gp›l
 %
ecx


38 
	gp›l
 %
ebx


39 
	gp›l
 %
óx


41 
	gp›l
 %
ebp


43 
	gªt


	@arch/interrupt.c

1 
	~<öãºu±.h
>

2 
	~<devi˚/c⁄sﬁe.h
>

3 
	~<ty≥.h
>

4 
	~<devi˚/pô.h
>

5 
	~<¥oc/sched.h
>

6 
	~<devi˚/io.h
>

7 
	~<devi˚/kbd.h
>

8 
	~<¥oc/¥oc.h
>

9 
	~<ssulib.h
>

10 
	~<¥oc/swôch.h
>

11 
	~<sysˇŒ.h
>

12 
	~<öå-°ubs.h
>

14 
	#TIMER_MAX
 10

	)

15 
	#REFRESH_FPS
 20

	)

16 
	#CODE_SEGMENT
 0x08

	)

18 #¥agm®
∑ck
(
push
, 1)

20 
	s_ID


22 
	mLowOff£t
;

23 
	mCodeSñe˘‹
;

24 
	mTy≥
;

25 
	mHighOff£t
;

26 } 
	t_ID
;

28 
	s_IDTR


30 
	mSize
;

31 
	mAddªss
;

32 } 
	t_IDTR
;

33 #¥agm®
∑ck
(
p›
)

35 
_ID
 *
	gidt
;

37 #i‚de‡
ASSERT


38 
	#ASSERT
(
CONDITION
Ë–(*Ë0)

	)

41 
	gticks
;

43 
öå_h™dÀr_func
 *
	gh™dÀrs
[
INTR_MAX
];

44 
boﬁ
 
	gsched_⁄_ªtu∫
;

46 
boﬁ
 
	gö_exã∫Æ_öå
;

48 
deÁu…_h™dÀr
(
öå_‰ame
 *
i‰ame
);

49 
timî_h™dÀr
(
öå_‰ame
 *
i‰ame
);

50 
sysˇŒ_h™dÀr
(
öå_‰ame
 *
i‰ame
);

52 
	$öô_öå
()

54 
i
;

56 
ticks
 = 0;

57 
ö_exã∫Æ_öå
 = 
Ál£
;

58 
sched_⁄_ªtu∫
 = 
Ál£
;

60 
öå_Àvñ
 
ﬁd_Àvñ
 = 
	`öå_dißbÀ
();

62 
_IDTR
 
IDTR
;

64 
__asm__
 
	`__vﬁ©ûe
("sidà%0"::"m" (
IDTR
));

65 
	`¥ötk
("idå sizê: %dáddªs†: 0x%x\n", 
IDTR
.
Size
, IDTR.
Addªss
);

66 
idt
 = (
_ID
 *)
IDTR
.
Addªss
;

68 
i
 = 0; i<
INTR_MAX
; i++)

70 
idt
[
i
].
LowOff£t
 = ()(()
öå_°ubs
[i] & 0xffff);

71 
idt
[
i
].
CodeSñe˘‹
 = ()
CODE_SEGMENT
;

72 
idt
[
i
].
Ty≥
 = ()0x8e00;

73 
idt
[
i
].
HighOff£t
 = ()((()
öå_°ubs
[i] >> 16) & 0xffff);

75 
h™dÀrs
[
i
] = 
deÁu…_h™dÀr
;

78 
	`ªg_h™dÀr
(32, 
timî_h™dÀr
);

79 
	`¥ötk
("%s", "Timer Handler Registration\n");

81 
	`¥ötk
("%s", "Keyboard Handler Registeration\n");

84 
	`ªg_h™dÀr
(0x30, 
sysˇŒ_h™dÀr
);

85 
	`¥ötk
("%s", "System Call Handler Registeration\n");

87 
	`öå_£t_Àvñ
 (
ﬁd_Àvñ
);

89 
	}
}

92 
	$öå_comm⁄
(
öå_‰ame
 *
i‰ame
)

94 
ö_exã∫Æ_öå
 = 
i‰ame
->
vec_no
 >= 0x20 && iframe->vec_no < 0x30;

96 if(
ö_exã∫Æ_öå
)

98 
	`ASSERT
 (
	`öå_gë_Àvñ
 (Ë=
INTR_OFF
);

99 
sched_⁄_ªtu∫
 = 
Ál£
;

102 if(
h™dÀrs
[
i‰ame
->
vec_no
] !
NULL
)

103 
h™dÀrs
[
i‰ame
->
vec_no
](iframe);

105 
	`deÁu…_h™dÀr
(
i‰ame
);

107 if(
ö_exã∫Æ_öå
)

109 
	`ASSERT
 (
i‰ame
->
vec_no
 >= 0x20 && iframe->vec_no < 0x30);

111 
ö_exã∫Æ_öå
 = 
Ál£
;

113 
	`outb
(0x20, 0x20);

115 if(
i‰ame
->
vec_no
 >= 0x28)

116 
	`outb
(0xa0, 0x20);

118 if(
sched_⁄_ªtu∫
)

119 
	`scheduÀ
();

121 
	}
}

123 
	$do_sched_⁄_ªtu∫
()

125 
	`ASSERT
 (
	`öå_c⁄ãxt
 ());

126 
sched_⁄_ªtu∫
 = 
åue
;

127 
	}
}

129 
	$ªg_h™dÀr
(
idx
, 
öå_h™dÀr_func
 *
h™dÀr
)

131 
öå_Àvñ
 
ﬁd_Àvñ
 = 
	`öå_dißbÀ
();

133 
h™dÀrs
[
idx
] = 
h™dÀr
;

135 
	`öå_£t_Àvñ
 (
ﬁd_Àvñ
);

137 
	}
}

139 
	#FLAG_MBS
 0x00000002

	)

140 
	#FLAG_IF
 0x00000200

	)

142 
öå_Àvñ
 
	$öå_gë_Àvñ
 ()

144 
uöt32_t
 
Êags
;

146 
asm
 vﬁ©ûê("pushÊ;Ö›»%0" : "=g" (
Êags
));

148  
Êags
 & 
FLAG_IF
 ? 
INTR_ON
 : 
INTR_OFF
;

149 
	}
}

151 
öå_Àvñ
 
	$öå_£t_Àvñ
 (
öå_Àvñ
 
Àvñ
)

153  
Àvñ
 =
INTR_ON
 ? 
	`öå_íabÀ
 (Ë: 
	`öå_dißbÀ
 ();

154 
	}
}

156 
öå_Àvñ
 
	$öå_íabÀ
 ()

158 
öå_Àvñ
 
ﬁd_Àvñ
 = 
	`öå_gë_Àvñ
 ();

159 
	`ASSERT
 (!
	`öå_c⁄ãxt
 ());

161 
asm
 volatile ("sti");

163  
ﬁd_Àvñ
;

164 
	}
}

166 
öå_Àvñ
 
	$öå_dißbÀ
 ()

168 
öå_Àvñ
 
ﬁd_Àvñ
 = 
	`öå_gë_Àvñ
 ();

170 
asm
 volatile ("cli" : : : "memory");

172  
ﬁd_Àvñ
;

173 
	}
}

175 
boﬁ
 
	$öå_c⁄ãxt
 ()

177  
ö_exã∫Æ_öå
;

178 
	}
}

180 
	$gë_ticks
()

182  
ticks
;

183 
	}
}

185 
	$deÁu…_h™dÀr
(
öå_‰ame
 *
i‰ame
)

187 
	`¥ötk
("\n\nöàöå %d\n\n", 
i‰ame
->
vec_no
);

188 
	}
}

190 
	$timî_h™dÀr
(
öå_‰ame
 *
i‰ame
)

192 
ticks
++;

193 
cur_¥o˚ss
->
time_u£d
++;

194 
cur_¥o˚ss
->
time_¶i˚
++;

196 if(
cur_¥o˚ss
->
time_¶i˚
 >
TIMER_MAX
)

197 
	`do_sched_⁄_ªtu∫
();

199 #ifde‡
SCREEN_SCROLL


200 
ª‰esh_ticks
 = 0;

201 if(++
ª‰esh_ticks
 >(
PIT_FRQ_HZ
/
REFRESH_FPS
)) {

202 
ª‰esh_ticks
 = 0;

203 
	`ª‰eshS¸ìn
();

206 
	}
}

208 
	$sysˇŒ_h™dÀr
(
öå_‰ame
 *
i‰ame
)

210 
sys_num
, 
¨g_num
, 
ªt
;

211 *
±
;

212 
i
;

214 
	#SYSCALL_ARG_MAX
 3

	)

215 
¨g
[
SYSCALL_ARG_MAX
];

217 
±
 = (*Ë((()&
i‰ame
->
ss
) - 4);

218 
sys_num
 = *
±
++;

219 
¨g_num
 = 
sysˇŒ_tbl
[
sys_num
][1];

221 
i
 = 0; i<
¨g_num
; i++)

222 
¨g
[
i
] = *
±
++;

224 
¨g_num
)

227 
ªt
 = (((*)())
sysˇŒ_tbl
[
sys_num
][0])();

230 
ªt
 = (((*)())
sysˇŒ_tbl
[
sys_num
][0])(
¨g
[0]);

233 
ªt
 = (((*)(, ))
sysˇŒ_tbl
[
sys_num
][0])(
¨g
[0],árg[1]);

236 
ªt
 = (((*)(, , ))
sysˇŒ_tbl
[
sys_num
][0]Ë(
¨g
[0],árg[1],árg[2]);

240 *(
±
 + 3Ë
ªt
;

241 
	}
}

	@arch/syscall.c

1 
	~<sysˇŒ.h
>

2 
	~<do_sysˇŒ.h
>

3 
	~<¥oc/¥oc.h
>

5 
	#sysˇŒ0
(
SYS_NUM
) ({ \

6 
ªt
; \

7 
__asm__
 
	`__vﬁ©ûe
( \

12 : [
num
] "g" (
SYS_NUM
) \

14 
ªt
; \

15 })

	)

17 
	#sysˇŒ1
(
SYS_NUM
, 
ARG0
) ({ \

18 
ªt
; \

19 
__asm__
 
	`__vﬁ©ûe
( \

25 : [
num
] "g" (
SYS_NUM
), \

26 [
¨g0
] "g" (
ARG0
) \

28 
ªt
; \

29 })

	)

31 
	#sysˇŒ2
(
SYS_NUM
, 
ARG0
, 
ARG1
) ({ \

32 
ªt
; \

33 
__asm__
 
	`__vﬁ©ûe
( \

40 : [
num
] "g" (
SYS_NUM
), \

41 [
¨g0
] "g" (
ARG0
), \

42 [
¨g1
] "g" (
ARG1
) \

44 
ªt
; \

45 })

	)

47 
	#sysˇŒ3
(
SYS_NUM
, 
ARG0
, 
ARG1
, 
ARG2
) ({ \

48 
ªt
; \

49 
__asm__
 
	`__vﬁ©ûe
( \

57 : [
num
] "g" (
SYS_NUM
), \

58 [
¨g0
] "g" (
ARG0
), \

59 [
¨g1
] "g" (
ARG1
), \

60 [
¨g2
] "g" (
ARG2
) \

62 
ªt
; \

63 })

	)

65 
	gsysˇŒ_tbl
[
SYS_NUM
][2];

67 
	#REGSYS
(
NUM
, 
FUNC
, 
ARG
) \

68 
sysˇŒ_tbl
[
NUM
][0] = ()
FUNC
; \

69 
sysˇŒ_tbl
[
NUM
][1] = 
ARG
;

	)

72 
	$öô_sysˇŒ
()

74 
	`REGSYS
(
SYS_FORK
, 
do_f‹k
, 2);

75 
	`REGSYS
(
SYS_EXIT
, 
do_exô
, 1);

76 
	`REGSYS
(
SYS_WAIT
, 
do_waô
, 1);

77 
	`REGSYS
(
SYS_SSUREAD
, 
do_ssuªad
, 0);

78 
	`REGSYS
(
SYS_SHUTDOWN
, 
do_shutdown
, 0);

79 
	}
}

81 
	$exô
(
°©us
)

83 
	`sysˇŒ1
(
SYS_EXIT
, 
°©us
);

84 
	}
}

86 
pid_t
 
	$f‹k
(
¥oc_func
 
func
, * 
aux
)

88  
	`sysˇŒ2
(
SYS_FORK
, 
func
, 
aux
);

89 
	}
}

91 
pid_t
 
	$waô
(*
°©us
)

93  
	`sysˇŒ1
(
SYS_WAIT
, 
°©us
);

94 
	}
}

96 
	$ssuªad
()

98  
	`sysˇŒ0
(
SYS_SSUREAD
);

99 
	}
}

101 
	$shutdown
()

103 
	`sysˇŒ0
(
SYS_SHUTDOWN
);

104 
	}
}

	@bitmap.c

1 
	~<bôm≠.h
>

2 
	~<limôs.h
>

3 
	~<round.h
>

7 #ifde‡
FILESYS


8 
	~<fûe.h
>

11 #i‚de‡
ASSERT


12 
	#ASSERT
(
COND
Ë;

	)

23 
	tñem_ty≥
;

26 
	#ELEM_BITS
 ( (
ñem_ty≥
Ë* 
CHAR_BIT
)

	)

31 
	sbôm≠


33 
size_t
 
	mbô_˙t
;

34 
ñem_ty≥
 *
	mbôs
;

39 
ölöe
 
size_t


40 
	$ñem_idx
 (
size_t
 
bô_idx
)

42  
bô_idx
 / 
ELEM_BITS
;

43 
	}
}

47 
ölöe
 
ñem_ty≥


48 
	$bô_mask
 (
size_t
 
bô_idx
)

50  (
ñem_ty≥
Ë1 << (
bô_idx
 % 
ELEM_BITS
);

51 
	}
}

54 
ölöe
 
size_t


55 
	$ñem_˙t
 (
size_t
 
bô_˙t
)

57  
	`DIV_ROUND_UP
 (
bô_˙t
, 
ELEM_BITS
);

58 
	}
}

61 
ölöe
 
size_t


62 
	$byã_˙t
 (
size_t
 
bô_˙t
)

64   (
ñem_ty≥
Ë* 
	`ñem_˙t
 (
bô_˙t
);

65 
	}
}

69 
ölöe
 
ñem_ty≥


70 
	$œ°_mask
 (c⁄° 
bôm≠
 *
b
)

72 
œ°_bôs
 = 
b
->
bô_˙t
 % 
ELEM_BITS
;

73  
œ°_bôs
 ? ((
ñem_ty≥
) 1 <<Üast_bits) - 1 : (elem_type) -1;

74 
	}
}

107 
bôm≠
 *

108 
	$bôm≠_¸óã_ö_buf
 (
size_t
 
bô_˙t
, *
block
, size_à
block_size
)

110 
bôm≠
 *
b
 = 
block
;

112 
	`ASSERT
 (
block_size
 >
	`bôm≠_buf_size
 (
bô_˙t
));

114 
b
->
bô_˙t
 = bit_cnt;

115 
b
->
bôs
 = (
ñem_ty≥
 *) (b + 1);

116 
	`bôm≠_£t_Æl
 (
b
, 
Ál£
);

117  
b
;

118 
	}
}

122 
size_t


123 
	$bôm≠_buf_size
 (
size_t
 
bô_˙t
)

125   (
bôm≠
Ë+ 
	`byã_˙t
 (
bô_˙t
);

126 
	}
}

145 
size_t


146 
	$bôm≠_size
 (c⁄° 
bôm≠
 *
b
)

148  
b
->
bô_˙t
;

149 
	}
}

154 
	$bôm≠_£t
 (
bôm≠
 *
b
, 
size_t
 
idx
, 
boﬁ
 
vÆue
)

156 
	`ASSERT
 (
b
 !
NULL
);

157 
	`ASSERT
 (
idx
 < 
b
->
bô_˙t
);

158 i‡(
vÆue
)

159 
	`bôm≠_m¨k
 (
b
, 
idx
);

161 
	`bôm≠_ª£t
 (
b
, 
idx
);

162 
	}
}

166 
	$bôm≠_m¨k
 (
bôm≠
 *
b
, 
size_t
 
bô_idx
)

168 
size_t
 
idx
 = 
	`ñem_idx
 (
bô_idx
);

169 
ñem_ty≥
 
mask
 = 
	`bô_mask
 (
bô_idx
);

175 
b
->
bôs
[
idx
] |
mask
;

176 
	}
}

180 
	$bôm≠_ª£t
 (
bôm≠
 *
b
, 
size_t
 
bô_idx
)

182 
size_t
 
idx
 = 
	`ñem_idx
 (
bô_idx
);

183 
ñem_ty≥
 
mask
 = 
	`bô_mask
 (
bô_idx
);

189 
b
->
bôs
[
idx
] &~
mask
;

190 
	}
}

196 
	$bôm≠_Êù
 (
bôm≠
 *
b
, 
size_t
 
bô_idx
)

198 
size_t
 
idx
 = 
	`ñem_idx
 (
bô_idx
);

199 
ñem_ty≥
 
mask
 = 
	`bô_mask
 (
bô_idx
);

205 
b
->
bôs
[
idx
] ^
mask
;

206 
	}
}

209 
boﬁ


210 
	$bôm≠_ã°
 (c⁄° 
bôm≠
 *
b
, 
size_t
 
idx
)

212 
	`ASSERT
 (
b
 !
NULL
);

213 
	`ASSERT
 (
idx
 < 
b
->
bô_˙t
);

214  (
b
->
bôs
[
	`ñem_idx
 (
idx
)] & 
	`bô_mask
 (idx)) != 0;

215 
	}
}

221 
	$bôm≠_£t_Æl
 (
bôm≠
 *
b
, 
boﬁ
 
vÆue
)

223 
	`ASSERT
 (
b
 !
NULL
);

225 
	`bôm≠_£t_mu…ùÀ
 (
b
, 0, 
	`bôm≠_size
 (b), 
vÆue
);

226 
	}
}

230 
	$bôm≠_£t_mu…ùÀ
 (
bôm≠
 *
b
, 
size_t
 
°¨t
, size_à
˙t
, 
boﬁ
 
vÆue
)

232 
size_t
 
i
;

234 
	`ASSERT
 (
b
 !
NULL
);

235 
	`ASSERT
 (
°¨t
 <
b
->
bô_˙t
);

236 
	`ASSERT
 (
°¨t
 + 
˙t
 <
b
->
bô_˙t
);

238 
i
 = 0; i < 
˙t
; i++)

239 
	`bôm≠_£t
 (
b
, 
°¨t
 + 
i
, 
vÆue
);

240 
	}
}

244 
size_t


245 
	$bôm≠_cou¡
 (c⁄° 
bôm≠
 *
b
, 
size_t
 
°¨t
, size_à
˙t
, 
boﬁ
 
vÆue
)

247 
size_t
 
i
, 
vÆue_˙t
;

249 
	`ASSERT
 (
b
 !
NULL
);

250 
	`ASSERT
 (
°¨t
 <
b
->
bô_˙t
);

251 
	`ASSERT
 (
°¨t
 + 
˙t
 <
b
->
bô_˙t
);

253 
vÆue_˙t
 = 0;

254 
i
 = 0; i < 
˙t
; i++)

255 i‡(
	`bôm≠_ã°
 (
b
, 
°¨t
 + 
i
Ë=
vÆue
)

256 
vÆue_˙t
++;

257  
vÆue_˙t
;

258 
	}
}

262 
boﬁ


263 
	$bôm≠_c⁄èös
 (c⁄° 
bôm≠
 *
b
, 
size_t
 
°¨t
, size_à
˙t
, 
boﬁ
 
vÆue
)

265 
size_t
 
i
;

267 
	`ASSERT
 (
b
 !
NULL
);

268 
	`ASSERT
 (
°¨t
 <
b
->
bô_˙t
);

269 
	`ASSERT
 (
°¨t
 + 
˙t
 <
b
->
bô_˙t
);

271 
i
 = 0; i < 
˙t
; i++)

272 i‡(
	`bôm≠_ã°
 (
b
, 
°¨t
 + 
i
Ë=
vÆue
)

273  
åue
;

274  
Ál£
;

275 
	}
}

279 
boﬁ


280 
	$bôm≠_™y
 (c⁄° 
bôm≠
 *
b
, 
size_t
 
°¨t
, size_à
˙t
)

282  
	`bôm≠_c⁄èös
 (
b
, 
°¨t
, 
˙t
, 
åue
);

283 
	}
}

287 
boﬁ


288 
	$bôm≠_n⁄e
 (c⁄° 
bôm≠
 *
b
, 
size_t
 
°¨t
, size_à
˙t
)

290  !
	`bôm≠_c⁄èös
 (
b
, 
°¨t
, 
˙t
, 
åue
);

291 
	}
}

295 
boﬁ


296 
	$bôm≠_Æl
 (c⁄° 
bôm≠
 *
b
, 
size_t
 
°¨t
, size_à
˙t
)

298  !
	`bôm≠_c⁄èös
 (
b
, 
°¨t
, 
˙t
, 
Ál£
);

299 
	}
}

307 
size_t


308 
	$bôm≠_sˇn
 (c⁄° 
bôm≠
 *
b
, 
size_t
 
°¨t
, size_à
˙t
, 
boﬁ
 
vÆue
)

310 
	`ASSERT
 (
b
 !
NULL
);

311 
	`ASSERT
 (
°¨t
 <
b
->
bô_˙t
);

313 i‡(
˙t
 <
b
->
bô_˙t
)

315 
size_t
 
œ°
 = 
b
->
bô_˙t
 - 
˙t
;

316 
size_t
 
i
;

317 
i
 = 
°¨t
; i <
œ°
; i++)

318 i‡(!
	`bôm≠_c⁄èös
 (
b
, 
i
, 
˙t
, !
vÆue
))

319  
i
;

321  
BITMAP_ERROR
;

322 
	}
}

331 
size_t


332 
	$bôm≠_sˇn_™d_Êù
 (
bôm≠
 *
b
, 
size_t
 
°¨t
, size_à
˙t
, 
boﬁ
 
vÆue
)

334 
size_t
 
idx
 = 
	`bôm≠_sˇn
 (
b
, 
°¨t
, 
˙t
, 
vÆue
);

335 i‡(
idx
 !
BITMAP_ERROR
)

336 
	`bôm≠_£t_mu…ùÀ
 (
b
, 
idx
, 
˙t
, !
vÆue
);

337  
idx
;

338 
	}
}

342 #ifde‡
FILESYS


344 
size_t


345 
	$bôm≠_fûe_size
 (c⁄° 
bôm≠
 *
b
)

347  
	`byã_˙t
 (
b
->
bô_˙t
);

348 
	}
}

352 
boﬁ


353 
	$bôm≠_ªad
 (
bôm≠
 *
b
, 
fûe
 *file)

355 
boﬁ
 
suc˚ss
 = 
åue
;

356 i‡(
b
->
bô_˙t
 > 0)

358 
off_t
 
size
 = 
	`byã_˙t
 (
b
->
bô_˙t
);

359 
suc˚ss
 = 
	`fûe_ªad_©
 (
fûe
, 
b
->
bôs
, 
size
, 0) == size;

360 
b
->
bôs
[
	`ñem_˙t
 (b->
bô_˙t
Ë- 1] &
	`œ°_mask
 (b);

362  
suc˚ss
;

363 
	}
}

367 
boﬁ


368 
	$bôm≠_wrôe
 (c⁄° 
bôm≠
 *
b
, 
fûe
 *file)

370 
off_t
 
size
 = 
	`byã_˙t
 (
b
->
bô_˙t
);

371  
	`fûe_wrôe_©
 (
fûe
, 
b
->
bôs
, 
size
, 0) == size;

372 
	}
}

	@build/Main.s

1 .
	gfûe
 "Main.c"

2 .
	gãxt


3 .
	gLãxt0
:

4 .
comm
 
Glob_x
,4,4

5 .
comm
 
	gGlob_y
,4,4

6 .
globl
 
	gVERSION


7 .
	g£˘i⁄
 .
	grod©a


8 .
	gLC0
:

9 .
°rög
 "0.1.03"

10 .
d©a


11 .
Æign
 4

12 .
ty≥
 
VERSION
, @
	gobje˘


13 .
size
 
	gVERSION
, 4

14 
	gVERSION
:

15 ..
LC0


16 .
globl
 
AUTHOR


17 .
£˘i⁄
 .
rod©a


18 .
LC1
:

19 .
°rög
 "OSLAB"

20 .
d©a


21 .
Æign
 4

22 .
ty≥
 
AUTHOR
, @
	gobje˘


23 .
size
 
	gAUTHOR
, 4

24 
	gAUTHOR
:

25 ..
LC1


26 .
globl
 
MODIFIER


27 .
£˘i⁄
 .
rod©a


28 .
LC2
:

29 .
°rög
 "You"

30 .
d©a


31 .
Æign
 4

32 .
ty≥
 
MODIFIER
, @
	gobje˘


33 .
size
 
	gMODIFIER
, 4

34 
	gMODIFIER
:

35 ..
LC2


36 .
ãxt


37 .
globl
 
ssuos_maö


38 .
ty≥
 
ssuos_maö
, @
fun˘i⁄


39 
	gssuos_maö
:

40 .
LFB3
:

41 .
fûe
 1 "arch/Main.c"

42 .
loc
 1 27 0

43 .
cfi_°¨çroc


44 
pushl
 %
ebp


45 .
cfi_def_cÁ_off£t
 8

46 .
cfi_off£t
 5, -8

47 
	gmovl
 %
	ge•
, %
	gebp


48 .
	gcfi_def_cÁ_ªgi°î
 5

49 
subl
 
	g$8
, %
	ge•


50 .
	gloc
 1 28 0

51 
ˇŒ
 
	gmaö_öô


52 .
	gloc
 1 30 0

53 
subl
 
	g$12
, %
e•


54 
pushl
 
$0


55 
ˇŒ
 
idÀ


56 
addl
 
	g$16
, %
	ge•


57 .
	gloc
 1 32 0

58 
	gn›


59 .
	gloc
 1 33 0

60 
	gÀave


61 .
	gcfi_ª°‹e
 5

62 .
	gcfi_def_cÁ
 4, 4

63 
	gªt


64 .
	gcfi_íd¥oc


65 .
	gLFE3
:

66 .
size
 
ssuos_maö
, .-
	gssuos_maö


67 .
	g£˘i⁄
 .
	grod©a


68 .
	gLC3
:

69 .
°rög
 "Memory Detecting\n"

70 .
LC4
:

71 .
°rög
 "%s"

72 .
LC5
:

73 .
°rög
 "-Memory size = %u Kbytes\n"

74 .
LC6
:

75 .
°rög
 "PIT Intialization\n"

76 .
LC7
:

77 .
°rög
 "System call Intialization\n"

78 .
LC8
:

79 .
°rög
 "Interrupt Initialization\n"

80 .
LC9
:

81 .
°rög
 "%sPalloc Initialization\n"

82 .
LC10
:

83 .
°rög
 "Paging Initialization\n"

84 .
LC11
:

85 .
°rög
 "Process Intialization\n"

86 .
Æign
 4

87 .
LC12
:

88 .
°rög
 "========== initialization complete ==========\n\n"

89 .
ãxt


90 .
globl
 
maö_öô


91 .
ty≥
 
maö_öô
, @
fun˘i⁄


92 
	gmaö_öô
:

93 .
LFB4
:

94 .
loc
 1 36 0

95 .
cfi_°¨çroc


96 
pushl
 %
ebp


97 .
cfi_def_cÁ_off£t
 8

98 .
cfi_off£t
 5, -8

99 
	gmovl
 %
	ge•
, %
	gebp


100 .
	gcfi_def_cÁ_ªgi°î
 5

101 
subl
 
	g$8
, %
	ge•


102 .
	gloc
 1 37 0

103 
ˇŒ
 
	göå_dißbÀ


104 .
	gloc
 1 40 0

105 
ˇŒ
 
	göô_c⁄sﬁe


106 .
	gloc
 1 42 0

107 
ˇŒ
 
	g¥öt_c⁄åibut‹s


108 .
	gloc
 1 44 0

109 
ˇŒ
 
	gdëe˘_mem


110 .
	gloc
 1 45 0

111 
subl
 
	g$8
, %
e•


112 
pushl
 
	g$
.
LC3


113 
pushl
 
	g$
.
LC4


114 
ˇŒ
 
¥ötk


115 
addl
 
	g$16
, %
	ge•


116 .
	gloc
 1 46 0

117 
ˇŒ
 
mem_size


118 
shæ
 
	g$10
, %
óx


119 
subl
 
	g$8
, %
e•


120 
	gpushl
 %
óx


121 
pushl
 
	g$
.
LC5


122 
ˇŒ
 
¥ötk


123 
addl
 
	g$16
, %
	ge•


124 .
	gloc
 1 48 0

125 
ˇŒ
 
	göô_pô


126 .
	gloc
 1 49 0

127 
subl
 
	g$8
, %
e•


128 
pushl
 
	g$
.
LC6


129 
pushl
 
	g$
.
LC4


130 
ˇŒ
 
¥ötk


131 
addl
 
	g$16
, %
	ge•


132 .
	gloc
 1 51 0

133 
ˇŒ
 
	göô_sysˇŒ


134 .
	gloc
 1 52 0

135 
subl
 
	g$8
, %
e•


136 
pushl
 
	g$
.
LC7


137 
pushl
 
	g$
.
LC4


138 
ˇŒ
 
¥ötk


139 
addl
 
	g$16
, %
	ge•


140 .
	gloc
 1 54 0

141 
ˇŒ
 
	göô_öå


142 .
	gloc
 1 55 0

143 
subl
 
	g$8
, %
e•


144 
pushl
 
	g$
.
LC8


145 
pushl
 
	g$
.
LC4


146 
ˇŒ
 
¥ötk


147 
addl
 
	g$16
, %
	ge•


148 .
	gloc
 1 57 0

149 
ˇŒ
 
	göô_kbd


150 .
	gloc
 1 59 0

151 
ˇŒ
 
	göô_∑Œoc


152 .
	gloc
 1 60 0

153 
subl
 
	g$12
, %
e•


154 
pushl
 
	g$
.
LC9


155 
ˇŒ
 
¥ötk


156 
addl
 
	g$16
, %
	ge•


157 .
	gloc
 1 62 0

158 
ˇŒ
 
	göô_∑gög


159 .
	gloc
 1 63 0

160 
subl
 
	g$8
, %
e•


161 
pushl
 
	g$
.
LC10


162 
pushl
 
	g$
.
LC4


163 
ˇŒ
 
¥ötk


164 
addl
 
	g$16
, %
	ge•


165 .
	gloc
 1 65 0

166 
ˇŒ
 
	göô_¥oc


167 .
	gloc
 1 66 0

168 
subl
 
	g$8
, %
e•


169 
pushl
 
	g$
.
LC11


170 
pushl
 
	g$
.
LC4


171 
ˇŒ
 
¥ötk


172 
addl
 
	g$16
, %
	ge•


173 .
	gloc
 1 68 0

174 
ˇŒ
 
	göå_íabÀ


175 .
	gloc
 1 70 0

176 
ˇŒ
 
	g∑Œoc_pf_ã°


177 .
	gloc
 1 72 0

178 
ˇŒ
 
	gª‰eshS¸ìn


179 .
	gloc
 1 75 0

180 
ˇŒ
 
	g£ma_£lf_ã°


181 .
	gloc
 1 76 0

182 
subl
 
	g$12
, %
e•


183 
pushl
 
	g$
.
LC12


184 
ˇŒ
 
¥ötk


185 
addl
 
	g$16
, %
	ge•


186 .
	gloc
 1 80 0

187 
ˇŒ
 
	gª‰eshS¸ìn


188 .
	gloc
 1 82 0

189 
n›


190 
	gÀave


191 .
	gcfi_ª°‹e
 5

192 .
	gcfi_def_cÁ
 4, 4

193 
	gªt


194 .
	gcfi_íd¥oc


195 .
	gLFE4
:

196 .
size
 
maö_öô
, .-
	gmaö_öô


197 .
	g£˘i⁄
 .
	grod©a


198 .
	gLC13
:

199 .
°rög
 "SSUOS main start!!!!\n"

200 .
Æign
 4

201 .
LC14
:

202 .
°rög
 " ______ ______ __ __ ______ ______ \n"

203 .
Æign
 4

204 .
LC15
:

205 .
°rög
 " / \\ / \\ / | / | / \\ / \\ \n"

206 .
Æign
 4

207 .
LC16
:

208 .
°rög
 " /$$$$$$ |/$$$$$$ |$$ | $$ | /$$$$$$ |/$$$$$$ |\n"

209 .
Æign
 4

210 .
LC17
:

211 .
°rög
 " $$ \\__$$/ $$ \\__$$/ $$ | $$ | $$ | $$ |$$ \\__$$/ \n"

212 .
Æign
 4

213 .
LC18
:

214 .
°rög
 " $$ \\ $$ \\ $$ | $$ | $$ | $$ |$$ \\ \n"

215 .
Æign
 4

216 .
LC19
:

217 .
°rög
 " $$$$$$ | $$$$$$ |$$ | $$ | $$ | $$ | $$$$$$ |\n"

218 .
Æign
 4

219 .
LC20
:

220 .
°rög
 " / \\__$$ |/ \\__$$ |$$ \\__$$ | $$ \\__$$ |/ \\__$$ |\n"

221 .
Æign
 4

222 .
LC21
:

223 .
°rög
 " $$ $$/ $$ $$/ $$ $$/ $$ $$/ $$ $$/ \n"

224 .
Æign
 4

225 .
LC22
:

226 .
°rög
 " $$$$$$/ $$$$$$/ $$$$$$/ $$$$$$/ $$$$$$/ \n"

227 .
LC23
:

228 .
°rög
 "\n"

229 .
Æign
 4

230 .
LC24
:

231 .
°rög
 "****************Made by OSLAB in SoongSil University*********************\n"

232 .
Æign
 4

233 .
LC25
:

234 .
°rög
 "contributors : Yunkyu Lee , Minwoo Jang , Sanghun Choi , Eunseok Choi\n"

235 .
Æign
 4

236 .
LC26
:

237 .
°rög
 " Hyunho Ji , Giwook Kang , Kisu Kim , Seonguk Lee \n"

238 .
Æign
 4

239 .
LC27
:

240 .
°rög
 " Gibeom Byeon, Jeonghwan Lee, Kyoungmin Kim, Myungjoon Shon\n"

241 .
Æign
 4

242 .
LC28
:

243 .
°rög
 " Jinwoo Lee , Hansol Lee , Mhanwoo Heo, Jeongwoo Choi\n"

244 .
LC29
:

245 .
°rög
 " Yongmin Kim\n"

246 .
Æign
 4

247 .
LC30
:

248 .
°rög
 "************************ Professor. Jiman Hong ************************\n"

249 .
Æign
 4

250 .
LC31
:

251 .
°rög
 " \n"

252 .
ãxt


253 .
globl
 
¥öt_c⁄åibut‹s


254 .
ty≥
 
¥öt_c⁄åibut‹s
, @
fun˘i⁄


255 
	g¥öt_c⁄åibut‹s
:

256 .
LFB5
:

257 .
loc
 1 85 0

258 .
cfi_°¨çroc


259 
pushl
 %
ebp


260 .
cfi_def_cÁ_off£t
 8

261 .
cfi_off£t
 5, -8

262 
	gmovl
 %
	ge•
, %
	gebp


263 .
	gcfi_def_cÁ_ªgi°î
 5

264 
subl
 
	g$8
, %
	ge•


265 .
	gloc
 1 86 0

266 
subl
 
	g$8
, %
e•


267 
pushl
 
	g$
.
LC13


268 
pushl
 
	g$
.
LC4


269 
ˇŒ
 
¥ötk


270 
addl
 
	g$16
, %
	ge•


271 .
	gloc
 1 87 0

272 
subl
 
	g$12
, %
e•


273 
pushl
 
	g$
.
LC14


274 
ˇŒ
 
¥ötk


275 
addl
 
	g$16
, %
	ge•


276 .
	gloc
 1 88 0

277 
subl
 
	g$12
, %
e•


278 
pushl
 
	g$
.
LC15


279 
ˇŒ
 
¥ötk


280 
addl
 
	g$16
, %
	ge•


281 .
	gloc
 1 89 0

282 
subl
 
	g$12
, %
e•


283 
pushl
 
	g$
.
LC16


284 
ˇŒ
 
¥ötk


285 
addl
 
	g$16
, %
	ge•


286 .
	gloc
 1 90 0

287 
subl
 
	g$12
, %
e•


288 
pushl
 
	g$
.
LC17


289 
ˇŒ
 
¥ötk


290 
addl
 
	g$16
, %
	ge•


291 .
	gloc
 1 91 0

292 
subl
 
	g$12
, %
e•


293 
pushl
 
	g$
.
LC18


294 
ˇŒ
 
¥ötk


295 
addl
 
	g$16
, %
	ge•


296 .
	gloc
 1 92 0

297 
subl
 
	g$12
, %
e•


298 
pushl
 
	g$
.
LC19


299 
ˇŒ
 
¥ötk


300 
addl
 
	g$16
, %
	ge•


301 .
	gloc
 1 93 0

302 
subl
 
	g$12
, %
e•


303 
pushl
 
	g$
.
LC20


304 
ˇŒ
 
¥ötk


305 
addl
 
	g$16
, %
	ge•


306 .
	gloc
 1 94 0

307 
subl
 
	g$12
, %
e•


308 
pushl
 
	g$
.
LC21


309 
ˇŒ
 
¥ötk


310 
addl
 
	g$16
, %
	ge•


311 .
	gloc
 1 95 0

312 
subl
 
	g$12
, %
e•


313 
pushl
 
	g$
.
LC22


314 
ˇŒ
 
¥ötk


315 
addl
 
	g$16
, %
	ge•


316 .
	gloc
 1 96 0

317 
subl
 
	g$12
, %
e•


318 
pushl
 
	g$
.
LC23


319 
ˇŒ
 
¥ötk


320 
addl
 
	g$16
, %
	ge•


321 .
	gloc
 1 97 0

322 
subl
 
	g$12
, %
e•


323 
pushl
 
	g$
.
LC24


324 
ˇŒ
 
¥ötk


325 
addl
 
	g$16
, %
	ge•


326 .
	gloc
 1 98 0

327 
subl
 
	g$12
, %
e•


328 
pushl
 
	g$
.
LC23


329 
ˇŒ
 
¥ötk


330 
addl
 
	g$16
, %
	ge•


331 .
	gloc
 1 99 0

332 
subl
 
	g$12
, %
e•


333 
pushl
 
	g$
.
LC25


334 
ˇŒ
 
¥ötk


335 
addl
 
	g$16
, %
	ge•


336 .
	gloc
 1 100 0

337 
subl
 
	g$12
, %
e•


338 
pushl
 
	g$
.
LC26


339 
ˇŒ
 
¥ötk


340 
addl
 
	g$16
, %
	ge•


341 .
	gloc
 1 101 0

342 
subl
 
	g$12
, %
e•


343 
pushl
 
	g$
.
LC27


344 
ˇŒ
 
¥ötk


345 
addl
 
	g$16
, %
	ge•


346 .
	gloc
 1 102 0

347 
subl
 
	g$12
, %
e•


348 
pushl
 
	g$
.
LC28


349 
ˇŒ
 
¥ötk


350 
addl
 
	g$16
, %
	ge•


351 .
	gloc
 1 103 0

352 
subl
 
	g$12
, %
e•


353 
pushl
 
	g$
.
LC29


354 
ˇŒ
 
¥ötk


355 
addl
 
	g$16
, %
	ge•


356 .
	gloc
 1 104 0

357 
subl
 
	g$12
, %
e•


358 
pushl
 
	g$
.
LC23


359 
ˇŒ
 
¥ötk


360 
addl
 
	g$16
, %
	ge•


361 .
	gloc
 1 105 0

362 
subl
 
	g$12
, %
e•


363 
pushl
 
	g$
.
LC30


364 
ˇŒ
 
¥ötk


365 
addl
 
	g$16
, %
	ge•


366 .
	gloc
 1 106 0

367 
subl
 
	g$12
, %
e•


368 
pushl
 
	g$
.
LC31


369 
ˇŒ
 
¥ötk


370 
addl
 
	g$16
, %
	ge•


371 .
	gloc
 1 107 0

372 
n›


373 
	gÀave


374 .
	gcfi_ª°‹e
 5

375 .
	gcfi_def_cÁ
 4, 4

376 
	gªt


377 .
	gcfi_íd¥oc


378 .
	gLFE5
:

379 .
size
 
¥öt_c⁄åibut‹s
, .-
	g¥öt_c⁄åibut‹s


380 .
	gLëext0
:

381 .
fûe
 2 "./include/device/console.h"

382 .
fûe
 3 "./include/syscall.h"

383 .
£˘i⁄
 .
debug_öfo
,"",@
	g¥ogbôs


384 .
	gLdebug_öfo0
:

386 .
vÆue
 0x4

387 ..
Ldebug_abbªv0


388 .
byã
 0x4

389 .
uÀb128
 0x1

390 ..
LASF22


391 .
byã
 0xc

392 ..
LASF23


393 ..
LASF24


394 ..
Lãxt0


395 ..
Lëext0
-.
Lãxt0


396 ..
Ldebug_löe0


397 .
uÀb128
 0x2

398 .
byã
 0x1

399 .
byã
 0x8

400 ..
LASF0


401 .
uÀb128
 0x2

402 .
byã
 0x1

403 .
byã
 0x6

404 ..
LASF1


405 .
uÀb128
 0x2

406 .
byã
 0x4

407 .
byã
 0x7

408 ..
LASF2


409 .
uÀb128
 0x2

410 .
byã
 0x8

411 .
byã
 0x5

412 ..
LASF3


413 .
uÀb128
 0x2

414 .
byã
 0x1

415 .
byã
 0x6

416 ..
LASF4


417 .
uÀb128
 0x2

418 .
byã
 0x2

419 .
byã
 0x5

420 ..
LASF5


421 .
uÀb128
 0x3

422 .
byã
 0x4

423 .
byã
 0x5

424 .
°rög
 "int"

425 .
uÀb128
 0x2

426 .
byã
 0x2

427 .
byã
 0x7

428 ..
LASF6


429 .
uÀb128
 0x2

430 .
byã
 0x8

431 .
byã
 0x7

432 ..
LASF7


433 .
uÀb128
 0x4

434 ..
LASF25


435 .
byã
 0x4

437 .
byã
 0x3

438 .
byã
 0x4

440 .
uÀb128
 0x5

441 ..
LASF8


442 .
byã
 0

443 .
uÀb128
 0x5

444 ..
LASF9


445 .
byã
 0x1

446 .
uÀb128
 0x5

447 ..
LASF10


448 .
byã
 0x2

449 .
uÀb128
 0x5

450 ..
LASF11


451 .
byã
 0x3

452 .
uÀb128
 0x5

453 ..
LASF12


454 .
byã
 0x4

455 .
uÀb128
 0x5

456 ..
LASF13


457 .
byã
 0x5

458 .
byã
 0

459 .
uÀb128
 0x6

460 ..
LASF14


461 .
byã
 0x1

462 .
byã
 0x1a

463 ..
LFB3


464 ..
LFE3
-.
LFB3


465 .
uÀb128
 0x1

466 .
byã
 0x9c

467 .
uÀb128
 0x6

468 ..
LASF15


469 .
byã
 0x1

470 .
byã
 0x23

471 ..
LFB4


472 ..
LFE4
-.
LFB4


473 .
uÀb128
 0x1

474 .
byã
 0x9c

475 .
uÀb128
 0x6

476 ..
LASF16


477 .
byã
 0x1

478 .
byã
 0x54

479 ..
LFB5


480 ..
LFE5
-.
LFB5


481 .
uÀb128
 0x1

482 .
byã
 0x9c

483 .
uÀb128
 0x7

484 ..
LASF17


485 .
byã
 0x2

486 .
byã
 0xc

488 .
uÀb128
 0x5

489 .
byã
 0x3

490 .
Glob_x


491 .
uÀb128
 0x7

492 ..
LASF18


493 .
byã
 0x2

494 .
byã
 0xd

496 .
uÀb128
 0x5

497 .
byã
 0x3

498 .
Glob_y


499 .
uÀb128
 0x7

500 ..
LASF19


501 .
byã
 0x1

502 .
byã
 0x16

504 .
uÀb128
 0x5

505 .
byã
 0x3

506 .
VERSION


507 .
uÀb128
 0x8

508 .
byã
 0x4

510 .
uÀb128
 0x9

512 .
uÀb128
 0x7

513 ..
LASF20


514 .
byã
 0x1

515 .
byã
 0x17

517 .
uÀb128
 0x5

518 .
byã
 0x3

519 .
AUTHOR


520 .
uÀb128
 0x7

521 ..
LASF21


522 .
byã
 0x1

523 .
byã
 0x18

525 .
uÀb128
 0x5

526 .
byã
 0x3

527 .
MODIFIER


528 .
byã
 0

529 .
£˘i⁄
 .
debug_abbªv
,"",@
	g¥ogbôs


530 .
	gLdebug_abbªv0
:

531 .
uÀb128
 0x1

532 .
uÀb128
 0x11

533 .
byã
 0x1

534 .
uÀb128
 0x25

535 .
uÀb128
 0xe

536 .
uÀb128
 0x13

537 .
uÀb128
 0xb

538 .
uÀb128
 0x3

539 .
uÀb128
 0xe

540 .
uÀb128
 0x1b

541 .
uÀb128
 0xe

542 .
uÀb128
 0x11

543 .
uÀb128
 0x1

544 .
uÀb128
 0x12

545 .
uÀb128
 0x6

546 .
uÀb128
 0x10

547 .
uÀb128
 0x17

548 .
byã
 0

549 .
byã
 0

550 .
uÀb128
 0x2

551 .
uÀb128
 0x24

552 .
byã
 0

553 .
uÀb128
 0xb

554 .
uÀb128
 0xb

555 .
uÀb128
 0x3e

556 .
uÀb128
 0xb

557 .
uÀb128
 0x3

558 .
uÀb128
 0xe

559 .
byã
 0

560 .
byã
 0

561 .
uÀb128
 0x3

562 .
uÀb128
 0x24

563 .
byã
 0

564 .
uÀb128
 0xb

565 .
uÀb128
 0xb

566 .
uÀb128
 0x3e

567 .
uÀb128
 0xb

568 .
uÀb128
 0x3

569 .
uÀb128
 0x8

570 .
byã
 0

571 .
byã
 0

572 .
uÀb128
 0x4

573 .
uÀb128
 0x4

574 .
byã
 0x1

575 .
uÀb128
 0x3

576 .
uÀb128
 0xe

577 .
uÀb128
 0xb

578 .
uÀb128
 0xb

579 .
uÀb128
 0x49

580 .
uÀb128
 0x13

581 .
uÀb128
 0x3a

582 .
uÀb128
 0xb

583 .
uÀb128
 0x3b

584 .
uÀb128
 0xb

585 .
uÀb128
 0x1

586 .
uÀb128
 0x13

587 .
byã
 0

588 .
byã
 0

589 .
uÀb128
 0x5

590 .
uÀb128
 0x28

591 .
byã
 0

592 .
uÀb128
 0x3

593 .
uÀb128
 0xe

594 .
uÀb128
 0x1c

595 .
uÀb128
 0xb

596 .
byã
 0

597 .
byã
 0

598 .
uÀb128
 0x6

599 .
uÀb128
 0x2e

600 .
byã
 0

601 .
uÀb128
 0x3f

602 .
uÀb128
 0x19

603 .
uÀb128
 0x3

604 .
uÀb128
 0xe

605 .
uÀb128
 0x3a

606 .
uÀb128
 0xb

607 .
uÀb128
 0x3b

608 .
uÀb128
 0xb

609 .
uÀb128
 0x27

610 .
uÀb128
 0x19

611 .
uÀb128
 0x11

612 .
uÀb128
 0x1

613 .
uÀb128
 0x12

614 .
uÀb128
 0x6

615 .
uÀb128
 0x40

616 .
uÀb128
 0x18

617 .
uÀb128
 0x2116

618 .
uÀb128
 0x19

619 .
byã
 0

620 .
byã
 0

621 .
uÀb128
 0x7

622 .
uÀb128
 0x34

623 .
byã
 0

624 .
uÀb128
 0x3

625 .
uÀb128
 0xe

626 .
uÀb128
 0x3a

627 .
uÀb128
 0xb

628 .
uÀb128
 0x3b

629 .
uÀb128
 0xb

630 .
uÀb128
 0x49

631 .
uÀb128
 0x13

632 .
uÀb128
 0x3f

633 .
uÀb128
 0x19

634 .
uÀb128
 0x2

635 .
uÀb128
 0x18

636 .
byã
 0

637 .
byã
 0

638 .
uÀb128
 0x8

639 .
uÀb128
 0xf

640 .
byã
 0

641 .
uÀb128
 0xb

642 .
uÀb128
 0xb

643 .
uÀb128
 0x49

644 .
uÀb128
 0x13

645 .
byã
 0

646 .
byã
 0

647 .
uÀb128
 0x9

648 .
uÀb128
 0x26

649 .
byã
 0

650 .
uÀb128
 0x49

651 .
uÀb128
 0x13

652 .
byã
 0

653 .
byã
 0

654 .
byã
 0

655 .
£˘i⁄
 .
debug_¨™ges
,"",@
	g¥ogbôs


657 .
	gvÆue
 0x2

658 ..
	gLdebug_öfo0


659 .
	gbyã
 0x4

660 .
	gbyã
 0

661 .
	gvÆue
 0

662 .
	gvÆue
 0

663 ..
	gLãxt0


664 ..
	gLëext0
-.
	gLãxt0


667 .
	g£˘i⁄
 .
	gdebug_löe
,"",@
	g¥ogbôs


668 .
	gLdebug_löe0
:

669 .
£˘i⁄
 .
debug_°r
,"MS",@
	g¥ogbôs
,1

670 .
	gLASF3
:

671 .
°rög
 "longÜong int"

672 .
LASF2
:

673 .
°rög
 "unsigned int"

674 .
LASF0
:

675 .
°rög
 "unsigned char"

676 .
LASF14
:

677 .
°rög
 "ssuos_main"

678 .
LASF7
:

679 .
°rög
 "longÜong unsigned int"

680 .
LASF18
:

681 .
°rög
 "Glob_y"

682 .
LASF23
:

683 .
°rög
 "arch/Main.c"

684 .
LASF12
:

685 .
°rög
 "SYS_SHUTDOWN"

686 .
LASF11
:

687 .
°rög
 "SYS_SSUREAD"

688 .
LASF19
:

689 .
°rög
 "VERSION"

690 .
LASF1
:

691 .
°rög
 "char"

692 .
LASF20
:

693 .
°rög
 "AUTHOR"

694 .
LASF15
:

695 .
°rög
 "main_init"

696 .
LASF25
:

697 .
°rög
 "SYS_LIST"

698 .
LASF17
:

699 .
°rög
 "Glob_x"

700 .
LASF8
:

701 .
°rög
 "SYS_FORK"

702 .
LASF22
:

703 .
°rög
 "GNU C11 5.4.0 20160609 -m32 -mtune=generic -march=i686 -g -O0 -ffreestanding -fno-stack-protector"

704 .
LASF9
:

705 .
°rög
 "SYS_EXIT"

706 .
LASF6
:

707 .
°rög
 "short unsigned int"

708 .
LASF24
:

709 .
°rög
 "/media/jahn/External1/os/p5/ssuos/src/kernel"

710 .
LASF16
:

711 .
°rög
 "print_contributors"

712 .
LASF10
:

713 .
°rög
 "SYS_WAIT"

714 .
LASF5
:

715 .
°rög
 "short int"

716 .
LASF21
:

717 .
°rög
 "MODIFIER"

718 .
LASF13
:

719 .
°rög
 "SYS_NUM"

720 .
LASF4
:

721 .
°rög
 "signed char"

722 .
idít
 "GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609"

723 .
£˘i⁄
 .
nŸe
.
GNU
-
°ack
,"",@
	g¥ogbôs


	@device/block.c

1 
	~<devi˚/block.h
>

2 
	~<li°.h
>

3 
	~<°rög.h
>

4 
	~<°dio.h
>

5 
	~<devi˚/ide.h
>

6 
	~<mem/mÆloc.h
>

9 
	sblock


11 
li°_ñem
 
	mli°_ñem
;

13 
	m«me
[16];

14 
block_ty≥
 
	mty≥
;

15 
block_£˘‹_t
 
	msize
;

17 c⁄° 
block_›î©i⁄s
 *
	m›s
;

18 *
	maux
;

20 
	mªad_˙t
;

21 
	mwrôe_˙t
;

25 
li°
 
	gÆl_blocks
 = 
LIST_INITIALIZER
 (
Æl_blocks
);

28 
block
 *
	gblock_by_rﬁe
[
BLOCK_ROLE_CNT
];

30 
block
 *
li°_ñem_to_block
 (
li°_ñem
 *);

35 
	$block_ty≥_«me
 (
block_ty≥
 
ty≥
)

37 c⁄° *
block_ty≥_«mes
[
BLOCK_CNT
] =

48  
block_ty≥_«mes
[
ty≥
];

49 
	}
}

53 
block
 *

54 
	$block_gë_rﬁe
 (
block_ty≥
 
rﬁe
)

57  
block_by_rﬁe
[
rﬁe
];

58 
	}
}

62 
	$block_£t_rﬁe
 (
block_ty≥
 
rﬁe
, 
block
 *block)

65 
block_by_rﬁe
[
rﬁe
] = 
block
;

66 
	}
}

70 
block
 *

71 
	$block_fú°
 ()

73  
	`li°_ñem_to_block
 (
	`li°_begö
 (&
Æl_blocks
));

74 
	}
}

78 
block
 *

79 
	$block_√xt
 (
block
 *block)

81  
	`li°_ñem_to_block
 (
	`li°_√xt
 (&
block
->
li°_ñem
));

82 
	}
}

86 
block
 *

87 
	$block_gë_by_«me
 (c⁄° *
«me
)

89 
li°_ñem
 *
e
;

91 
e
 = 
	`li°_begö
 (&
Æl_blocks
);É !
	`li°_íd
 (&all_blocks);

92 
e
 = 
	`li°_√xt
 (e))

94 
block
 *block = 
	`li°_íåy
 (
e
, block, 
li°_ñem
);

95 i‡(!
	`°rcmp
 (
«me
, 
block
->name))

96  
block
;

99  
NULL
;

100 
	}
}

105 
	$check_£˘‹
 (
block
 *block, 
block_£˘‹_t
 
£˘‹
)

107 i‡(
£˘‹
 >
block
->
size
)

111 ; ("Ac˚s†∑°Énd o‡devi˚ %†(£˘‹=%"
PRDSNu
", "

112 "size=%"
PRDSNu
")\n", 
	`block_«me
 (
block
), 
£˘‹
, block->
size
);

114 
	}
}

121 
	$block_ªad
 (
block
 *block, 
block_£˘‹_t
 
£˘‹
, *
buf„r
)

123 
	`check_£˘‹
 (
block
, 
£˘‹
);

124 
block
->
›s
->
	`ªad
 (block->
aux
, 
£˘‹
, 
buf„r
);

125 
block
->
ªad_˙t
++;

126 
	}
}

134 
	$block_wrôe
 (
block
 *block, 
block_£˘‹_t
 
£˘‹
, c⁄° *
buf„r
)

136 
	`check_£˘‹
 (
block
, 
£˘‹
);

138 
block
->
›s
->
	`wrôe
 (block->
aux
, 
£˘‹
, 
buf„r
);

139 
block
->
wrôe_˙t
++;

140 
	}
}

143 
block_£˘‹_t


144 
	$block_size
 (
block
 *block)

146  
block
->
size
;

147 
	}
}

151 
	$block_«me
 (
block
 *block)

153  
block
->
«me
;

154 
	}
}

157 
block_ty≥


158 
	$block_ty≥
 (
block
 *block)

160  
block
->
ty≥
;

161 
	}
}

165 
	$block_¥öt_°©s
 ()

167 
i
;

169 
i
 = 0; i < 
BLOCK_ROLE_CNT
; i++)

171 
block
 *block = 
block_by_rﬁe
[
i
];

172 i‡(
block
 !
NULL
)

174 
	`¥ötf
 ("%s (%s): %lluÑeads, %llu writes\n",

175 
block
->
«me
, 
	`block_ty≥_«me
 (block->
ty≥
),

176 
block
->
ªad_˙t
, block->
wrôe_˙t
);

179 
	}
}

186 
block
 *

187 
	$block_ªgi°î
 (c⁄° *
«me
, 
block_ty≥
 
ty≥
,

188 c⁄° *
exåa_öfo
, 
block_£˘‹_t
 
size
,

189 c⁄° 
block_›î©i⁄s
 *
›s
, *
aux
)

191 
block
 *block = 
	`mÆloc
 ( *block);

192 i‡(
block
 =
NULL
)

195 
	`li°_push_back
 (&
Æl_blocks
, &
block
->
li°_ñem
);

196 
	`°æ˝y
 (
block
->
«me
,Çame,  block->name);

197 
block
->
ty≥
 =Åype;

198 
block
->
size
 = size;

199 
block
->
›s
 = ops;

200 
block
->
aux
 =áux;

201 
block
->
ªad_˙t
 = 0;

202 
block
->
wrôe_˙t
 = 0;

204 
	`¥ötf
 ("%s: %'"
PRDSNu
" se˘‹†(", 
block
->
«me
, block->
size
);

205 
	`¥öt_hum™_ªadabÀ_size
 ((
uöt64_t
Ë
block
->
size
 * 
BLOCK_SECTOR_SIZE
);

206 
	`¥ötf
 (")");

207 i‡(
exåa_öfo
 !
NULL
)

208 
	`¥ötf
 (", %s", 
exåa_öfo
);

209 
	`¥ötf
 ("\n");

211  
block
;

212 
	}
}

216 
block
 *

217 
	$li°_ñem_to_block
 (
li°_ñem
 *list_elem)

219  (
li°_ñem
 !
	`li°_íd
 (&
Æl_blocks
)

220 ? 
	`li°_íåy
 (
li°_ñem
, 
block
,Üist_elem)

221 : 
NULL
);

222 
	}
}

	@device/console.c

1 
	~<öãºu±.h
>

2 
	~<devi˚/c⁄sﬁe.h
>

3 
	~<ty≥.h
>

4 
	~<devi˚/kbd.h
>

5 
	~<devi˚/io.h
>

6 
	~<devi˚/pô.h
>

7 
	~<°d¨g.h
>

9 
	#HSCREEN
 80

	)

10 
	#VSCREEN
 25

	)

11 
	#SIZE_SCREEN
 
HSCREEN
 * 
VSCREEN


	)

12 
	#NSCROLL
 100

	)

13 
	#SIZE_SCROLL
 
NSCROLL
 * 
HSCREEN


	)

14 
	#VIDIO_MEMORY
 0xB8000

	)

16 
	#IO_BASE
 0x3F8

	)

17 
	#FIRST_SPORT
 (
IO_BASE
)

	)

18 
	#LINE_STATUS
 (
IO_BASE
 + 5Ë

	)

19 
	#THR_EMPTY
 0x20

	)

21 
	g√xt_löe
[2];

23 #ifde‡
SCREEN_SCROLL


25 
	#buf_e
 (
buf_w
 + 
SIZE_NSCROLL
)

	)

26 
	#SCROLL_END
 
buf_s
 + 
SIZE_SCROLL


	)

28 
	gbuf_s
[
SIZE_SCROLL
];

29 *
	gbuf_w
;

30 *
	gbuf_p
;

32 
	gsum_y
;

34 
boﬁ
 
	ga_s
 = 
TRUE
;

37 
	$öô_c⁄sﬁe
()

39 
Glob_x
 = 0;

40 
Glob_y
 = 2;

42 
√xt_löe
[0] = '\r';

43 
√xt_löe
[1] = '\r';

45 #ifde‡
SCREEN_SCROLL


46 
buf_w
 = 
buf_s
;

47 
buf_p
 = 
buf_s
;

48 
a_s
 = 
TRUE
;

50 
sum_y
 = 0;

53 
	}
}

55 
	$£t_curs‹
()

57 
	`outb
(0x3D4, 0x0F);

58 
	`outb
(0x3D5, (
Glob_y
*
HSCREEN
+
Glob_x
)&0xFF);

59 
	`outb
(0x3D4, 0x0E);

60 
	`outb
(0x3D5, (((
Glob_y
*
HSCREEN
+
Glob_x
)>>8)&0xFF));

61 
	}
}

63 
	$PrötCh¨ToS¸ìn
(
x
, 
y
, c⁄° *
pSåög
)

65 
Glob_x
 = 
x
;

66 
Glob_y
 = 
y
;

67 
i
 = 0;

68 
pSåög
[
i
] != 0)

70 
	`PrötCh¨
(
Glob_x
++, 
Glob_y
, 
pSåög
[
i
++]);

72 
a_s
 = 
TRUE
;

73 
	}
}

75 
	$PrötCh¨
(
x
, 
y
, c⁄° 
Såög
)

77 #ifde‡
SCREEN_SCROLL


78 i‡(
Såög
 == '\n') {

79 if((
y
+1Ë> 
VSCREEN
) {

80 
	`s¸ﬁl
();

81 
y
--;

83 
Glob_x
 = 0;

84 
Glob_y
 = 
y
+1;

85 
sum_y
++;

88 i‡(
Såög
 == '\b') {

89 if(
Glob_x
 == 0) ;

90 
Glob_x
-=2;

91 
buf_w
[
y
 * 
HSCREEN
 + 
x
 - 1] = 0;

94 i‡((
y
 >
VSCREEN
Ë&& (
x
 >= 0)) {

95 
	`s¸ﬁl
();

96 
x
 = 0;

97 
y
--;

100 * 
b
 = &
buf_w
[
y
 * 
HSCREEN
 + 
x
];

101 if(
b
 >
SCROLL_END
)

102 
b
-
SIZE_SCROLL
;

103 *
b
 = 
Såög
;

105 if(
Glob_x
 >
HSCREEN
)

107 
Glob_x
 = 0;

108 
Glob_y
++;

109 
sum_y
++;

113 
CHAR
 *
pS¸ìn
 = (CHAR *)
VIDIO_MEMORY
;

115 i‡(
Såög
 == '\n') {

116 if((
y
+1) > 24) {

117 
	`s¸ﬁl
();

118 
y
--;

120 
pS¸ìn
 +((
y
+1) * 80);

121 
Glob_x
 = 0;

122 
Glob_y
 = 
y
+1;

126 i‡((
y
 > 24Ë&& (
x
 >= 0)) {

127 
	`s¸ﬁl
();

128 
x
 = 0; 
y
--;

131 
pS¸ìn
 +–
y
 * 80Ë+ 
x
;

132 
pS¸ìn
[0].
bAâ
 = 0x07;

133 
pS¸ìn
[0].
bCh
 = 
Såög
;

135 if(
Glob_x
 > 79)

137 
Glob_x
 = 0;

138 
Glob_y
++;

142 
	}
}

144 
	$˛rS¸ìn
()

146 
CHAR
 *
pS¸ìn
 = (CHAR *Ë
VIDIO_MEMORY
;

147 
i
;

149 
i
 = 0; i < 80*25; i++) {

150 (*
pS¸ìn
).
bAâ
 = 0x07;

151 (*
pS¸ìn
++).
bCh
 = ' ';

153 
Glob_x
 = 0;

154 
Glob_y
 = 0;

155 
	}
}

157 
	$s¸ﬁl
()

159 #ifde‡
SCREEN_SCROLL


160 
buf_w
 +
HSCREEN
;

161 
buf_p
 +
HSCREEN
;

163 
buf_w
 > 
SCROLL_END
)

164 
buf_w
 -
SIZE_SCROLL
;

166 
i
;

167 *
buf_±r
 = 
buf_w
 + 
SIZE_SCREEN
;

168 
i
 = 0; i < 
HSCREEN
; i++)

170 if(
buf_±r
 > 
SCROLL_END
)

171 
buf_±r
 -
SIZE_SCROLL
;

172 *(
buf_±r
++) = 0;

176 
CHAR
 *
pS¸ìn
 = (CHAR *Ë
VIDIO_MEMORY
;

177 
CHAR
 *
pS¸Buf
 = (CHAR *Ë(
VIDIO_MEMORY
 + 2*80);

178 
i
;

179 
i
 = 0; i < 80*24; i++) {

180 (*
pS¸ìn
).
bAâ
 = (*
pS¸Buf
).bAtt;

181 (*
pS¸ìn
++).
bCh
 = (*
pS¸Buf
++).bCh;

183 
i
 = 0; i < 80; i++) {

184 (*
pS¸ìn
).
bAâ
 = 0x07;

185 (*
pS¸ìn
++).
bCh
 = ' ';

188 
Glob_y
--;

190 
	}
}

192 #ifde‡
SERIAL_STDOUT


193 
	$¥ötCh¨ToSîül
(c⁄° *
pSåög
)

195 
i
;

196 
öå_Àvñ
 
ﬁd_Àvñ
 = 
	`öå_dißbÀ
();

197 ;*
pSåög
 !
NULL
;ÖString++)

199 if(*
pSåög
 != '\n'){

200 (
	`öb
(
LINE_STATUS
Ë& 
THR_EMPTY
) == 0)

202 
	`outb
(
FIRST_SPORT
, *
pSåög
);

206 
i
=0; i<2; i++){

207 (
	`öb
(
LINE_STATUS
Ë& 
THR_EMPTY
) == 0)

209 
	`outb
(
FIRST_SPORT
, 
√xt_löe
[
i
]);

213 
	`öå_£t_Àvñ
 (
ﬁd_Àvñ
);

214 
	}
}

218 
	$¥ötk
(c⁄° *
fmt
, ...)

220 
buf
[1024];

221 
va_li°
 
¨gs
;

222 
Àn
;

224 
	`va_°¨t
(
¨gs
, 
fmt
);

225 
Àn
 = 
	`v•rötk
(
buf
, 
fmt
, 
¨gs
);

226 
	`va_íd
(
¨gs
);

228 #ifde‡
SERIAL_STDOUT


229 
	`¥ötCh¨ToSîül
(
buf
);

231 
	`PrötCh¨ToS¸ìn
(
Glob_x
, 
Glob_y
, 
buf
);

233  
Àn
;

234 
	}
}

236 #ifde‡
SCREEN_SCROLL


237 
	$s¸ﬁl_s¸ìn
(
off£t
)

239 * 
tmp_buf_p
;

240 * 
tmp_buf_w
;

241 if(
a_s
 =
TRUE
 && 
off£t
 > 0 && 
buf_p
 =
buf_w
)

244 
a_s
 = 
FALSE
;

245 
tmp_buf_p
 = (*)(()
buf_p
 + (
HSCREEN
 * 
off£t
));

246 
tmp_buf_w
 = 
buf_w
 + 
SIZE_SCREEN
;

247 if(
tmp_buf_w
 > 
SCROLL_END
)

248 
tmp_buf_w
 = (*)((Èmp_buf_w - 
SIZE_SCROLL
);

250 if(
sum_y
 < 
NSCROLL
 && 
off£t
 < 0 && 
tmp_buf_p
 <
buf_s
 && 
buf_p
 > buf_s) ;

251 if(
off£t
 > 0 && 
tmp_buf_p
 > 
buf_w
 && 
buf_p
 <= buf_w) ;

252 if(
off£t
 < 0 && 
tmp_buf_p
 <
tmp_buf_w
 && 
buf_p
 >Åmp_buf_w) ;

254 
buf_p
 = 
tmp_buf_p
;

256 if(
buf_p
 >
SCROLL_END
)

257 
buf_p
 = (*)(()buf_∞- 
SIZE_SCROLL
);

258 if(
buf_p
 < 
buf_s
)

259 
buf_p
 = (*)(()buf_∞+ 
SIZE_SCROLL
);

261 
	`ª‰eshS¸ìn
();

262 
	}
}

264 
	$£t_ÁŒow
()

266 
a_s
 = 
TRUE
;

267 
	}
}

269 
	$ª‰eshS¸ìn
()

271 
CHAR
 *
p_s
(CHAR *Ë
VIDIO_MEMORY
;

272 
i
;

274 if(
a_s
)

275 
buf_p
 = 
buf_w
;

277 * 
b
 = 
buf_p
;

279 
i
 = 0; i < 
SIZE_SCREEN
; i++, 
b
++, 
p_s
++)

281 if(
b
 >
SCROLL_END
)

282 
b
 -
SIZE_SCROLL
;

283 
p_s
->
bAâ
 = 0x07;

284 
p_s
->
bCh
 = *
b
;

286 
	}
}

	@device/device.c

1 
	~<devi˚/c⁄sﬁe.h
>

2 
	~<devi˚/devi˚.h
>

3 
	~<devi˚/io.h
>

6 
	$dev_shutdown
()

8 c⁄° 
s
[] = "Shutdown";

9 c⁄° *
p
;

14 
	`¥ötk
 ("Powering off...\n");

19 
p
 = 
s
; *p != '\0';Ö++)

20 
	`outb
 (0x8900, *
p
);

25 
asm
 volatile ("cli; hlt" : : : "memory");

28 
	`¥ötk
 ("stillÑunning...\n");

30 
	}
}

	@device/ide.c

1 
	~<devi˚/ide.h
>

2 
	~<˘y≥.h
>

3 
	~<debug.h
>

4 
	~<°dboﬁ.h
>

5 
	~<°dio.h
>

6 
	~<devi˚/block.h
>

7 
	~<devi˚/∑πôi⁄.h
>

8 
	~<devi˚/io.h
>

9 
	~<öãºu±.h
>

10 
	~<synch.h
>

16 
	#ªg_d©a
(
CHANNEL
Ë((CHANNEL)->
ªg_ba£
 + 0Ë

	)

17 
	#ªg_îr‹
(
CHANNEL
Ë((CHANNEL)->
ªg_ba£
 + 1Ë

	)

18 
	#ªg_n£˘
(
CHANNEL
Ë((CHANNEL)->
ªg_ba£
 + 2Ë

	)

19 
	#ªg_lbÆ
(
CHANNEL
Ë((CHANNEL)->
ªg_ba£
 + 3Ë

	)

20 
	#ªg_lbam
(
CHANNEL
Ë((CHANNEL)->
ªg_ba£
 + 4Ë

	)

21 
	#ªg_lbah
(
CHANNEL
Ë((CHANNEL)->
ªg_ba£
 + 5Ë

	)

22 
	#ªg_devi˚
(
CHANNEL
Ë((CHANNEL)->
ªg_ba£
 + 6Ë

	)

23 
	#ªg_°©us
(
CHANNEL
Ë((CHANNEL)->
ªg_ba£
 + 7Ë

	)

24 
	#ªg_comm™d
(
CHANNEL
Ë
	`ªg_°©us
 (CHANNELË

	)

29 
	#ªg_˘l
(
CHANNEL
Ë((CHANNEL)->
ªg_ba£
 + 0x206Ë

	)

30 
	#ªg_Æt_°©us
(
CHANNEL
Ë
	`ªg_˘l
 (CHANNELË

	)

33 
	#STA_BSY
 0x80

	)

34 
	#STA_DRDY
 0x40

	)

35 
	#STA_DRQ
 0x08

	)

38 
	#CTL_SRST
 0x04

	)

41 
	#DEV_MBS
 0xa0

	)

42 
	#DEV_LBA
 0x40

	)

43 
	#DEV_DEV
 0x10

	)

48 
	#CMD_IDENTIFY_DEVICE
 0xe¯

	)

49 
	#CMD_READ_SECTOR_RETRY
 0x20

	)

50 
	#CMD_WRITE_SECTOR_RETRY
 0x30

	)

53 
	s©a_disk


55 
	m«me
[8];

56 
ch™√l
 *
	mch™√l
;

57 
	mdev_no
;

58 
boﬁ
 
	mis_©a
;

63 
	sch™√l


65 
	m«me
[8];

66 
uöt16_t
 
	mªg_ba£
;

67 
uöt8_t
 
	múq
;

69 
lock
 
	mlock
;

70 
boﬁ
 
	mex≥˘ög_öãºu±
;

72 
£m≠h‹e
 
	mcom∂ëi⁄_waô
;

74 
©a_disk
 
	mdevi˚s
[2];

78 
	#CHANNEL_CNT
 2

	)

79 
ch™√l
 
	gch™√ls
[
CHANNEL_CNT
];

81 
block_›î©i⁄s
 
	gide_›î©i⁄s
;

83 
ª£t_ch™√l
 (
ch™√l
 *);

84 
boﬁ
 
check_devi˚_ty≥
 (
©a_disk
 *);

85 
idítify_©a_devi˚
 (
©a_disk
 *);

87 
£À˘_£˘‹
 (
©a_disk
 *, 
block_£˘‹_t
);

88 
issue_pio_comm™d
 (
ch™√l
 *, 
uöt8_t
 
comm™d
);

89 
öput_£˘‹
 (
ch™√l
 *, *);

90 
ouçut_£˘‹
 (
ch™√l
 *, const *);

92 
waô_u¡û_idÀ
 (c⁄° 
©a_disk
 *);

93 
boﬁ
 
waô_whûe_busy
 (c⁄° 
©a_disk
 *);

94 
£À˘_devi˚
 (c⁄° 
©a_disk
 *);

95 
£À˘_devi˚_waô
 (c⁄° 
©a_disk
 *);

97 
öãºu±_h™dÀr
 (
öå_num
);

101 
	$ide_öô
 ()

103 
size_t
 
ch™_no
;

105 
ch™_no
 = 0; ch™_nÿ< 
CHANNEL_CNT
; chan_no++)

107 
ch™√l
 *
c
 = &
ch™√ls
[
ch™_no
];

108 
dev_no
;

111 
ch™_no
)

114 
c
->
ªg_ba£
 = 0x1f0;

115 
c
->
úq
 = 14 + 0x20;

118 
c
->
ªg_ba£
 = 0x170;

119 
c
->
úq
 = 15 + 0x20;

122 
	`lock_öô
 (&
c
->
lock
);

123 
c
->
ex≥˘ög_öãºu±
 = 
Ál£
;

124 
	`£ma_öô
 (&
c
->
com∂ëi⁄_waô
, 0);

127 
dev_no
 = 0; dev_no < 2; dev_no++)

129 
©a_disk
 *
d
 = &
c
->
devi˚s
[
dev_no
];

130 
d
->
ch™√l
 = 
c
;

131 
d
->
dev_no
 = dev_no;

132 
d
->
is_©a
 = 
Ál£
;

136 
	`ªg_h™dÀr
 (
c
->
úq
, ((*)(
öå_‰ame
 *))
öãºu±_h™dÀr
);

139 
	`ª£t_ch™√l
 (
c
);

142 i‡(
	`check_devi˚_ty≥
 (&
c
->
devi˚s
[0]))

143 
	`check_devi˚_ty≥
 (&
c
->
devi˚s
[1]);

146 
dev_no
 = 0; dev_no < 2; dev_no++)

147 i‡(
c
->
devi˚s
[
dev_no
].
is_©a
)

148 
	`idítify_©a_devi˚
 (&
c
->
devi˚s
[
dev_no
]);

150 
	}
}

153 *
des¸ambÀ_©a_°rög
 (*, 
size
);

158 
	$ª£t_ch™√l
 (
ch™√l
 *
c
)

160 
boﬁ
 
¥e£¡
[2];

161 
dev_no
;

165 
dev_no
 = 0; dev_no < 2; dev_no++)

167 
©a_disk
 *
d
 = &
c
->
devi˚s
[
dev_no
];

169 
	`£À˘_devi˚
 (
d
);

171 
	`outb
 (
	`ªg_n£˘
 (
c
), 0x55);

172 
	`outb
 (
	`ªg_lbÆ
 (
c
), 0xaa);

174 
	`outb
 (
	`ªg_n£˘
 (
c
), 0xaa);

175 
	`outb
 (
	`ªg_lbÆ
 (
c
), 0x55);

177 
	`outb
 (
	`ªg_n£˘
 (
c
), 0x55);

178 
	`outb
 (
	`ªg_lbÆ
 (
c
), 0xaa);

180 
¥e£¡
[
dev_no
] = (
	`öb
 (
	`ªg_n£˘
 (
c
)) == 0x55

181 && 
	`öb
 (
	`ªg_lbÆ
 (
c
)) == 0xaa);

186 
	`outb
 (
	`ªg_˘l
 (
c
), 0);

187 
	`outb
 (
	`ªg_˘l
 (
c
), 
CTL_SRST
);

188 
	`outb
 (
	`ªg_˘l
 (
c
), 0);

192 i‡(
¥e£¡
[0])

194 
	`£À˘_devi˚
 (&
c
->
devi˚s
[0]);

195 
	`waô_whûe_busy
 (&
c
->
devi˚s
[0]);

199 i‡(
¥e£¡
[1])

201 
i
;

203 
	`£À˘_devi˚
 (&
c
->
devi˚s
[1]);

204 
i
 = 0; i < 3000; i++)

206 i‡(
	`öb
 (
	`ªg_n£˘
 (
c
)Ë=1 && inb (
	`ªg_lbÆ
 (c)) == 1)

209 
	`waô_whûe_busy
 (&
c
->
devi˚s
[1]);

211 
	}
}

218 
boﬁ


219 
	$check_devi˚_ty≥
 (
©a_disk
 *
d
)

221 
ch™√l
 *
c
 = 
d
->channel;

222 
uöt8_t
 
îr‹
, 
lbam
, 
lbah
, 
°©us
;

224 
	`£À˘_devi˚
 (
d
);

226 
îr‹
 = 
	`öb
 (
	`ªg_îr‹
 (
c
));

227 
lbam
 = 
	`öb
 (
	`ªg_lbam
 (
c
));

228 
lbah
 = 
	`öb
 (
	`ªg_lbah
 (
c
));

229 
°©us
 = 
	`öb
 (
	`ªg_°©us
 (
c
));

231 i‡((
îr‹
 !1 && (îr‹ !0x81 || 
d
->
dev_no
 == 1))

232 || (
°©us
 & 
STA_DRDY
) == 0

233 || (
°©us
 & 
STA_BSY
) != 0)

235 
d
->
is_©a
 = 
Ál£
;

236  
îr‹
 != 0x81;

240 
d
->
is_©a
 = (
lbam
 =0 && 
lbah
 == 0) || (lbam == 0x3c &&Übah == 0xc3);

241  
åue
;

243 
	}
}

249 
	$idítify_©a_devi˚
 (
©a_disk
 *
d
)

251 
ch™√l
 *
c
 = 
d
->channel;

252 
id
[
BLOCK_SECTOR_SIZE
];

253 
block_£˘‹_t
 
ˇ∑côy
;

254 *
modñ
, *
£rül
;

255 
exåa_öfo
[128];

256 
block
 *block;

261 
	`£À˘_devi˚_waô
 (
d
);

262 
	`issue_pio_comm™d
 (
c
, 
CMD_IDENTIFY_DEVICE
);

263 i‡(!
	`waô_whûe_busy
 (
d
))

265 
d
->
is_©a
 = 
Ál£
;

268 
	`öput_£˘‹
 (
c
, 
id
);

272 
ˇ∑côy
 = *(
uöt32_t
 *Ë&
id
[60 * 2];

273 
modñ
 = 
	`des¸ambÀ_©a_°rög
 (&
id
[10 * 2], 20);

274 
£rül
 = 
	`des¸ambÀ_©a_°rög
 (&
id
[27 * 2], 40);

275 
	`¢¥ötf
 (
exåa_öfo
, Éxtra_info,

276 "modñ \"%s\", sîü»\"%s\"", 
modñ
, 
£rül
);

283 i‡(
ˇ∑côy
 >1024 * 1024 * 1024 / 
BLOCK_SECTOR_SIZE
)

285 
	`¥öt_hum™_ªadabÀ_size
 (
ˇ∑côy
 * 512);

286 
d
->
is_©a
 = 
Ál£
;

289 
	}
}

295 
	$des¸ambÀ_©a_°rög
 (*
°rög
, 
size
)

297 
i
;

300 
i
 = 0; i + 1 < 
size
; i += 2)

302 
tmp
 = 
°rög
[
i
];

303 
°rög
[
i
] = string[i + 1];

304 
°rög
[
i
 + 1] = 
tmp
;

308 
size
--; size > 0; size--)

310 
c
 = 
°rög
[
size
 - 1];

311 i‡(
c
 !'\0' && !
	`is•a˚
 (c))

314 
°rög
[
size
] = '\0';

316  
°rög
;

317 
	}
}

324 
	$ide_ªad
 (*
d_
, 
block_£˘‹_t
 
£c_no
, *
buf„r
)

326 
©a_disk
 *
d
 = 
d_
;

327 
ch™√l
 *
c
 = 
d
->channel;

328 
	`lock_acquúe
 (&
c
->
lock
);

329 
	`£À˘_£˘‹
 (
d
, 
£c_no
);

330 
	`issue_pio_comm™d
 (
c
, 
CMD_READ_SECTOR_RETRY
);

331 
	`£ma_down
 (&
c
->
com∂ëi⁄_waô
);

332 i‡(!
	`waô_whûe_busy
 (
d
))

334 
	`öput_£˘‹
 (
c
, 
buf„r
);

335 
	`lock_ªÀa£
 (&
c
->
lock
);

336 
	}
}

344 
	$ide_wrôe
 (*
d_
, 
block_£˘‹_t
 
£c_no
, c⁄° *
buf„r
)

346 
©a_disk
 *
d
 = 
d_
;

347 
ch™√l
 *
c
 = 
d
->channel;

348 
	`lock_acquúe
 (&
c
->
lock
);

349 
	`£À˘_£˘‹
 (
d
, 
£c_no
);

350 
	`issue_pio_comm™d
 (
c
, 
CMD_WRITE_SECTOR_RETRY
);

351 i‡(!
	`waô_whûe_busy
 (
d
))

353 
	`ouçut_£˘‹
 (
c
, 
buf„r
);

354 
	`£ma_down
 (&
c
->
com∂ëi⁄_waô
);

355 
	`lock_ªÀa£
 (&
c
->
lock
);

356 
	}
}

358 
block_›î©i⁄s
 
	gide_›î©i⁄s
 =

360 
ide_ªad
,

361 
ide_wrôe


368 
	$£À˘_£˘‹
 (
©a_disk
 *
d
, 
block_£˘‹_t
 
£c_no
)

370 
ch™√l
 *
c
 = 
d
->channel;

372 
	`£À˘_devi˚_waô
 (
d
);

373 
	`outb
 (
	`ªg_n£˘
 (
c
), 1);

374 
	`outb
 (
	`ªg_lbÆ
 (
c
), 
£c_no
);

375 
	`outb
 (
	`ªg_lbam
 (
c
), 
£c_no
 >> 8);

376 
	`outb
 (
	`ªg_lbah
 (
c
), (
£c_no
 >> 16));

377 
	`outb
 (
	`ªg_devi˚
 (
c
),

378 
DEV_MBS
 | 
DEV_LBA
 | (
d
->
dev_no
 =1 ? 
DEV_DEV
 : 0Ë| (
£c_no
 >> 24));

379 
	}
}

384 
	$issue_pio_comm™d
 (
ch™√l
 *
c
, 
uöt8_t
 
comm™d
)

388 
c
->
ex≥˘ög_öãºu±
 = 
åue
;

389 
	`outb
 (
	`ªg_comm™d
 (
c
), 
comm™d
);

390 
	}
}

395 
	$öput_£˘‹
 (
ch™√l
 *
c
, *
£˘‹
)

397 
	`ösw
 (
	`ªg_d©a
 (
c
), 
£˘‹
, 
BLOCK_SECTOR_SIZE
 / 2);

398 
	}
}

403 
	$ouçut_£˘‹
 (
ch™√l
 *
c
, c⁄° *
£˘‹
)

405 
	`outsw
 (
	`ªg_d©a
 (
c
), 
£˘‹
, 
BLOCK_SECTOR_SIZE
 / 2);

406 
	}
}

416 
	$waô_u¡û_idÀ
 (c⁄° 
©a_disk
 *
d
)

418 
i
;

420 
i
 = 0; i < 1000; i++)

422 i‡((
	`öb
 (
	`ªg_°©us
 (
d
->
ch™√l
)Ë& (
STA_BSY
 | 
STA_DRQ
)) == 0)

425 
	}
}

431 
boﬁ


432 
	$waô_whûe_busy
 (c⁄° 
©a_disk
 *
d
)

434 
ch™√l
 *
c
 = 
d
->channel;

435 
i
;

437 
i
 = 0; i < 3000; i++)

439 i‡(
i
 == 700);

440 i‡(!(
	`öb
 (
	`ªg_Æt_°©us
 (
c
)Ë& 
STA_BSY
))

442 i‡(
i
 >= 700);

443  (
	`öb
 (
	`ªg_Æt_°©us
 (
c
)Ë& 
STA_DRQ
) != 0;

446  
Ál£
;

447 
	}
}

451 
	$£À˘_devi˚
 (c⁄° 
©a_disk
 *
d
)

453 
ch™√l
 *
c
 = 
d
->channel;

454 
uöt8_t
 
dev
 = 
DEV_MBS
;

455 i‡(
d
->
dev_no
 == 1)

456 
dev
 |
DEV_DEV
;

457 
	`outb
 (
	`ªg_devi˚
 (
c
), 
dev
);

458 
	`öb
 (
	`ªg_Æt_°©us
 (
c
));

459 
	}
}

464 
	$£À˘_devi˚_waô
 (c⁄° 
©a_disk
 *
d
)

466 
	`waô_u¡û_idÀ
 (
d
);

467 
	`£À˘_devi˚
 (
d
);

468 
	`waô_u¡û_idÀ
 (
d
);

469 
	}
}

473 
	$öãºu±_h™dÀr
 (
öå_num
)

476 
ch™√l
 *
c
;

478 
c
 = 
ch™√ls
; c < ch™√l†+ 
CHANNEL_CNT
; c++)

479 i‡(
öå_num
 =
c
->
úq
)

481 i‡(
c
->
ex≥˘ög_öãºu±
)

483 
	`öb
 (
	`ªg_°©us
 (
c
));

484 
	`£ma_up
 (&
c
->
com∂ëi⁄_waô
);

490 
	}
}

	@device/kbd.c

1 
	~<devi˚/kbd.h
>

2 
	~<ty≥.h
>

3 
	~<devi˚/c⁄sﬁe.h
>

4 
	~<öãºu±.h
>

5 
	~<devi˚/io.h
>

6 
	~<ssulib.h
>

8 
Key_Sètus
 
	gKSèt
;

9 
	gkbd_buf
[
BUFSIZ
];

11 
	gbuf_hód
, 
	gbuf_èû
;

13 
BYTE
 
	gKbd_M≠
[4][
KBDMAPSIZE
] = {

48 
boﬁ
 
kbd_ªmove_ch¨
();

50 
	$öô_kbd
()

52 
KSèt
.
Shi·Fœg
 = 0;

53 
KSèt
.
C≠¶ockFœg
 = 0;

54 
KSèt
.
NumlockFLag
 = 0;

55 
KSèt
.
S¸ﬁŒockFœg
 = 0;

56 
KSèt
.
Exã¡edFœg
 = 0;

57 
KSèt
.
Pau£Fœg
 = 0;

59 
buf_hód
 = 0;

60 
buf_èû
 = 0;

62 
	`ªg_h™dÀr
(33, 
kbd_h™dÀr
);

63 
	}
}

65 
	$Upd©eKeySèt
(
BYTE
 
Sˇncode
)

67 if(
Sˇncode
 & 0x80)

69 if(
Sˇncode
 == 0xB6 || Scancode == 0xAA)

71 
KSèt
.
Shi·Fœg
 = 
FALSE
;

76 if(
Sˇncode
 =0x3A && 
KSèt
.
C≠¶ockFœg
)

78 
KSèt
.
C≠¶ockFœg
 = 
FALSE
;

80 if(
Sˇncode
 == 0x3A)

81 
KSèt
.
C≠¶ockFœg
 = 
TRUE
;

82 if(
Sˇncode
 == 0x36 || Scancode == 0x2A)

84 
KSèt
.
Shi·Fœg
 = 
TRUE
;

87 if(
Sˇncode
 == 0xE0)

89 
KSèt
.
Exã¡edFœg
 = 
TRUE
;

91 if(
KSèt
.
Exã¡edFœg
 =
TRUE
 && 
Sˇncode
 != 0xE0)

93 
KSèt
.
Exã¡edFœg
 = 
FALSE
;

95 
	}
}

97 
BOOL
 
	$C⁄vîtSˇncodeToASCII
(
BYTE
 
Sˇncode
, BYTE *
Asciicode
)

99 if(
KSèt
.
Pau£Fœg
 > 0)

101 
KSèt
.
Pau£Fœg
--;

102  
FALSE
;

105 if(
KSèt
.
Exã¡edFœg
 =
TRUE
)

107 if(
Sˇncode
 & 0x80)

108  
FALSE
;

109 *
Asciicode
 = 
Sˇncode
;

110  
TRUE
;

113 if(
Sˇncode
 == 0xE1)

115 *
Asciicode
 = 0x00;

116 
KSèt
.
Pau£Fœg
 = 2;

117  
FALSE
;

120 if(
Sˇncode
 == 0xE0)

122 *
Asciicode
 = 0x00;

123  
FALSE
;

126 if(!(
Sˇncode
 & 0x80))

128 if(
KSèt
.
Shi·Fœg
 & KSèt.
C≠¶ockFœg
)

130 *
Asciicode
 = 
Kbd_M≠
[3][
Sˇncode
 & 0x7F];

132 if(
KSèt
.
Shi·Fœg
)

134 *
Asciicode
 = 
Kbd_M≠
[2][
Sˇncode
 & 0x7F];

136 if(
KSèt
.
C≠¶ockFœg
)

138 *
Asciicode
 = 
Kbd_M≠
[1][
Sˇncode
 & 0x7F];

142 *
Asciicode
 = 
Kbd_M≠
[0][
Sˇncode
];

145  
TRUE
;

147  
FALSE
;

148 
	}
}

150 
boﬁ
 
	$isFuŒ
()

152  (
buf_hód
-1Ë% 
BUFSIZ
 =
buf_èû
;

153 
	}
}

155 
boﬁ
 
	$isEm±y
()

157  
buf_hód
 =
buf_èû
;

158 
	}
}

160 
	$kbd_h™dÀr
(
öå_‰ame
 *
i‰ame
)

162 
BYTE
 
asciicode
;

163 
BYTE
 
d©a
 = 
	`öb
(0x60);

165 if(
	`C⁄vîtSˇncodeToASCII
(
d©a
, &
asciicode
))

168 #ifde‡
SCREEN_SCROLL


169 if–
KSèt
.
Exã¡edFœg
 =
TRUE
)

171 
asciicode
)

182 
	`s¸ﬁl_s¸ìn
(-1);

185 
	`s¸ﬁl_s¸ìn
(+1);

188 
	`£t_ÁŒow
();

194 if–!
	`isFuŒ
(Ë&& 
asciicode
 != 0)

196 
kbd_buf
[
buf_èû
] = 
asciicode
;

197 
buf_èû
 = (buf_èû + 1Ë% 
BUFSIZ
;

203 
	`Upd©eKeySèt
(
d©a
);

204 
	}
}

206 
	$kbd_ªad_ch¨
()

208 if–
	`isEm±y
())

211 
ªt
;

212 
ªt
 = 
kbd_buf
[
buf_hód
];

213 
buf_hód
 = (buf_hód + 1)%
BUFSIZ
;

214  
ªt
;

215 
	}
}

	@device/partition.c

1 
	~<devi˚/∑πôi⁄.h
>

2 
	~<∑cked.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<°dio.h
>

6 
	~<devi˚/block.h
>

7 
	~<mem/mÆloc.h
>

11 
	s∑πôi⁄


13 
block
 *
	mblock
;

14 
block_£˘‹_t
 
	m°¨t
;

17 
block_›î©i⁄s
 
	g∑πôi⁄_›î©i⁄s
;

19 
ªad_∑πôi⁄_èbÀ
 (
block
 *, 
block_£˘‹_t
 
£˘‹
,

20 
block_£˘‹_t
 
¥im¨y_exãnded_£˘‹
,

21 *
∑π_ƒ
);

22 
found_∑πôi⁄
 (
block
 *, 
uöt8_t
 
ty≥
,

23 
block_£˘‹_t
 
°¨t
, block_£˘‹_à
size
,

24 
∑π_ƒ
);

25 c⁄° *
∑πôi⁄_ty≥_«me
 (
uöt8_t
);

29 
	$∑πôi⁄_sˇn
 (
block
 *block)

31 
∑π_ƒ
 = 0;

32 
	`ªad_∑πôi⁄_èbÀ
 (
block
, 0, 0, &
∑π_ƒ
);

33 i‡(
∑π_ƒ
 == 0)

34 
	`¥ötf
 ("%s: Devi˚ c⁄èö†nÿ∑πôi⁄s\n", 
	`block_«me
 (
block
));

35 
	}
}

51 
	$ªad_∑πôi⁄_èbÀ
 (
block
 *block, 
block_£˘‹_t
 
£˘‹
,

52 
block_£˘‹_t
 
¥im¨y_exãnded_£˘‹
,

53 *
∑π_ƒ
)

56 
	s∑πôi⁄_èbÀ_íåy


58 
uöt8_t
 
boŸabÀ
;

59 
uöt8_t
 
°¨t_chs
[3];

60 
uöt8_t
 
ty≥
;

61 
uöt8_t
 
íd_chs
[3];

62 
uöt32_t
 
off£t
;

63 
uöt32_t
 
size
;

65 
PACKED
;

68 
	s∑πôi⁄_èbÀ


70 
uöt8_t
 
lﬂdî
[446];

71 
∑πôi⁄_èbÀ_íåy
 
∑πôi⁄s
[4];

72 
uöt16_t
 
sig«tuª
;

74 
PACKED
;

76 
∑πôi⁄_èbÀ
 *
±
;

77 
size_t
 
i
;

80 i‡(
£˘‹
 >
	`block_size
 (
block
))

82 
	`¥ötf
 ("%s: P¨tôi⁄ÅabÀáà£˘‹ %"
PRDSNu
"ÖastÉnd of device.\n",

83 
	`block_«me
 (
block
), 
£˘‹
);

88 
	`ASSERT
 ( *
±
 =
BLOCK_SECTOR_SIZE
);

89 
±
 = 
	`mÆloc
 ( *pt);

90 i‡(
±
 =
NULL
)

92 
	`block_ªad
 (
block
, 0, 
±
);

95 i‡(
±
->
sig«tuª
 != 0xaa55)

97 i‡(
¥im¨y_exãnded_£˘‹
 == 0)

98 
	`¥ötf
 ("%s: InvÆidÖ¨tôi⁄ÅabÀ sig«tuª\n", 
	`block_«me
 (
block
));

100 
	`¥ötf
 ("%s: InvÆidÉxãndedÖ¨tôi⁄ÅabÀ i¿£˘‹ %"
PRDSNu
"\n",

101 
	`block_«me
 (
block
), 
£˘‹
);

102 
	`‰ì
 (
±
);

107 
i
 = 0; i <  
±
->
∑πôi⁄s
 /  *pt->partitions; i++)

109 
∑πôi⁄_èbÀ_íåy
 *
e
 = &
±
->
∑πôi⁄s
[
i
];

111 i‡(
e
->
size
 =0 ||É->
ty≥
 == 0)

115 i‡(
e
->
ty≥
 == 0x05

116 || 
e
->
ty≥
 == 0x0f

117 || 
e
->
ty≥
 == 0x85

118 || 
e
->
ty≥
 == 0xc5)

120 
	`¥ötf
 ("%s: ExãndedÖ¨tôi⁄ i¿£˘‹ %"
PRDSNu
"\n",

121 
	`block_«me
 (
block
), 
£˘‹
);

131 i‡(
£˘‹
 == 0)

132 
	`ªad_∑πôi⁄_èbÀ
 (
block
, 
e
->
off£t
,É->off£t, 
∑π_ƒ
);

134 
	`ªad_∑πôi⁄_èbÀ
 (
block
, 
e
->
off£t
 + 
¥im¨y_exãnded_£˘‹
,

135 
¥im¨y_exãnded_£˘‹
, 
∑π_ƒ
);

139 ++*
∑π_ƒ
;

141 
	`found_∑πôi⁄
 (
block
, 
e
->
ty≥
,É->
off£t
 + 
£˘‹
,

142 
e
->
size
, *
∑π_ƒ
);

146 
	`‰ì
 (
±
);

147 
	}
}

155 
	$found_∑πôi⁄
 (
block
 *block, 
uöt8_t
 
∑π_ty≥
,

156 
block_£˘‹_t
 
°¨t
, block_£˘‹_à
size
,

157 
∑π_ƒ
)

159 i‡(
°¨t
 >
	`block_size
 (
block
))

160 
	`¥ötf
 ("%s%d: P¨tôi⁄ sèπ†∑°Énd o‡devi˚ (£˘‹ %"
PRDSNu
")\n",

161 
	`block_«me
 (
block
), 
∑π_ƒ
, 
°¨t
);

162 i‡(
°¨t
 + 
size
 < sèπ || sèπ + sizê> 
	`block_size
 (
block
))

163 
	`¥ötf
 ("%s%d: P¨tôi⁄Énd (%"
PRDSNu
")ÖastÉnd of device (%"PRDSNu")\n",

164 
	`block_«me
 (
block
), 
∑π_ƒ
, 
°¨t
 + 
size
, 
	`block_size
 (block));

167 
block_ty≥
 
ty≥
 = (
∑π_ty≥
 =0x20 ? 
BLOCK_KERNEL


168 : 
∑π_ty≥
 =0x21 ? 
BLOCK_FILESYS


169 : 
∑π_ty≥
 =0x22 ? 
BLOCK_SCRATCH


170 : 
∑π_ty≥
 =0x23 ? 
BLOCK_SWAP


171 : 
BLOCK_FOREIGN
);

172 
∑πôi⁄
 *
p
;

173 
exåa_öfo
[128];

174 
«me
[16];

176 
p
 = 
	`mÆloc
 ( *p);

177 i‡(
p
 =
NULL
)

179 
p
->
block
 = block;

180 
p
->
°¨t
 = start;

182 
	`¢¥ötf
 (
«me
, Çame, "%s%d", 
	`block_«me
 (
block
), 
∑π_ƒ
);

183 
	`¢¥ötf
 (
exåa_öfo
, Éxtra_info, "%s (%02x)",

184 
	`∑πôi⁄_ty≥_«me
 (
∑π_ty≥
),Öart_type);

185 
	`block_ªgi°î
 (
«me
, 
ty≥
, 
exåa_öfo
, 
size
, &
∑πôi⁄_›î©i⁄s
, 
p
);

187 
	}
}

191 
	$∑πôi⁄_ty≥_«me
 (
uöt8_t
 
ty≥
)

197 c⁄° *
ty≥_«mes
[256] =

299  
ty≥_«mes
[
ty≥
] !
NULL
 ?Åype_names[type] : "Unknown";

300 
	}
}

305 
	$∑πôi⁄_ªad
 (*
p_
, 
block_£˘‹_t
 
£˘‹
, *
buf„r
)

307 
∑πôi⁄
 *
p
 = 
p_
;

308 
	`block_ªad
 (
p
->
block
,Ö->
°¨t
 + 
£˘‹
, 
buf„r
);

309 
	}
}

315 
	$∑πôi⁄_wrôe
 (*
p_
, 
block_£˘‹_t
 
£˘‹
, c⁄° *
buf„r
)

317 
∑πôi⁄
 *
p
 = 
p_
;

318 
	`block_wrôe
 (
p
->
block
,Ö->
°¨t
 + 
£˘‹
, 
buf„r
);

319 
	}
}

321 
block_›î©i⁄s
 
	g∑πôi⁄_›î©i⁄s
 =

323 
∑πôi⁄_ªad
,

324 
∑πôi⁄_wrôe


	@device/pit.c

2 
	~<devi˚/pô.h
>

3 
	~<devi˚/io.h
>

4 
	~<öãºu±.h
>

6 
	$öô_pô
()

8 
öå_Àvñ
 
ﬁd_Àvñ
 = 
	`öå_dißbÀ
();

9 
	`outb
(
PIT_COMMAND
, (
PIT_COUNTER0
 | 
PIT_RW_LMBYTE
 | 
PIT_MODE2
 | 
PIT_BINARY
) );

10 
	`outb
(
PIT_CHANNEL0
, (
PIT_HZ
/
PIT_FRQ_HZ
)%0xff);

11 
	`outb
(
PIT_CHANNEL0
, (
PIT_HZ
/
PIT_FRQ_HZ
)>>8);

12 
	`öå_£t_Àvñ
 (
ﬁd_Àvñ
);

13 
	}
}

	@include/bitmap.h

1 #i‚de‡
__BITMAP_H__


2 
	#__BITMAP_H__


	)

4 
	~<ty≥.h
>

10 
bôm≠
 *
bôm≠_¸óã_ö_buf
 (
size_t
 
bô_˙t
, *, size_à
byã_˙t
);

11 
size_t
 
bôm≠_buf_size
 (size_à
bô_˙t
);

12 
bôm≠_de°roy
 (
bôm≠
 *);

15 
size_t
 
bôm≠_size
 (c⁄° 
bôm≠
 *);

18 
bôm≠_£t
 (
bôm≠
 *, 
size_t
 
idx
, 
boﬁ
);

19 
bôm≠_m¨k
 (
bôm≠
 *, 
size_t
 
idx
);

20 
bôm≠_ª£t
 (
bôm≠
 *, 
size_t
 
idx
);

21 
bôm≠_Êù
 (
bôm≠
 *, 
size_t
 
idx
);

22 
boﬁ
 
bôm≠_ã°
 (c⁄° 
bôm≠
 *, 
size_t
 
idx
);

25 
bôm≠_£t_Æl
 (
bôm≠
 *, 
boﬁ
);

26 
bôm≠_£t_mu…ùÀ
 (
bôm≠
 *, 
size_t
 
°¨t
, size_à
˙t
, 
boﬁ
);

27 
size_t
 
bôm≠_cou¡
 (c⁄° 
bôm≠
 *, size_à
°¨t
, size_à
˙t
, 
boﬁ
);

28 
boﬁ
 
bôm≠_c⁄èös
 (c⁄° 
bôm≠
 *, 
size_t
 
°¨t
, size_à
˙t
, bool);

29 
boﬁ
 
bôm≠_™y
 (c⁄° 
bôm≠
 *, 
size_t
 
°¨t
, size_à
˙t
);

30 
boﬁ
 
bôm≠_n⁄e
 (c⁄° 
bôm≠
 *, 
size_t
 
°¨t
, size_à
˙t
);

31 
boﬁ
 
bôm≠_Æl
 (c⁄° 
bôm≠
 *, 
size_t
 
°¨t
, size_à
˙t
);

34 
	#BITMAP_ERROR
 
SIZE_MAX


	)

35 
size_t
 
bôm≠_sˇn
 (c⁄° 
bôm≠
 *, size_à
°¨t
, size_à
˙t
, 
boﬁ
);

36 
size_t
 
bôm≠_sˇn_™d_Êù
 (
bôm≠
 *, size_à
°¨t
, size_à
˙t
, 
boﬁ
);

40 #ifde‡
FILESYS


41 
	gfûe
;

42 
size_t
 
bôm≠_fûe_size
 (c⁄° 
bôm≠
 *);

43 
boﬁ
 
bôm≠_ªad
 (
bôm≠
 *, 
fûe
 *);

44 
boﬁ
 
bôm≠_wrôe
 (c⁄° 
bôm≠
 *, 
fûe
 *);

48 
bôm≠_dump
 (c⁄° 
bôm≠
 *);

	@include/ctype.h

1 #i‚de‡
__LIB_CTYPE_H


2 
	#__LIB_CTYPE_H


	)

4 
ölöe
 
	$i¶owî
 (
c
Ë{  c >'a' && c <'z'; 
	}
}

5 
ölöe
 
	$isuµî
 (
c
Ë{  c >'A' && c <'Z'; 
	}
}

6 
ölöe
 
	$ißÕha
 (
c
Ë{  
	`i¶owî
 (cË|| 
	`isuµî
 (c); 
	}
}

7 
ölöe
 
	$isdigô
 (
c
Ë{  c >'0' && c <'9'; 
	}
}

8 
ölöe
 
	$iß um
 (
c
Ë{  
	`ißÕha
 (cË|| 
	`isdigô
 (c); 
	}
}

9 
ölöe
 
	$isxdigô
 (
c
) {

10  
	`isdigô
 (
c
) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');

11 
	}
}

12 
ölöe
 
	$is•a˚
 (
c
) {

13  (
c
 == ' ' || c == '\f' || c == '\n'

14 || 
c
 == '\r' || c == '\t' || c == '\v');

15 
	}
}

16 
ölöe
 
	$isbœnk
 (
c
Ë{  c =' ' || c ='\t'; 
	}
}

17 
ölöe
 
	$isgøph
 (
c
Ë{  c > 32 && c < 127; 
	}
}

18 
ölöe
 
	$i•röt
 (
c
Ë{  c >32 && c < 127; 
	}
}

19 
ölöe
 
	$is˙ål
 (
c
Ë{  (¯>0 && c < 32Ë|| c =127; 
	}
}

20 
ölöe
 
	$ißscii
 (
c
Ë{  c >0 && c < 128; 
	}
}

21 
ölöe
 
	$i•un˘
 (
c
) {

22  
	`i•röt
 (
c
Ë&& !
	`iß um
 (cË&& !
	`is•a˚
 (c);

23 
	}
}

25 
ölöe
 
	$tﬁowî
 (
c
Ë{  
	`isuµî
 (cË? c - 'A' + 'a' : c; 
	}
}

26 
ölöe
 
	$touµî
 (
c
Ë{  
	`i¶owî
 (cË? c - 'a' + 'A' : c; 
	}
}

	@include/debug.h

1 #i‚de‡
__LIB_DEBUG_H


2 
	#__LIB_DEBUG_H


	)

7 
	#UNUSED
 
	`__©åibuã__
 ((
unu£d
))

	)

8 
	#NO_RETURN
 
	`__©åibuã__
 ((
n‹ëu∫
))

	)

9 
	#NO_INLINE
 
	`__©åibuã__
 ((
noölöe
))

	)

10 
	#PRINTF_FORMAT
(
FMT
, 
FIRST
Ë
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, FMT, FIRST)))

	)

14 
	#PANIC
(...Ë
	`debug_∑nic
 (
__FILE__
, 
__LINE__
, 
__func__
, 
__VA_ARGS__
)

	)

16 
	$debug_∑nic
 (c⁄° *
fûe
, 
löe
, c⁄° *
fun˘i⁄
,

17 c⁄° *
mesßge
, ...Ë
	$PRINTF_FORMAT
 (4, 5Ë
NO_RETURN
;

18 
	`debug_backåa˚
 ();

19 
	`debug_backåa˚_Æl
 ();

27 #unde‡
ASSERT


28 #unde‡
NOT_REACHED


30 #i‚de‡
NDEBUG


31 
	#ASSERT
(
CONDITION
) \

32 i‡(
CONDITION
Ë{ 
	}
} { \

33 
	`PANIC
 ("assertion `%s' failed.", #CONDITION); \

34 }

	)

35 
	#NOT_REACHED
(Ë
	`PANIC
 ("execuãdá¿uƒóchabÀ sèãmít");

	)

37 
	#ASSERT
(
CONDITION
Ë((Ë0)

	)

38 
	#NOT_REACHED
(Ë;;)

	)

	@include/device/block.h

1 #i‚de‡
DEVICES_BLOCK_H


2 
	#DEVICES_BLOCK_H


	)

4 
	~<°ddef.h
>

5 
	~<öây≥s.h
>

11 
	#BLOCK_SECTOR_SIZE
 512

	)

15 
uöt32_t
 
	tblock_£˘‹_t
;

19 
	#PRDSNu
 
PRIu32


	)

23 
	gblock
;

26 
	eblock_ty≥


29 
	mBLOCK_KERNEL
,

30 
	mBLOCK_FILESYS
,

31 
	mBLOCK_SCRATCH
,

32 
	mBLOCK_SWAP
,

33 
	mBLOCK_ROLE_CNT
,

37 
	mBLOCK_RAW
 = 
BLOCK_ROLE_CNT
,

38 
	mBLOCK_FOREIGN
,

39 
	mBLOCK_CNT


42 c⁄° *
block_ty≥_«me
 (
block_ty≥
);

45 
block
 *
block_gë_rﬁe
 (
block_ty≥
);

46 
block_£t_rﬁe
 (
block_ty≥
, 
block
 *);

47 
block
 *
block_gë_by_«me
 (c⁄° *
«me
);

49 
block
 *
block_fú°
 ();

50 
block
 *
block_√xt
 (block *);

53 
block_£˘‹_t
 
block_size
 (
block
 *);

54 
block_ªad
 (
block
 *, 
block_£˘‹_t
, *);

55 
block_wrôe
 (
block
 *, 
block_£˘‹_t
, const *);

56 c⁄° *
block_«me
 (
block
 *);

57 
block_ty≥
 block_ty≥ (
block
 *);

60 
block_¥öt_°©s
 ();

64 
	sblock_›î©i⁄s


66 (*
	mªad
Ë(*
	maux
, 
	mblock_£˘‹_t
, *
	mbuf„r
);

67 (*
	mwrôe
Ë(*
	maux
, 
	mblock_£˘‹_t
, c⁄° *
	mbuf„r
);

70 
block
 *
block_ªgi°î
 (c⁄° *
«me
, 
block_ty≥
,

71 c⁄° *
exåa_öfo
, 
block_£˘‹_t
 
size
,

72 c⁄° 
block_›î©i⁄s
 *, *
aux
);

	@include/device/console.h

1 #i‚de‡
__CONSOLE_H__


2 
	#__CONSOLE_H__


	)

4 #¥agm®
∑ck
(
push
, 1)

6 
	skChSåu˘


8 
	mbCh
;

9 
	mbAâ
;

10 } 
	tCHAR
;

12 
	gGlob_x
;

13 
	gGlob_y
;

15 #¥agm®
∑ck
(
p›
)

17 
	#SCREEN_SCROLL


	)

18 
	#SERIAL_STDOUT


	)

20 
öô_c⁄sﬁe
();

22 
PrötCh¨ToS¸ìn
(
x
, 
y
, c⁄° *
pSåög
);

23 
PrötCh¨
(
x
, 
y
, c⁄° 
Såög
);

25 
˛rS¸ìn
();

26 
s¸ﬁl
();

27 
¥ötk
(c⁄° *
fmt
, ...);

29 #ifde‡
SCREEN_SCROLL


30 
ª‰eshS¸ìn
();

31 
s¸ﬁl_s¸ìn
(
off£t
);

32 
£t_ÁŒow
();

33 
£t_curs‹
();

	@include/device/device.h

1 #i‚def 
__DEVICE_H__


2 
	#__DEVICE_H__


	)

4 
dev_shutdown
();

	@include/device/ide.h

	@include/device/io.h

1 #i‚def 
__IO_H__


2 
	#__IO_H__


	)

4 
	~<°ddef.h
>

5 
	~<°döt.h
>

7 
outb
(
p‹t
, 
d©a
);

8 
öb
(
p‹t
);

9 
oué
(
p‹t
, 
d©a
);

10 
öl
(
p‹t
);

11 
iowaô
();

13 
ªad_¸0
();

14 
wrôe_¸0
(
d©a
);

15 
ªad_¸3
();

16 
wrôe_¸3
(
d©a
);

17 
ªad_¸4
();

18 
wrôe_¸4
(
d©a
);

20 
dev_shutdown
();

24 
ölöe
 

25 
	$ösw
 (
uöt16_t
 
p‹t
, *
addr
, 
size_t
 
˙t
)

28 
asm
 vﬁ©ûê("ª∞ösw" : "+D" (
addr
), "+c" (
˙t
Ë: "d" (
p‹t
) : "memory");

29 
	}
}

33 
ölöe
 

34 
	$outsw
 (
uöt16_t
 
p‹t
, c⁄° *
addr
, 
size_t
 
˙t
)

37 
asm
 vﬁ©ûê("ª∞outsw" : "+S" (
addr
), "+c" (
˙t
Ë: "d" (
p‹t
));

38 
	}
}

	@include/device/kbd.h

1 #i‚de‡
__KDB_H__


2 
	#__KDB_H__


	)

4 
	~<ty≥.h
>

5 
	~<öãºu±.h
>

7 
	#KBDMAPSIZE
 86

	)

9 
	#KEY_ESC
 0x1B

	)

10 
	#KEY_RSHIFT
 0x02

	)

11 
	#KEY_PRTSCN
 0x03

	)

12 
	#KEY_LALT
 0x04

	)

13 
	#KEY_SPACE
 0x05

	)

14 
	#KEY_CAPS
 0x06

	)

15 
	#KEY_F1
 0X07

	)

16 
	#KEY_F2
 0x08

	)

17 
	#KEY_F3
 0x09

	)

18 
	#KEY_F4
 0x0A

	)

19 
	#KEY_F5
 0x0B

	)

20 
	#KEY_F6
 0x0C

	)

21 
	#KEY_F7
 0x0D

	)

22 
	#KEY_F8
 0x0E

	)

23 
	#KEY_F9
 0x0F

	)

24 
	#KEY_F10
 0x10

	)

25 
	#KEY_F11
 0x11

	)

26 
	#KEY_F12
 0x12

	)

27 
	#KEY_BSPACE
 0x13

	)

28 
	#KEY_TAB
 0x14

	)

30 
	sKey_Sètus_Såu˘
 {

31 
BOOL
 
	mShi·Fœg
;

32 
BOOL
 
	mC≠¶ockFœg
;

33 
BOOL
 
	mNumlockFLag
;

34 
BOOL
 
	mS¸ﬁŒockFœg
;

36 
BOOL
 
	mExã¡edFœg
;

37 
	mPau£Fœg
;

38 } 
	tKey_Sètus
;

40 
Upd©eKeySèt
(
BYTE
);

41 
BOOL
 
C⁄vîtSˇncodeToASCII
(
BYTE
, BYTE *);

42 
öô_kbd
();

43 
kbd_h™dÀr
(
öå_‰ame
 *
i‰ame
);

45 
kbd_ªad_ch¨
();

	@include/device/partition.h

1 #i‚de‡
DEVICES_PARTITION_H


2 
	#DEVICES_PARTITION_H


	)

4 
	gblock
;

6 
∑πôi⁄_sˇn
 (
block
 *);

	@include/device/pit.h

1 #i‚def 
__PIT_H__


2 
	#__PIT_H__


	)

4 
	#PIT_CHANNEL0
 0x40

	)

5 
	#PIT_CHANNEL1
 0x41

	)

6 
	#PIT_CHANNEL2
 0x42

	)

7 
	#PIT_COMMAND
 0x43

	)

9 
	#PIT_COUNTER0
 0x00

	)

10 
	#PIT_COUNTER1
 0x40

	)

11 
	#PIT_COUNTER2
 0x80

	)

12 
	#PIT_READBACK
 0xA0

	)

14 
	#PIT_RW_COUNTER_LATCH
 0x00

	)

15 
	#PIT_RW_LBYTE
 0x10

	)

16 
	#PIT_RW_MBYTE
 0x20

	)

17 
	#PIT_RW_LMBYTE
 0x30

	)

19 
	#PIT_MODE0
 
Ox00


	)

20 
	#PIT_MODE1
 0x02

	)

21 
	#PIT_MODE2
 0x04

	)

22 
	#PIT_MODE3
 0x06

	)

23 
	#PIT_MODE4
 0x08

	)

24 
	#PIT_MODE5
 0x0A

	)

26 
	#PIT_BINARY
 0x00

	)

27 
	#PIT_BCD
 0x01

	)

29 
	#PIT_HZ
 1193181

	)

30 
	#PIT_FRQ_HZ
 1000

	)

32 
öô_pô
();

	@include/do_syscall.h

1 #i‚def 
__DO_SYSCALL_H__


2 
	#__DO_SYSCALL_H__


	)

4 
pid_t
 
do_f‹k
(
¥oc_func
 
func
, * 
aux
);

5 
do_exô
(
°©us
);

6 
pid_t
 
do_waô
(*
°©us
);

7 
do_ssuªad
(
ty≥
, * 
buf
, 
Àn
);

8 
do_shutdown
();

	@include/interrupt.h

1 #i‚de‡
__INTERRUPT_H__


2 
	#__INTERRUPT_H__


	)

4 
	#HLT
(Ë
__asm__
 
	`__vﬁ©ûe
("h…");

	)

6 
	~<ty≥.h
>

9 
	eöå_Àvñ


11 
	mINTR_OFF
,

12 
	mINTR_ON


15 
öå_Àvñ
 
öå_gë_Àvñ
 ();

16 
öå_Àvñ
 
öå_£t_Àvñ
 (intr_level);

17 
öå_Àvñ
 
öå_íabÀ
 ();

18 
öå_Àvñ
 
öå_dißbÀ
 ();

20 #¥agm®
∑ck
(
push
, 1)

23 
	söå_‰ame


27 
uöt32_t
 
	medi
;

28 
uöt32_t
 
	mesi
;

29 
uöt32_t
 
	mebp
;

30 
uöt32_t
 
	me•_dummy
;

31 
uöt32_t
 
	mebx
;

32 
uöt32_t
 
	medx
;

33 
uöt32_t
 
	mecx
;

34 
uöt32_t
 
	móx
;

35 
uöt16_t
 
	mgs
, :16;

36 
uöt16_t
 
	mfs
, :16;

37 
uöt16_t
 
	mes
, :16;

38 
uöt16_t
 
	mds
, :16;

41 
uöt32_t
 
	mvec_no
;

46 
uöt32_t
 
	mîr‹_code
;

50 *
	m‰ame_poöãr
;

54 (*
	meù
) ();

55 
uöt16_t
 
	mcs
, :16;

56 
uöt32_t
 
	meÊags
;

57 *
	me•
;

58 
uöt16_t
 
	mss
, :16;

61 #¥agm®
∑ck
(
p›
)

63 
	töå_h™dÀr_func
 (
	töå_‰ame
 *);

64 
boﬁ
 
öå_c⁄ãxt
 ();

65 
do_sched_⁄_ªtu∫
();

67 
öô_öå
();

68 
ªg_h™dÀr
(
idx
, 
öå_h™dÀr_func
 *
h™dÀr
);

69 
gë_ticks
();

71 #i‚de‡
__ASSEMBLER__


	@include/intr-stubs.h

1 #i‚de‡
_INTR_STUBS_H_


2 
	#_INTR_STUBS_H_


	)

4 
	#INTR_MAX
 256

	)

15 
	töå_°ub_func
 ();

16 
öå_°ub_func
 *
öå_°ubs
[
INTR_MAX
];

19 
öå_exô
 ();

	@include/inttypes.h

1 #i‚de‡
__LIB_INTTYPES_H


2 
	#__LIB_INTTYPES_H


	)

4 
	~<°döt.h
>

6 
	#PRId8
 "hhd"

	)

7 
	#PRIi8
 "hhi"

	)

8 
	#PRIo8
 "hho"

	)

9 
	#PRIu8
 "hhu"

	)

10 
	#PRIx8
 "hhx"

	)

11 
	#PRIX8
 "hhX"

	)

13 
	#PRId16
 "hd"

	)

14 
	#PRIi16
 "hi"

	)

15 
	#PRIo16
 "ho"

	)

16 
	#PRIu16
 "hu"

	)

17 
	#PRIx16
 "hx"

	)

18 
	#PRIX16
 "hX"

	)

20 
	#PRId32
 "d"

	)

21 
	#PRIi32
 "i"

	)

22 
	#PRIo32
 "o"

	)

23 
	#PRIu32
 "u"

	)

24 
	#PRIx32
 "x"

	)

25 
	#PRIX32
 "X"

	)

27 
	#PRId64
 "Œd"

	)

28 
	#PRIi64
 "Œi"

	)

29 
	#PRIo64
 "Œo"

	)

30 
	#PRIu64
 "Œu"

	)

31 
	#PRIx64
 "Œx"

	)

32 
	#PRIX64
 "ŒX"

	)

34 
	#PRIdMAX
 "jd"

	)

35 
	#PRIiMAX
 "ji"

	)

36 
	#PRIoMAX
 "jo"

	)

37 
	#PRIuMAX
 "ju"

	)

38 
	#PRIxMAX
 "jx"

	)

39 
	#PRIXMAX
 "jX"

	)

41 
	#PRIdPTR
 "td"

	)

42 
	#PRIiPTR
 "ti"

	)

43 
	#PRIoPTR
 "to"

	)

44 
	#PRIuPTR
 "tu"

	)

45 
	#PRIxPTR
 "tx"

	)

46 
	#PRIXPTR
 "tX"

	)

	@include/limits.h

1 #i‚de‡
__LIMITS_H__


2 
	#__LIMITS_H__


	)

4 
	#CHAR_BIT
 8

	)

6 
	#SCHAR_MAX
 127

	)

7 
	#SCHAR_MIN
 (-
SCHAR_MAX
 - 1)

	)

8 
	#UCHAR_MAX
 255

	)

10 #ifde‡
__CHAR_UNSIGNED__


11 
	#CHAR_MIN
 0

	)

12 
	#CHAR_MAX
 
UCHAR_MAX


	)

14 
	#CHAR_MIN
 
SCHAR_MIN


	)

15 
	#CHAR_MAX
 
SCHAR_MAX


	)

18 
	#SHRT_MAX
 32767

	)

19 
	#SHRT_MIN
 (-
SHRT_MAX
 - 1)

	)

20 
	#USHRT_MAX
 65535

	)

22 
	#INT_MAX
 2147483647

	)

23 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

24 
	#UINT_MAX
 4294967295U

	)

26 
	#LONG_MAX
 2147483647L

	)

27 
	#LONG_MIN
 (-
LONG_MAX
 - 1)

	)

28 
	#ULONG_MAX
 4294967295UL

	)

30 
	#LLONG_MAX
 9223372036854775807LL

	)

31 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1)

	)

32 
	#ULLONG_MAX
 18446744073709551615ULL

	)

	@include/list.h

1 #i‚de‡
__LIST_H__


2 
	#__LIST_H__


	)

85 
	~<ssulib.h
>

86 
	~<ty≥.h
>

89 
	sli°_ñem


91 
li°_ñem
 *
	m¥ev
;

92 
li°_ñem
 *
	m√xt
;

96 
	sli°


98 
li°_ñem
 
	mhód
;

99 
li°_ñem
 
	mèû
;

107 
	#li°_íåy
(
LIST_ELEM
, 
STRUCT
, 
MEMBER
) \

108 ((
STRUCT
 *Ë((
uöt8_t
 *Ë&(
LIST_ELEM
)->
√xt
 \

109 - 
	`off£tof
 (
STRUCT
, 
MEMBER
.
√xt
)))

	)

121 
	#LIST_INITIALIZER
(
NAME
Ë{ { 
NULL
, &(NAME).
èû
 }, \

122 { &(
NAME
).
hód
, 
NULL
 } }

	)

124 
li°_öô
 (
li°
 *);

127 
li°_ñem
 *
li°_begö
 (
li°
 *);

128 
li°_ñem
 *
li°_√xt
 (list_elem *);

129 
li°_ñem
 *
li°_íd
 (
li°
 *);

131 
li°_ñem
 *
li°_rbegö
 (
li°
 *);

132 
li°_ñem
 *
li°_¥ev
 (list_elem *);

133 
li°_ñem
 *
li°_ªnd
 (
li°
 *);

135 
li°_ñem
 *
li°_hód
 (
li°
 *);

136 
li°_ñem
 *
li°_èû
 (
li°
 *);

139 
li°_ö£π
 (
li°_ñem
 *, list_elem *);

140 
li°_•li˚
 (
li°_ñem
 *
bef‹e
,

141 
li°_ñem
 *
fú°
, li°_ñem *
œ°
);

142 
li°_push_‰⁄t
 (
li°
 *, 
li°_ñem
 *);

143 
li°_push_back
 (
li°
 *, 
li°_ñem
 *);

146 
li°_ñem
 *
li°_ªmove
 (list_elem *);

147 
li°_ñem
 *
li°_p›_‰⁄t
 (
li°
 *);

148 
li°_ñem
 *
li°_p›_back
 (
li°
 *);

151 
li°_ñem
 *
li°_‰⁄t
 (
li°
 *);

152 
li°_ñem
 *
li°_back
 (
li°
 *);

155 
size_t
 
li°_size
 (
li°
 *);

156 
boﬁ
 
li°_em±y
 (
li°
 *);

159 
li°_ªvî£
 (
li°
 *);

164 
boﬁ
 
	tli°_Àss_func
 (c⁄° 
	tli°_ñem
 *
	ta
,

165 c⁄° 
	tli°_ñem
 *
	tb
,

166 *
	taux
);

169 
li°_s‹t
 (
li°
 *,

170 
li°_Àss_func
 *, *
aux
);

171 
li°_ö£π_‹dîed
 (
li°
 *, 
li°_ñem
 *,

172 
li°_Àss_func
 *, *
aux
);

173 
li°_unique
 (
li°
 *, li° *
du∂iˇãs
,

174 
li°_Àss_func
 *, *
aux
);

177 
li°_ñem
 *
li°_max
 (
li°
 *, 
li°_Àss_func
 *, *
aux
);

178 
li°_ñem
 *
li°_mö
 (
li°
 *, 
li°_Àss_func
 *, *
aux
);

	@include/loader.h

1 #i‚de‡
THREADS_LOADER_H


2 
	#THREADS_LOADER_H


	)

5 
	#LOADER_BASE
 0x7c00

	)

6 
	#LOADER_END
 0x7e00

	)

9 
	#LOADER_KERN_BASE
 0x20000

	)

13 
	#LOADER_PHYS_BASE
 0xc0000000

	)

16 
	#LOADER_SIG
 (
LOADER_END
 - 
LOADER_SIG_LEN
Ë

	)

17 
	#LOADER_PARTS
 (
LOADER_SIG
 - 
LOADER_PARTS_LEN
Ë

	)

18 
	#LOADER_ARGS
 (
LOADER_PARTS
 - 
LOADER_ARGS_LEN
Ë

	)

19 
	#LOADER_ARG_CNT
 (
LOADER_ARGS
 - 
LOADER_ARG_CNT_LEN
Ë

	)

22 
	#LOADER_SIG_LEN
 2

	)

23 
	#LOADER_PARTS_LEN
 64

	)

24 
	#LOADER_ARGS_LEN
 128

	)

25 
	#LOADER_ARG_CNT_LEN
 4

	)

29 
	#SEL_NULL
 0x00

	)

30 
	#SEL_KCSEG
 0x08

	)

31 
	#SEL_KDSEG
 0x10

	)

33 #i‚de‡
__ASSEMBLER__


34 
	~<°döt.h
>

37 
uöt32_t
 
öô_øm_∑ges
;

	@include/mem/malloc.h

1 #i‚def 
__MALLOC_H__


2 
	#__MALLOC_H__


	)

5 * 
mÆloc
(
size
);

6 
‰ì
(* 
buf
);

	@include/mem/mm.h

1 #i‚def 
__MEM_H__


2 
	#__MEM_H__


	)

4 
mem_size
();

5 
dëe˘_mem
();

6 * 
mem£t
(* 
d°_
, 
vÆue
, 
size
);

	@include/mem/paging.h

1 #i‚de‡
__PAGING_H__


2 
	#__PAGING_H__


	)

4 
	~<ty≥.h
>

5 
	~<¥oc/¥oc.h
>

7 
	#CR0_FLAG_PG
 0x80000000

8 
	#CR0_FLAG_PE
 0x00000001

9 

	)

10 
	#PAGE_FLAG_PRESENT
 0x01

11 
	#PAGE_FLAG_RW
 0x02

12 
	#PAGE_FLAG_USER
 0x04

13 
	#PAGE_FLAG_WRITE
 0x08

14 
	#PAGE_FLAG_CACHE
 0x10

15 
	#PAGE_FLAG_ACCESS
 0x20

16 
	#PAGE_FLAG_AVAIL
 0x40

17 
	#PAGE_FLAG_DIRTY
 0x40

18 
	#PAGE_FLAG_SIZE
 0x80

19 
	#PAGE_FLAG_PTA
 0x80

20 
	#PAGE_FLAG_GLOB
 0x100

21 
	#PAGE_ADDR_AVAIL
 0x200

22 
	#PAGE_ADDR_BASE
 0x1000

23 

	)

24 
	#PAGE_MASK_BASE
 0xFFFFF000

25 
	#PAGE_MASK_PDE
 0xFFC00000

26 
	#PAGE_MASK_PTE
 0x003FF000

27 
	#PAGE_OFFSET_PDE
 22

28 
	#PAGE_OFFSET_PTE
 12

29 

	)

30 
	#PAGE_SIZE
 4096

31 
	#PAGE_TBL_SIZE
 4096

32 
	#PAGE_DIR_SIZE
 4096

33 

	)

34 
	#KERNEL_ADDR
 0x00100000

35 
	#RKERNEL_HEAP_START
 0x00200000

36 

	)

37 
	#VKERNEL_HEAP_START
 0xC0000000

38 
	#VKERNEL_STACK_ADDR
 0x40002000

39 

	)

40 
	#VH_TO_RH
(
addr
Ë(
uöt32_t
 *)(
VKERNEL_HEAP_START
 - ((uöt32_tÔdd∏+ 
PAGE_SIZE
Ë+ 
RKERNEL_HEAP_START
)

	)

41 
	#RH_TO_VH
(
addr
Ë(
uöt32_t
 *)(
VKERNEL_HEAP_START
 - ((uöt32_tÔdd∏- 
RKERNEL_HEAP_START
)- 
PAGE_SIZE
)

	)

43 
ölöe
 
uöt32_t
 
	$pg_no
(c⁄° 
uöt32_t
 *
∑ge
){

44  (
uöt32_t
)
∑ge
 >> 
PAGE_OFFSET_PTE
;

45 
	}
}

47 
öô_∑gög
();

48 
uöt32_t
* 
pd_¸óã
 (
pid_t
 
pid
);

49 
chûd_°ack_ª£t
(
pid_t
 
pid
);

50 
uöt32_t
 
pde_idx_addr
(uöt32_t* 
addr
);

51 
uöt32_t
 
±e_idx_addr
(uöt32_t* 
addr
);

52 
pd_c›y
(
uöt32_t
* 
‰om
, uöt32_t* 
to
);

53 
uöt32_t
* 
±_pde
(uöt32_à
pde
);

	@include/mem/palloc.h

1 #i‚de‡
__PALLOC_H__


2 
	#__PALLOC_H__


	)

4 
	~<ssulib.h
>

6 
	#FREE__
 0x001

	)

7 
	#HEAP__
 0x010

	)

8 
	#STACK__
 0x020

	)

10 
	#PAGE_POOL_SIZE
 1024

	)

12 
öô_∑Œoc
 ();

13 
uöt32_t
 *
∑Œoc_gë_∑ge
 (uint32_t);

14 
uöt32_t
 *
∑Œoc_gë_mu…ùÀ
 (uöt32_t, 
size_t
 );

15 
∑Œoc_‰ì_∑ge
 (*);

16 
∑Œoc_‰ì_mu…ùÀ
 (*, 
size_t
 
∑ge_˙t
);

17 
∑Œoc_pf_ã°
();

18 
uöt32_t
 *
va_to_ø
(uöt32_à*
va
);

19 
uöt32_t
 *
ø_to_va
(uöt32_à*
ø
);

	@include/packed.h

1 #i‚de‡
__LIB_PACKED_H


2 
	#__LIB_PACKED_H


	)

8 
	#PACKED
 
	`__©åibuã__
 ((
∑cked
))

	)

	@include/proc/proc.h

1 #i‚def 
__PROC_H__


2 
	#__PROC_H__


	)

4 
	~<li°.h
>

6 
	tpid_t
;

8 
	ep_°©e
 {

9 
	mPROC_UNUSED
,

10 
	mPROC_RUN
,

11 
	mPROC_STOP
,

12 
	mPROC_ZOMBIE
,

13 
	mPROC_BLOCK
,

16 #¥agm®
∑ck
(
push
, 1)

18 
	s¥oc_›ti⁄


20 
	m¥i‹ôy
;

23 
	s¥o˚ss


25 
pid_t
 
	mpid
;

26 *
	m°ack
;

27 *
	mpd
;

28 
p_°©e
 
	m°©e
;

29 
	mtime_¶ìp
;

31 
	m¥i‹ôy
;

32 
	mtime_¶i˚
;

34 
li°_ñem
 
	mñem_Æl
;

35 
li°_ñem
 
	mñem_°©
;

37 
	mtime_u£d
;

38 
	mtime_sched
;

39 
¥o˚ss
* 
	m∑ª¡
;

40 
	msim∂e_lock
;

41 
	mchûd_pid
;

42 
	mexô_°©us
;

45 #¥agm®
∑ck
(
p›
)

47 
¥o˚ss
 *
cur_¥o˚ss
;

49 
	t¥oc_func
(* 
	taux
);

50 
¥oc_func
 
	g¥öt_pid
;

51 
¥oc_func
 
	gidÀ
;

53 
scheduÀ
();

55 
öô_¥oc
();

56 
¥oc_‰ì
();

58 
pid_t
 
¥oc_¸óã
(
¥oc_func
 
func
, 
¥oc_›ti⁄
 *
¥i‹ôy
, * 
aux
);

59 
¥oc_wake
();

60 
¥oc_¶ìp
(
ticks
);

61 
¥oc_block
();

62 
¥oc_unblock
(
¥o˚ss
* 
¥oc
);

64 
¥oc_¥öt_d©a
();

	@include/proc/sched.h

1 #i‚def 
__SCHED_H__


2 
	#__SCHED_H__


	)

4 
	~<li°.h
>

5 
	~<¥oc/¥oc.h
>

7 
scheduÀ
();

	@include/proc/switch.h

1 #i‚de‡
_SWITCH_H_


2 
	#_SWITCH_H_


	)

4 
	~<¥oc/¥oc.h
>

5 
	~<ty≥.h
>

7 
swôch_¥o˚ss
(
¥o˚ss
 *
cur
, ¥o˚s†*
√xt
);

	@include/round.h

1 #i‚de‡
__LIB_ROUND_H


2 
	#__LIB_ROUND_H


	)

6 
	#ROUND_UP
(
X
, 
STEP
Ë(((XË+ (STEPË- 1Ë/ (STEPË* (STEP))

	)

10 
	#DIV_ROUND_UP
(
X
, 
STEP
Ë(((XË+ (STEPË- 1Ë/ (STEP))

	)

14 
	#ROUND_DOWN
(
X
, 
STEP
Ë((XË/ (STEPË* (STEP))

	)

	@include/ssulib.h

1 #i‚de‡
__SSULIB_H__


2 
	#__SSULIB_H__


	)

4 
	~<ty≥.h
>

5 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *Ë0)->MEMBER)

	)

7 
	#BUFSIZ
 512

	)

9 
mem˝y
(* 
‰om
, * 
to
, 
uöt32_t
 
Àn
);

10 
°∫cmp
(* 
b1
, * 
b2
, 
Àn
);

11 
boﬁ
 
gëkbd
(*
buf
, 
Àn
);

12 
gëTokí
(* 
buf
, 
tok
[][
BUFSIZ
], 
max
);

	@include/stdarg.h

1 #i‚de‡
__STDARG_H__


2 
	#__STDARG_H__


	)

4 *
	tva_li°
;

6 
	#_ADDRESSOF
(
v
Ë–&(vË)

	)

7 
	#_INTSIZEOF
(
n
Ë–(“Ë+ (Ë- 1Ë& ~((Ë- 1Ë)

	)

9 
	#va_°¨t
(
≠
,
v
Ë–≠ = (
va_li°
)
	`_ADDRESSOF
(vË+ 
	`_INTSIZEOF
(vË)

	)

10 
	#va_¨g
(
≠
,
t
Ë–*— *)(◊∞+
	`_INTSIZEOF
—)Ë- _INTSIZEOF—)Ë)

	)

11 
	#va_íd
(
≠
Ë–≠ = (
va_li°
)0 )

	)

13 
°æí_k
(c⁄° *
s
);

14 *
numbî
(* 
°r
, 
num
, 
ba£
, 
size
, 
¥ecisi⁄
, 
ty≥
);

15 
skù_©oi
(c⁄° **
s
);

16 
v•rötk
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

	@include/stdbool.h

1 #i‚de‡
__LIB_STDBOOL_H


2 
	#__LIB_STDBOOL_H


	)

5 
	#åue
 1

	)

6 
	#Ál£
 0

	)

7 
	#__boﬁ_åue_Ál£_¨e_deföed
 1

	)

	@include/stddef.h

1 #i‚de‡
__LIB_STDDEF_H


2 
	#__LIB_STDDEF_H


	)

5 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *Ë0)->MEMBER)

	)

10 
__PTRDIFF_TYPE__
 
	t±rdiff_t
;

11 
__SIZE_TYPE__
 
	tsize_t
;

	@include/stdint.h

1 #i‚de‡
__LIB_STDINT_H


2 
	#__LIB_STDINT_H


	)

4 sig√d 
	töt8_t
;

5 
	#INT8_MAX
 127

	)

6 
	#INT8_MIN
 (-
INT8_MAX
 - 1)

	)

8 sig√d 
	töt16_t
;

9 
	#INT16_MAX
 32767

	)

10 
	#INT16_MIN
 (-
INT16_MAX
 - 1)

	)

12 sig√d 
	töt32_t
;

13 
	#INT32_MAX
 2147483647

	)

14 
	#INT32_MIN
 (-
INT32_MAX
 - 1)

	)

16 sig√d 
	töt64_t
;

17 
	#INT64_MAX
 9223372036854775807LL

	)

18 
	#INT64_MIN
 (-
INT64_MAX
 - 1)

	)

20 
	tuöt8_t
;

21 
	#UINT8_MAX
 255

	)

23 
	tuöt16_t
;

24 
	#UINT16_MAX
 65535

	)

26 
	tuöt32_t
;

27 
	#UINT32_MAX
 4294967295U

	)

29 
	tuöt64_t
;

30 
	#UINT64_MAX
 18446744073709551615ULL

	)

32 
öt32_t
 
	töçå_t
;

33 
	#INTPTR_MIN
 
INT32_MIN


	)

34 
	#INTPTR_MAX
 
INT32_MAX


	)

36 
uöt32_t
 
	tuöçå_t
;

37 
	#UINTPTR_MAX
 
UINT32_MAX


	)

39 
öt64_t
 
	tötmax_t
;

40 
	#INTMAX_MIN
 
INT64_MIN


	)

41 
	#INTMAX_MAX
 
INT64_MAX


	)

43 
	tuötmax_t
;

44 
	#UINTMAX_MAX
 
UINT64_MAX


	)

46 
	#PTRDIFF_MIN
 
INT32_MIN


	)

47 
	#PTRDIFF_MAX
 
INT32_MAX


	)

49 
	#SIZE_MAX
 
UINT32_MAX


	)

	@include/stdio.h

1 #i‚de‡
__LIB_STDIO_H


2 
	#__LIB_STDIO_H


	)

4 
	~<debug.h
>

5 
	~<°d¨g.h
>

6 
	~<ty≥.h
>

7 
	~<°ddef.h
>

8 
	~<°döt.h
>

15 
	#STDIN_FILENO
 0

	)

16 
	#STDOUT_FILENO
 1

	)

19 
	$¥ötf
 (c⁄° *, ...Ë
	`PRINTF_FORMAT
 (1, 2);

20 
	$¢¥ötf
 (*, 
size_t
, c⁄° *, ...Ë
	`PRINTF_FORMAT
 (3, 4);

21 
	$v¥ötf
 (c⁄° *, 
va_li°
Ë
	`PRINTF_FORMAT
 (1, 0);

22 
	$v¢¥ötf
 (*, 
size_t
, c⁄° *, 
va_li°
Ë
	`PRINTF_FORMAT
 (3, 0);

23 
	`putch¨
 ();

24 
	`puts
 (const *);

27 
	`hex_dump
 (
uöçå_t
 
ofs
, c⁄° *, 
size_t
 
size
, 
boﬁ
 
ascii
);

28 
	`¥öt_hum™_ªadabÀ_size
 (
uöt64_t
 
sz
);

31 
	`__v¥ötf
 (c⁄° *
f‹m©
, 
va_li°
 
¨gs
,

32 (*
ouçut
Ë(, *), *
aux
);

33 
	`__¥ötf
 (c⁄° *
f‹m©
,

34 (*
ouçut
Ë(, *), *
aux
, ...);

37 
	#•rötf
 
d⁄t_u£_•rötf_u£_¢¥ötf


	)

38 
	#v•rötf
 
d⁄t_u£_v•rötf_u£_v¢¥ötf


	)

	@include/stdlib.h

1 #i‚de‡
__LIB_STDLIB_H


2 
	#__LIB_STDLIB_H


	)

4 
	~<°ddef.h
>

7 
©oi
 (const *);

8 
qs‹t
 (*
¨øy
, 
size_t
 
˙t
, size_à
size
,

9 (*
com∑ª
) (const *, const *));

10 *
	`b£¨ch
 (c⁄° *
key
, c⁄° *
¨øy
, 
size_t
 
˙t
,

11 
size_t
 
size
, (*
com∑ª
) (const *, const *));

14 
	`s‹t
 (*
¨øy
, 
size_t
 
˙t
, size_à
size
,

15 (*
com∑ª
Ë(c⁄° *, c⁄° *, *
aux
),

16 *
aux
);

17 *
	`bö¨y_£¨ch
 (c⁄° *
key
, c⁄° *
¨øy
, 
size_t
 
˙t
,

18 
size_t
 
size
,

19 (*
com∑ª
Ë(c⁄° *, c⁄° *, *
aux
),

20 *
aux
);

	@include/string.h

1 #i‚de‡
__LIB_STRING_H


2 
	#__LIB_STRING_H


	)

4 
	~<°ddef.h
>

8 *
memmove
 (*, c⁄° *, 
size_t
);

9 *
°∫ˇt
 (*, c⁄° *, 
size_t
);

10 
memcmp
 (c⁄° *, c⁄° *, 
size_t
);

11 
°rcmp
 (const *, const *);

12 *
memchr
 (c⁄° *, , 
size_t
);

13 *
°rchr
 (const *, );

14 
size_t
 
°rc•n
 (const *, const *);

15 *
°Ωbrk
 (const *, const *);

16 *
°ºchr
 (const *, );

17 
size_t
 
°r•n
 (const *, const *);

18 *
°r°r
 (const *, const *);

19 *
mem£t
 (*, , 
size_t
);

20 
size_t
 
°æí
 (const *);

23 
size_t
 
°æ˝y
 (*, const *, size_t);

24 
size_t
 
°æˇt
 (*, const *, size_t);

25 *
°πok_r
 (*, const *, **);

26 
size_t
 
°∫Àn
 (const *, size_t);

29 
	#°r˝y
 
d⁄t_u£_°r˝y_u£_°æ˝y


	)

30 
	#°∫˝y
 
d⁄t_u£_°∫˝y_u£_°æ˝y


	)

31 
	#°rˇt
 
d⁄t_u£_°rˇt_u£_°æˇt


	)

32 
	#°∫ˇt
 
d⁄t_u£_°∫ˇt_u£_°æˇt


	)

33 
	#°πok
 
d⁄t_u£_°πok_u£_°πok_r


	)

	@include/synch.h

1 #i‚de‡
__SYNCH_H__


2 
	#__SYNCH_H__


	)

4 
	~<li°.h
>

5 
	~<ty≥.h
>

9 
	s£m≠h‹e


11 
	mvÆue
;

12 
li°
 
	mwaôîs
;

15 
£ma_öô
 (
£m≠h‹e
 *, 
vÆue
);

16 
£ma_down
 (
£m≠h‹e
 *);

17 
boﬁ
 
£ma_åy_down
 (
£m≠h‹e
 *);

18 
£ma_up
 (
£m≠h‹e
 *);

19 
£ma_£lf_ã°
 ();

22 
	slock


24 
¥o˚ss
 *
	mhﬁdî
;

25 
£m≠h‹e
 
	m£m≠h‹e
;

28 
lock_öô
 (
lock
 *);

29 
lock_acquúe
 (
lock
 *);

30 
boﬁ
 
lock_åy_acquúe
 (
lock
 *);

31 
lock_ªÀa£
 (
lock
 *);

32 
boﬁ
 
lock_hñd_by_cuºít_¥o˚ss
 (c⁄° 
lock
 *);

35 
	sc⁄dôi⁄


37 
li°
 
	mwaôîs
;

40 
c⁄d_öô
 (
c⁄dôi⁄
 *);

41 
c⁄d_waô
 (
c⁄dôi⁄
 *, 
lock
 *);

42 
c⁄d_sig«l
 (
c⁄dôi⁄
 *, 
lock
 *);

43 
c⁄d_brﬂdˇ°
 (
c⁄dôi⁄
 *, 
lock
 *);

50 
	#b¨rõr
(Ë
asm
 vﬁ©ûê("" : : : "mem‹y")

	)

	@include/syscall.h

1 #i‚de‡ 
__SYSCALL_H__


2 
	#__SYSCALL_H__


	)

4 
	eSYS_LIST
 {

5 
	mSYS_FORK
 = 0,

6 
	mSYS_EXIT
,

7 
	mSYS_WAIT
,

8 
	mSYS_SSUREAD
,

9 
	mSYS_SHUTDOWN
,

10 
	mSYS_NUM
,

13 
	~<¥oc/¥oc.h
>

14 
öô_sysˇŒ
();

16 
exô
(
°©us
);

17 
pid_t
 
f‹k
(
¥oc_func
 
func
, * 
aux
);

18 
pid_t
 
waô
(*
°©us
);

19 
ssuªad
();

20 
shutdown
();

22 
sysˇŒ_tbl
[
SYS_NUM
][2];

	@include/type.h

1 #i‚de‡
__TYPE_H__


2 
	#__TYPE_H__


	)

4 
	tBYTE
;

5 #i‚de‡
BOOL


6 
	tBOOL
;

8 
	tboﬁ
;

9 
	tsize_t
;

10 
	tqw‹d
;

12 
	#TRUE
 1

	)

13 
	#FALSE
 0

	)

15 #i‚de‡
NULL


16 
	#NULL
 0

	)

18 #i‚de‡
åue


19 
	#åue
 1

	)

21 #i‚de‡
Ál£


22 
	#Ál£
 0

	)

29 sig√d 
	töt8_t
;

30 
	#INT8_MAX
 127

	)

31 
	#INT8_MIN
 (-
INT8_MAX
 - 1)

	)

33 sig√d 
	töt16_t
;

34 
	#INT16_MAX
 32767

	)

35 
	#INT16_MIN
 (-
INT16_MAX
 - 1)

	)

37 sig√d 
	töt32_t
;

38 
	#INT32_MAX
 2147483647

	)

39 
	#INT32_MIN
 (-
INT32_MAX
 - 1)

	)

41 sig√d 
	töt64_t
;

42 
	#INT64_MAX
 9223372036854775807LL

	)

43 
	#INT64_MIN
 (-
INT64_MAX
 - 1)

	)

45 
	tuöt8_t
;

46 
	#UINT8_MAX
 255

	)

48 
	tuöt16_t
;

49 
	#UINT16_MAX
 65535

	)

51 
	tuöt32_t
;

52 
	#UINT32_MAX
 4294967295U

	)

54 
	tuöt64_t
;

55 
	#UINT64_MAX
 18446744073709551615ULL

	)

57 
öt32_t
 
	töçå_t
;

58 
	#INTPTR_MIN
 
INT32_MIN


	)

59 
	#INTPTR_MAX
 
INT32_MAX


	)

61 
uöt32_t
 
	tuöçå_t
;

62 
	#UINTPTR_MAX
 
UINT32_MAX


	)

64 
öt64_t
 
	tötmax_t
;

65 
	#INTMAX_MIN
 
INT64_MIN


	)

66 
	#INTMAX_MAX
 
INT64_MAX


	)

68 
	tuötmax_t
;

69 
	#UINTMAX_MAX
 
UINT64_MAX


	)

71 
	#PTRDIFF_MIN
 
INT32_MIN


	)

72 
	#PTRDIFF_MAX
 
INT32_MAX


	)

74 
	#SIZE_MAX
 
UINT32_MAX


	)

	@include/vaddr.h

1 #i‚de‡
THREADS_VADDR_H


2 
	#THREADS_VADDR_H


	)

4 
	~<debug.h
>

5 
	~<°döt.h
>

6 
	~<°dboﬁ.h
>

8 
	~<lﬂdî.h
>

15 
	#BITMASK
(
SHIFT
, 
CNT
Ë(((1u»<< (CNT)Ë- 1Ë<< (SHIFT))

	)

18 
	#PGSHIFT
 0

	)

19 
	#PGBITS
 12

	)

20 
	#PGSIZE
 (1 << 
PGBITS
Ë

	)

21 
	#PGMASK
 
	`BITMASK
(
PGSHIFT
, 
PGBITS
Ë

	)

24 
ölöe
 
	$pg_ofs
 (c⁄° *
va
) {

25  (
uöçå_t
Ë
va
 & 
PGMASK
;

26 
	}
}

29 
ölöe
 
uöçå_t
 
	$pg_no
 (c⁄° *
va
) {

30  (
uöçå_t
Ë
va
 >> 
PGBITS
;

31 
	}
}

34 
ölöe
 *
	$pg_round_up
 (c⁄° *
va
) {

35  (*Ë(((
uöçå_t
Ë
va
 + 
PGSIZE
 - 1Ë& ~
PGMASK
);

36 
	}
}

39 
ölöe
 *
	$pg_round_down
 (c⁄° *
va
) {

40  (*Ë((
uöçå_t
Ë
va
 & ~
PGMASK
);

41 
	}
}

53 
	#PHYS_BASE
 ((*Ë
LOADER_PHYS_BASE
)

	)

56 
ölöe
 
boﬁ


57 
	$is_u£r_vaddr
 (c⁄° *
vaddr
)

59  
vaddr
 < 
PHYS_BASE
;

60 
	}
}

63 
ölöe
 
boﬁ


64 
	$is_kî√l_vaddr
 (c⁄° *
vaddr
)

66  
vaddr
 >
PHYS_BASE
;

67 
	}
}

71 
ölöe
 *

72 
	$±ov
 (
uöçå_t
 
∑ddr
)

74 
	`ASSERT
 ((*Ë
∑ddr
 < 
PHYS_BASE
);

76  (*Ë(
∑ddr
 + 
PHYS_BASE
);

77 
	}
}

81 
ölöe
 
uöçå_t


82 
	$vt›
 (c⁄° *
vaddr
)

84 
	`ASSERT
 (
	`is_kî√l_vaddr
 (
vaddr
));

86  (
uöçå_t
Ë
vaddr
 - (uöçå_tË
PHYS_BASE
;

87 
	}
}

	@list.c

1 
	~<li°.h
>

3 #i‚de‡
ASSERT


4 
	#ASSERT
(
COND
Ë;

	)

37 
boﬁ
 
is_s‹ãd
 (
li°_ñem
 *
a
, li°_ñem *
b
,

38 
li°_Àss_func
 *
Àss
, *
aux
);

41 
ölöe
 
boﬁ


42 
	$is_hód
 (
li°_ñem
 *
ñem
)

44  
ñem
 !
NULL
 &&ÉÀm->
¥ev
 =NULL &&ÉÀm->
√xt
 != NULL;

45 
	}
}

49 
ölöe
 
boﬁ


50 
	$is_öãri‹
 (
li°_ñem
 *
ñem
)

52  
ñem
 !
NULL
 &&ÉÀm->
¥ev
 !NULL &&ÉÀm->
√xt
 != NULL;

53 
	}
}

56 
ölöe
 
boﬁ


57 
	$is_èû
 (
li°_ñem
 *
ñem
)

59  
ñem
 !
NULL
 &&ÉÀm->
¥ev
 !NULL &&ÉÀm->
√xt
 == NULL;

60 
	}
}

64 
	$li°_öô
 (
li°
 *list)

66 
	`ASSERT
 (
li°
 !
NULL
);

67 
li°
->
hód
.
¥ev
 = 
NULL
;

68 
li°
->
hód
.
√xt
 = &li°->
èû
;

69 
li°
->
èû
.
¥ev
 = &li°->
hód
;

70 
li°
->
èû
.
√xt
 = 
NULL
;

71 
	}
}

74 
li°_ñem
 *

75 
	$li°_begö
 (
li°
 *list)

77 
	`ASSERT
 (
li°
 !
NULL
);

78  
li°
->
hód
.
√xt
;

79 
	}
}

84 
li°_ñem
 *

85 
	$li°_√xt
 (
li°_ñem
 *
ñem
)

87 
	`ASSERT
 (
	`is_hód
 (
ñem
Ë|| 
	`is_öãri‹
 (elem));

88  
ñem
->
√xt
;

89 
	}
}

96 
li°_ñem
 *

97 
	$li°_íd
 (
li°
 *list)

99 
	`ASSERT
 (
li°
 !
NULL
);

100  &
li°
->
èû
;

101 
	}
}

105 
li°_ñem
 *

106 
	$li°_rbegö
 (
li°
 *list)

108 
	`ASSERT
 (
li°
 !
NULL
);

109  
li°
->
èû
.
¥ev
;

110 
	}
}

115 
li°_ñem
 *

116 
	$li°_¥ev
 (
li°_ñem
 *
ñem
)

118 
	`ASSERT
 (
	`is_öãri‹
 (
ñem
Ë|| 
	`is_èû
 (elem));

119  
ñem
->
¥ev
;

120 
	}
}

135 
li°_ñem
 *

136 
	$li°_ªnd
 (
li°
 *list)

138 
	`ASSERT
 (
li°
 !
NULL
);

139  &
li°
->
hód
;

140 
	}
}

153 
li°_ñem
 *

154 
	$li°_hód
 (
li°
 *list)

156 
	`ASSERT
 (
li°
 !
NULL
);

157  &
li°
->
hód
;

158 
	}
}

161 
li°_ñem
 *

162 
	$li°_èû
 (
li°
 *list)

164 
	`ASSERT
 (
li°
 !
NULL
);

165  &
li°
->
èû
;

166 
	}
}

172 
	$li°_ö£π
 (
li°_ñem
 *
bef‹e
, li°_ñem *
ñem
)

174 
	`ASSERT
 (
	`is_öãri‹
 (
bef‹e
Ë|| 
	`is_èû
 (before));

175 
	`ASSERT
 (
ñem
 !
NULL
);

177 if(
ñem
->
¥ev
 !
NULL
)

178 
ñem
->
¥ev
->
√xt
 =Élem->next;

179 if(
ñem
->
√xt
 !
NULL
)

180 
ñem
->
√xt
->
¥ev
 =Élem->prev;

182 
ñem
->
¥ev
 = 
bef‹e
->prev;

183 
ñem
->
√xt
 = 
bef‹e
;

184 
bef‹e
->
¥ev
->
√xt
 = 
ñem
;

185 
bef‹e
->
¥ev
 = 
ñem
;

186 
	}
}

192 
	$li°_•li˚
 (
li°_ñem
 *
bef‹e
,

193 
li°_ñem
 *
fú°
, li°_ñem *
œ°
)

195 
	`ASSERT
 (
	`is_öãri‹
 (
bef‹e
Ë|| 
	`is_èû
 (before));

196 i‡(
fú°
 =
œ°
)

198 
œ°
 = 
	`li°_¥ev
 (last);

200 
	`ASSERT
 (
	`is_öãri‹
 (
fú°
));

201 
	`ASSERT
 (
	`is_öãri‹
 (
œ°
));

204 
fú°
->
¥ev
->
√xt
 = 
œ°
->next;

205 
œ°
->
√xt
->
¥ev
 = 
fú°
->prev;

208 
fú°
->
¥ev
 = 
bef‹e
->prev;

209 
œ°
->
√xt
 = 
bef‹e
;

210 
bef‹e
->
¥ev
->
√xt
 = 
fú°
;

211 
bef‹e
->
¥ev
 = 
œ°
;

212 
	}
}

217 
	$li°_push_‰⁄t
 (
li°
 *li°, 
li°_ñem
 *
ñem
)

219 
	`li°_ö£π
 (
	`li°_begö
 (
li°
), 
ñem
);

220 
	}
}

225 
	$li°_push_back
 (
li°
 *li°, 
li°_ñem
 *
ñem
)

227 
	`li°_ö£π
 (
	`li°_íd
 (
li°
), 
ñem
);

228 
	}
}

256 
li°_ñem
 *

257 
	$li°_ªmove
 (
li°_ñem
 *
ñem
)

259 
	`ASSERT
 (
	`is_öãri‹
 (
ñem
));

260 
ñem
->
¥ev
->
√xt
 =Élem->next;

261 
ñem
->
√xt
->
¥ev
 =Élem->prev;

262  
ñem
->
√xt
;

263 
	}
}

267 
li°_ñem
 *

268 
	$li°_p›_‰⁄t
 (
li°
 *list)

270 
li°_ñem
 *
‰⁄t
 = 
	`li°_‰⁄t
 (
li°
);

271 
	`li°_ªmove
 (
‰⁄t
);

272  
‰⁄t
;

273 
	}
}

277 
li°_ñem
 *

278 
	$li°_p›_back
 (
li°
 *list)

280 
li°_ñem
 *
back
 = 
	`li°_back
 (
li°
);

281 
	`li°_ªmove
 (
back
);

282  
back
;

283 
	}
}

287 
li°_ñem
 *

288 
	$li°_‰⁄t
 (
li°
 *list)

290 
	`ASSERT
 (!
	`li°_em±y
 (
li°
));

291  
li°
->
hód
.
√xt
;

292 
	}
}

296 
li°_ñem
 *

297 
	$li°_back
 (
li°
 *list)

299 
	`ASSERT
 (!
	`li°_em±y
 (
li°
));

300  
li°
->
èû
.
¥ev
;

301 
	}
}

305 
size_t


306 
	$li°_size
 (
li°
 *list)

308 
li°_ñem
 *
e
;

309 
size_t
 
˙t
 = 0;

311 
e
 = 
	`li°_begö
 (
li°
);É !
	`li°_íd
 (li°);É = 
	`li°_√xt
 (e))

312 
˙t
++;

313  
˙t
;

314 
	}
}

317 
boﬁ


318 
	$li°_em±y
 (
li°
 *list)

320  
	`li°_begö
 (
li°
Ë=
	`li°_íd
 (list);

321 
	}
}

325 
	$sw≠
 (
li°_ñem
 **
a
, li°_ñem **
b
)

327 
li°_ñem
 *
t
 = *
a
;

328 *
a
 = *
b
;

329 *
b
 = 
t
;

330 
	}
}

334 
	$li°_ªvî£
 (
li°
 *list)

336 i‡(!
	`li°_em±y
 (
li°
))

338 
li°_ñem
 *
e
;

340 
e
 = 
	`li°_begö
 (
li°
);É !
	`li°_íd
 (li°);É =É->
¥ev
)

341 
	`sw≠
 (&
e
->
¥ev
, &e->
√xt
);

342 
	`sw≠
 (&
li°
->
hód
.
√xt
, &li°->
èû
.
¥ev
);

343 
	`sw≠
 (&
li°
->
hód
.
√xt
->
¥ev
, &li°->
èû
.prev->next);

345 
	}
}

349 
boﬁ


350 
	$is_s‹ãd
 (
li°_ñem
 *
a
, li°_ñem *
b
,

351 
li°_Àss_func
 *
Àss
, *
aux
)

353 i‡(
a
 !
b
)

354 (
a
 = 
	`li°_√xt
 (a)Ë!
b
)

355 i‡(
	`Àss
 (
a
, 
	`li°_¥ev
 (a), 
aux
))

356  
Ál£
;

357  
åue
;

358 
	}
}

365 
li°_ñem
 *

366 
	$föd_íd_of_run
 (
li°_ñem
 *
a
, li°_ñem *
b
,

367 
li°_Àss_func
 *
Àss
, *
aux
)

369 
	`ASSERT
 (
a
 !
NULL
);

370 
	`ASSERT
 (
b
 !
NULL
);

371 
	`ASSERT
 (
Àss
 !
NULL
);

372 
	`ASSERT
 (
a
 !
b
);

376 
a
 = 
	`li°_√xt
 (a);

378 
a
 !
b
 && !
	`Àss
 (a, 
	`li°_¥ev
 (a), 
aux
));

379  
a
;

380 
	}
}

388 
	$ö∂a˚_mîge
 (
li°_ñem
 *
a0
, li°_ñem *
a1b0
,

389 
li°_ñem
 *
b1
,

390 
li°_Àss_func
 *
Àss
, *
aux
)

392 
	`ASSERT
 (
a0
 !
NULL
);

393 
	`ASSERT
 (
a1b0
 !
NULL
);

394 
	`ASSERT
 (
b1
 !
NULL
);

395 
	`ASSERT
 (
Àss
 !
NULL
);

396 
	`ASSERT
 (
	`is_s‹ãd
 (
a0
, 
a1b0
, 
Àss
, 
aux
));

397 
	`ASSERT
 (
	`is_s‹ãd
 (
a1b0
, 
b1
, 
Àss
, 
aux
));

399 
a0
 !
a1b0
 &&á1b0 !
b1
)

400 i‡(!
	`Àss
 (
a1b0
, 
a0
, 
aux
))

401 
a0
 = 
	`li°_√xt
 (a0);

404 
a1b0
 = 
	`li°_√xt
 (a1b0);

405 
	`li°_•li˚
 (
a0
, 
	`li°_¥ev
 (
a1b0
),á1b0);

407 
	}
}

413 
	$li°_s‹t
 (
li°
 *li°, 
li°_Àss_func
 *
Àss
, *
aux
)

415 
size_t
 
ouçut_run_˙t
;

417 
	`ASSERT
 (
li°
 !
NULL
);

418 
	`ASSERT
 (
Àss
 !
NULL
);

424 
li°_ñem
 *
a0
;

425 
li°_ñem
 *
a1b0
;

426 
li°_ñem
 *
b1
;

428 
ouçut_run_˙t
 = 0;

429 
a0
 = 
	`li°_begö
 (
li°
);á0 !
	`li°_íd
 (li°);á0 = 
b1
)

432 
ouçut_run_˙t
++;

436 
a1b0
 = 
	`föd_íd_of_run
 (
a0
, 
	`li°_íd
 (
li°
), 
Àss
, 
aux
);

437 i‡(
a1b0
 =
	`li°_íd
 (
li°
))

439 
b1
 = 
	`föd_íd_of_run
 (
a1b0
, 
	`li°_íd
 (
li°
), 
Àss
, 
aux
);

442 
	`ö∂a˚_mîge
 (
a0
, 
a1b0
, 
b1
, 
Àss
, 
aux
);

445 
ouçut_run_˙t
 > 1);

447 
	`ASSERT
 (
	`is_s‹ãd
 (
	`li°_begö
 (
li°
), 
	`li°_íd
 (li°), 
Àss
, 
aux
));

448 
	}
}

454 
	$li°_ö£π_‹dîed
 (
li°
 *li°, 
li°_ñem
 *
ñem
,

455 
li°_Àss_func
 *
Àss
, *
aux
)

457 
li°_ñem
 *
e
;

459 
	`ASSERT
 (
li°
 !
NULL
);

460 
	`ASSERT
 (
ñem
 !
NULL
);

461 
	`ASSERT
 (
Àss
 !
NULL
);

463 
e
 = 
	`li°_begö
 (
li°
);É !
	`li°_íd
 (li°);É = 
	`li°_√xt
 (e))

464 i‡(
	`Àss
 (
ñem
, 
e
, 
aux
))

466  
	`li°_ö£π
 (
e
, 
ñem
);

467 
	}
}

474 
	$li°_unique
 (
li°
 *li°, li° *
du∂iˇãs
,

475 
li°_Àss_func
 *
Àss
, *
aux
)

477 
li°_ñem
 *
ñem
, *
√xt
;

479 
	`ASSERT
 (
li°
 !
NULL
);

480 
	`ASSERT
 (
Àss
 !
NULL
);

481 i‡(
	`li°_em±y
 (
li°
))

484 
ñem
 = 
	`li°_begö
 (
li°
);

485 (
√xt
 = 
	`li°_√xt
 (
ñem
)Ë!
	`li°_íd
 (
li°
))

486 i‡(!
	`Àss
 (
ñem
, 
√xt
, 
aux
) && !less (next,Élem,áux))

488 
	`li°_ªmove
 (
√xt
);

489 i‡(
du∂iˇãs
 !
NULL
)

490 
	`li°_push_back
 (
du∂iˇãs
, 
√xt
);

493 
ñem
 = 
√xt
;

494 
	}
}

500 
li°_ñem
 *

501 
	$li°_max
 (
li°
 *li°, 
li°_Àss_func
 *
Àss
, *
aux
)

503 
li°_ñem
 *
max
 = 
	`li°_begö
 (
li°
);

504 i‡(
max
 !
	`li°_íd
 (
li°
))

506 
li°_ñem
 *
e
;

508 
e
 = 
	`li°_√xt
 (
max
);É !
	`li°_íd
 (
li°
);É =Üist_next (e))

509 i‡(
	`Àss
 (
max
, 
e
, 
aux
))

510 
max
 = 
e
;

512  
max
;

513 
	}
}

519 
li°_ñem
 *

520 
	$li°_mö
 (
li°
 *li°, 
li°_Àss_func
 *
Àss
, *
aux
)

522 
li°_ñem
 *
mö
 = 
	`li°_begö
 (
li°
);

523 i‡(
mö
 !
	`li°_íd
 (
li°
))

525 
li°_ñem
 *
e
;

527 
e
 = 
	`li°_√xt
 (
mö
);É !
	`li°_íd
 (
li°
);É =Üist_next (e))

528 i‡(
	`Àss
 (
e
, 
mö
, 
aux
))

529 
mö
 = 
e
;

531  
mö
;

532 
	}
}

	@mem/malloc.c

1 
	~<mem/mÆloc.h
>

2 
	~<debug.h
>

3 
	~<li°.h
>

4 
	~<round.h
>

5 
	~<°döt.h
>

6 
	~<°dio.h
>

7 
	~<°rög.h
>

8 
	~<mem/∑Œoc.h
>

9 
	~<synch.h
>

10 
	~<vaddr.h
>

38 
	sdesc


40 
size_t
 
	mblock_size
;

41 
size_t
 
	mblocks_≥r_¨ía
;

42 
li°
 
	m‰ì_li°
;

43 
lock
 
	mlock
;

47 
	#ARENA_MAGIC
 0x9a548ìd

	)

50 
	s¨ía


52 
	mmagic
;

53 
desc
 *
	mdesc
;

54 
size_t
 
	m‰ì_˙t
;

58 
	sblock


60 
li°_ñem
 
	m‰ì_ñem
;

64 
desc
 
	gdescs
[10];

65 
size_t
 
	gdesc_˙t
;

67 
¨ía
 *
block_to_¨ía
 (
block
 *);

68 
block
 *
¨ía_to_block
 (
¨ía
 *, 
size_t
 
idx
);

72 
	$mÆloc_öô
 ()

74 
size_t
 
block_size
;

76 
block_size
 = 16; block_sizê< 
PGSIZE
 / 2; block_size *= 2)

78 
desc
 *
d
 = &
descs
[
desc_˙t
++];

80 
d
->
block_size
 = block_size;

81 
d
->
blocks_≥r_¨ía
 = (
PGSIZE
 -  (
¨ía
)Ë/ 
block_size
;

82 
	`li°_öô
 (&
d
->
‰ì_li°
);

83 
	`lock_öô
 (&
d
->
lock
);

85 
	}
}

90 
	$mÆloc
 (
size_t
 
size
)

92  
NULL
;

93 
desc
 *
d
;

94 
block
 *
b
;

95 
¨ía
 *
a
;

98 i‡(
size
 == 0)

99  
NULL
;

103 
d
 = 
descs
; d < desc†+ 
desc_˙t
; d++)

104 i‡(
d
->
block_size
 >
size
)

106 i‡(
d
 =
descs
 + 
desc_˙t
)

110 
size_t
 
∑ge_˙t
 = 
	`DIV_ROUND_UP
 (
size
 +  *
a
, 
PGSIZE
);

111 
a
 = (
¨ía
 *)
	`∑Œoc_gë_mu…ùÀ
 (
HEAP__
, 
∑ge_˙t
);

112 i‡(
a
 =
NULL
)

113  
NULL
;

117 
a
->
magic
 = 
ARENA_MAGIC
;

118 
a
->
desc
 = 
NULL
;

119 
a
->
‰ì_˙t
 = 
∑ge_˙t
;

120  
a
 + 1;

123 
	`lock_acquúe
 (&
d
->
lock
);

126 i‡(
	`li°_em±y
 (&
d
->
‰ì_li°
))

128 
size_t
 
i
;

131 
a
 = (
¨ía
 *Ë
	`∑Œoc_gë_∑ge
 (
HEAP__
);

132 i‡(
a
 =
NULL
)

134 
	`lock_ªÀa£
 (&
d
->
lock
);

135  
NULL
;

139 
a
->
magic
 = 
ARENA_MAGIC
;

140 
a
->
desc
 = 
d
;

141 
a
->
‰ì_˙t
 = 
d
->
blocks_≥r_¨ía
;

142 
i
 = 0; i < 
d
->
blocks_≥r_¨ía
; i++)

144 
block
 *
b
 = 
	`¨ía_to_block
 (
a
, 
i
);

145 
	`li°_push_back
 (&
d
->
‰ì_li°
, &
b
->
‰ì_ñem
);

150 
b
 = 
	`li°_íåy
 (
	`li°_p›_‰⁄t
 (&
d
->
‰ì_li°
), 
block
, 
‰ì_ñem
);

151 
a
 = 
	`block_to_¨ía
 (
b
);

152 
a
->
‰ì_˙t
--;

153 
	`lock_ªÀa£
 (&
d
->
lock
);

154  
b
;

155 
	}
}

160 
	$ˇŒoc
 (
size_t
 
a
, size_à
b
)

162 *
p
;

163 
size_t
 
size
;

166 
size
 = 
a
 * 
b
;

167 i‡(
size
 < 
a
 || sizê< 
b
)

168  
NULL
;

171 
p
 = 
	`mÆloc
 (
size
);

172 i‡(
p
 !
NULL
)

173 
	`mem£t
 (
p
, 0, 
size
);

175  
p
;

176 
	}
}

179 
size_t


180 
	$block_size
 (*
block
)

182 
block
 *
b
 = block;

183 
¨ía
 *
a
 = 
	`block_to_¨ía
 (
b
);

184 
desc
 *
d
 = 
a
->desc;

186  
d
 !
NULL
 ? d->
block_size
 : 
PGSIZE
 * 
a
->
‰ì_˙t
 - 
	`pg_ofs
 (
block
);

187 
	}
}

196 
	$ªÆloc
 (*
ﬁd_block
, 
size_t
 
√w_size
)

198 i‡(
√w_size
 == 0)

200 
	`‰ì
 (
ﬁd_block
);

201  
NULL
;

205 *
√w_block
 = 
	`mÆloc
 (
√w_size
);

206 i‡(
ﬁd_block
 !
NULL
 && 
√w_block
 != NULL)

208 
size_t
 
ﬁd_size
 = 
	`block_size
 (
ﬁd_block
);

209 
size_t
 
mö_size
 = 
√w_size
 < 
ﬁd_size
 ?Çew_size : old_size;

210 
	`mem˝y
 (
√w_block
, 
ﬁd_block
, 
mö_size
);

211 
	`‰ì
 (
ﬁd_block
);

213  
√w_block
;

215 
	}
}

220 
	$‰ì
 (*
p
)

222 i‡(
p
 !
NULL
)

224 
block
 *
b
 = 
p
;

225 
¨ía
 *
a
 = 
	`block_to_¨ía
 (
b
);

226 
desc
 *
d
 = 
a
->desc;

228 i‡(
d
 !
NULL
)

232 #i‚de‡
NDEBUG


234 
	`mem£t
 (
b
, 0xcc, 
d
->
block_size
);

237 
	`lock_acquúe
 (&
d
->
lock
);

240 
	`li°_push_‰⁄t
 (&
d
->
‰ì_li°
, &
b
->
‰ì_ñem
);

243 i‡(++
a
->
‰ì_˙t
 >
d
->
blocks_≥r_¨ía
)

245 
size_t
 
i
;

248 
i
 = 0; i < 
d
->
blocks_≥r_¨ía
; i++)

250 
block
 *
b
 = 
	`¨ía_to_block
 (
a
, 
i
);

251 
	`li°_ªmove
 (&
b
->
‰ì_ñem
);

253 
	`∑Œoc_‰ì_∑ge
 (
a
);

256 
	`lock_ªÀa£
 (&
d
->
lock
);

261 
	`∑Œoc_‰ì_mu…ùÀ
 (
a
,á->
‰ì_˙t
);

265 
	}
}

268 
¨ía
 *

269 
	$block_to_¨ía
 (
block
 *
b
)

271 
¨ía
 *
a
 = 
	`pg_round_down
 (
b
);

281  
a
;

282 
	}
}

285 
block
 *

286 
	$¨ía_to_block
 (
¨ía
 *
a
, 
size_t
 
idx
)

291  (
block
 *Ë((
uöt8_t
 *Ë
a


292 +  *
a


293 + 
idx
 * 
a
->
desc
->
block_size
);

294 
	}
}

	@mem/mm.c

1 
	~<mem/mm.h
>

3 
gëMemSize
();

4 
nGëMemSize
();

6 
	gMEM_SIZE
;

8 
	$dëe˘_mem
()

10 
MEM_SIZE
 = 
	`nGëMemSize
();

12 
	}
}

14 
	$nGëMemSize
()

16 *
pAddr
 = (*)0x20000;

17 
tmp
;

19 
pAddr
 += (4*1024*1024);

20 
tmp
 = *
pAddr
;

21 *
pAddr
 = 0x12345678;

22 if(*
pAddr
 != 0x12345678) {

23 
pAddr
 -= (4*1024*1024);

25 
pAddr
 += (4*1024);

26 
tmp
 = *
pAddr
;

27 *
pAddr
 = 0x87654321;

28 if(*
pAddr
 != 0x87654321)

30 *
pAddr
 = 
tmp
;

34 *
pAddr
 = 
tmp
;

37  ()
pAddr
;

38 
	}
}

40 
	$mem_size
()

42  
MEM_SIZE
;

43 
	}
}

	@mem/paging.c

1 
	~<devi˚/io.h
>

2 
	~<mem/mm.h
>

3 
	~<mem/∑gög.h
>

4 
	~<devi˚/c⁄sﬁe.h
>

5 
	~<¥oc/¥oc.h
>

6 
	~<öãºu±.h
>

7 
	~<mem/∑Œoc.h
>

8 
	~<ssulib.h
>

10 
uöt32_t
 *
	gPID0_PAGE_DIR
;

12 
öå_h™dÀr_func
 
	gpf_h™dÀr
;

14 
uöt32_t
 
	$sˇÀ_up
(
uöt32_t
 
ba£
, uöt32_à
size
)

16 
uöt32_t
 
mask
 = ~(
size
-1);

17 if(
ba£
 & 
mask
 != 0)

18 
ba£
 = ba£ & 
mask
 + 
size
;

19  
ba£
;

20 
	}
}

22 
uöt32_t
 
	$sˇÀ_down
(
uöt32_t
 
ba£
, uöt32_à
size
)

24 
uöt32_t
 
mask
 = ~(
size
-1);

25 if(
ba£
 & 
mask
 != 0)

26 
ba£
 = ba£ & 
mask
 - 
size
;

27  
ba£
;

28 
	}
}

30 
	$öô_∑gög
()

32 
uöt32_t
 *
∑ge_dú
 = 
	`∑Œoc_gë_∑ge
(
HEAP__
);

33 
uöt32_t
 *
∑ge_tbl
 = 
	`∑Œoc_gë_∑ge
(
HEAP__
);

35 
∑ge_dú
 = 
	`va_to_ø
(page_dir);

37 
∑ge_tbl
 = 
	`va_to_ø
(page_tbl);

38 
PID0_PAGE_DIR
 = 
∑ge_dú
;

40 
NUM_PT
, 
NUM_PE
;

41 
uöt32_t
 
¸0_∑gög_£t
;

42 
i
;

44 
NUM_PE
 = 
	`mem_size
(Ë/ 
PAGE_SIZE
;

45 
NUM_PT
 = 
NUM_PE
 / 1024;

47 
	`¥ötk
("-PE=%d, PT=%d\n", 
NUM_PE
, 
NUM_PT
);

48 
	`¥ötk
("-∑gêdú=%xÖagêtbl=%x\n", 
∑ge_dú
, 
∑ge_tbl
);

51 
∑ge_dú
[0] = (
uöt32_t
)
∑ge_tbl
 | 
PAGE_FLAG_RW
 | 
PAGE_FLAG_PRESENT
;

53 
NUM_PE
 = 
RKERNEL_HEAP_START
 / 
PAGE_SIZE
;

55  
i
 = 0; i < 
NUM_PE
; i++ ) {

56 
∑ge_tbl
[
i
] = (
PAGE_SIZE
 * i)

57 | 
PAGE_FLAG_RW


58 | 
PAGE_FLAG_PRESENT
;

64 
¸0_∑gög_£t
 = 
	`ªad_¸0
(Ë| 
CR0_FLAG_PG
;

67 
	`wrôe_¸3
–()
∑ge_dú
 );

68 
	`wrôe_¸0
–
¸0_∑gög_£t
 );

70 
	`ªg_h™dÀr
(14, 
pf_h™dÀr
);

71 
	}
}

73 
	$mem˝y_h¨d
(* 
‰om
, * 
to
, 
uöt32_t
 
Àn
)

75 
	`wrôe_¸0
–
	`ªad_¸0
(Ë& ~
CR0_FLAG_PG
);

76 
	`mem˝y
(
‰om
, 
to
, 
Àn
);

77 
	`wrôe_¸0
–
	`ªad_¸0
(Ë| 
CR0_FLAG_PG
);

78 
	}
}

80 
uöt32_t
* 
	$gë_cur_pd
()

82  (
uöt32_t
*)
	`ªad_¸3
();

83 
	}
}

85 
uöt32_t
 
	$pde_idx_addr
(
uöt32_t
* 
addr
)

87 
uöt32_t
 
ªt
 = ((uöt32_t)
addr
 & 
PAGE_MASK_PDE
Ë>> 
PAGE_OFFSET_PDE
;

88  
ªt
;

89 
	}
}

91 
uöt32_t
 
	$±e_idx_addr
(
uöt32_t
* 
addr
)

93 
uöt32_t
 
ªt
 = ((uöt32_t)
addr
 & 
PAGE_MASK_PTE
Ë>> 
PAGE_OFFSET_PTE
;

94  
ªt
;

95 
	}
}

97 
uöt32_t
* 
	$±_pde
(
uöt32_t
 
pde
)

99 
uöt32_t
 * 
ªt
 = (uöt32_t*)(
pde
 & 
PAGE_MASK_BASE
);

100  
ªt
;

101 
	}
}

103 
uöt32_t
* 
	$±_addr
(
uöt32_t
* 
addr
)

105 
uöt32_t
 
idx
 = 
	`pde_idx_addr
(
addr
);

106 
uöt32_t
* 
pd
 = 
	`gë_cur_pd
();

107  
	`±_pde
(
pd
[
idx
]);

108 
	}
}

110 
uöt32_t
* 
	$pg_addr
(
uöt32_t
* 
addr
)

112 
uöt32_t
 *
±
 = 
	`±_addr
(
addr
);

113 
uöt32_t
 
idx
 = 
	`±e_idx_addr
(
addr
);

114 
uöt32_t
 *
ªt
 = (uöt32_t*)(
±
[
idx
] & 
PAGE_MASK_BASE
);

115  
ªt
;

116 
	}
}

121 
	$±_c›y
(
uöt32_t
 *
pd
, uöt32_à*
de°_pd
, uöt32_à
idx
)

123 
uöt32_t
 *
±
 = 
	`±_pde
(
pd
[
idx
]);

124 
uöt32_t
 *
√w_±
;

125 
uöt32_t
 
i
;

128 
±
 = 
	`ø_to_va
(pt);

129 
√w_±
 = 
	`∑Œoc_gë_∑ge
(
HEAP__
);

131 
i
 = 0; i<1024; i++)

133 if(
±
[
i
] & 
PAGE_FLAG_PRESENT
)

136 
√w_±
 = 
	`va_to_ø
(new_pt);

137 
de°_pd
[
idx
] = (
uöt32_t
)
√w_±
 | (
pd
[idx] & ~
PAGE_MASK_BASE
 & ~ 
PAGE_FLAG_ACCESS
);

139 
√w_±
 = 
	`ø_to_va
(new_pt);

140 
√w_±
[
i
] = 
±
[i];

143 
	}
}

148 
	$pd_c›y
(
uöt32_t
* 
‰om
, uöt32_t* 
to
)

150 
uöt32_t
 
i
;

152 
i
 = 0; i < 1024; i++)

160 if(
‰om
[
i
] & 
PAGE_FLAG_PRESENT
)

162 
	`±_c›y
(
‰om
, 
to
, 
i
);

165 
	}
}

167 
uöt32_t
* 
	$pd_¸óã
 (
pid_t
 
pid
)

169 
uöt32_t
 *
pd
 = 
	`∑Œoc_gë_∑ge
(
HEAP__
);

171 
	`pd_c›y
(
	`ø_to_va
((
uöt32_t
*)
	`ªad_¸3
()), 
pd
);

174 
pd
 = 
	`va_to_ø
(pd);

176  
pd
;

177 
	}
}

178 
	$chûd_°ack_ª£t
(
pid_t
 
pid
){

179 
uöt32_t
 *
pda
 = 
cur_¥o˚ss
->
pd
;

180 
uöt32_t
 
pdi
 = 
	`pde_idx_addr
((uöt32_t*)
VKERNEL_STACK_ADDR
);

181 
	`wrôe_¸0
–
	`ªad_¸0
(Ë& ~
CR0_FLAG_PG
);

182 
pda
[
pdi
] = 
NULL
;

183 
	`wrôe_¸0
–
	`ªad_¸0
(Ë| 
CR0_FLAG_PG
);

184 
uöt32_t
 
tmp
 = 
	`ø_to_va
(
pda
)[0];

185 
	}
}

187 
	$pf_h™dÀr
(
öå_‰ame
 *
i‰ame
)

189 *
Áu…_addr
;

191 
	`asm
 ("mov»%%¸2, %0" : "Ù" (
Áu…_addr
));

193 
	`¥ötk
("PagêÁu… : %X\n",
Áu…_addr
);

194 #ifde‡
SCREEN_SCROLL


195 
	`ª‰eshS¸ìn
();

198 
uöt32_t
 
pdi
, 
±i
;

199 
uöt32_t
 *
±a
;

200 
uöt32_t
 *
pda
 = (uöt32_t*)
	`ªad_¸3
();

202 
pdi
 = 
	`pde_idx_addr
(
Áu…_addr
);

203 
±i
 = 
	`±e_idx_addr
(
Áu…_addr
);

205 if(
pda
 =
PID0_PAGE_DIR
){

206 
	`wrôe_¸0
–
	`ªad_¸0
(Ë& ~
CR0_FLAG_PG
);

207 
±a
 = 
	`±_pde
(
pda
[
pdi
]);

208 
	`wrôe_¸0
–
	`ªad_¸0
(Ë| 
CR0_FLAG_PG
);

212 
pda
 = 
	`ø_to_va
(pda);

214 
±a
 = 
	`±_pde
(
pda
[
pdi
]);

217 if(
±a
 =
NULL
){

218 
	`wrôe_¸0
–
	`ªad_¸0
(Ë& ~
CR0_FLAG_PG
);

220 
±a
 = 
	`∑Œoc_gë_∑ge
(
HEAP__
);

222 
±a
 = 
	`va_to_ø
(pta);

223 
	`mem£t
(
±a
,0,
PAGE_SIZE
);

225 
pda
[
pdi
] = (
uöt32_t
)
±a
 | 
PAGE_FLAG_RW
 | 
PAGE_FLAG_PRESENT
;

227 
Áu…_addr
 = (
uöt32_t
*)((uöt32_t)Áu…_add∏& 
PAGE_MASK_BASE
);

230 
Áu…_addr
 = 
	`va_to_ø
(fault_addr);

232 
±a
[
±i
] = (
uöt32_t
)
Áu…_addr
 | 
PAGE_FLAG_RW
 | 
PAGE_FLAG_PRESENT
;

235 
±a
 = 
	`ø_to_va
(pta);

236 
pdi
 = 
	`pde_idx_addr
(
±a
);

237 
±i
 = 
	`±e_idx_addr
(
±a
);

239 
uöt32_t
 *
tmp_±a
 = 
	`±_pde
(
pda
[
pdi
]);

241 
tmp_±a
[
±i
] = (
uöt32_t
)
	`va_to_ø
(
±a
Ë| 
PAGE_FLAG_RW
 | 
PAGE_FLAG_PRESENT
;

243 
	`wrôe_¸0
–
	`ªad_¸0
(Ë| 
CR0_FLAG_PG
);

247 
±a
 = 
	`ø_to_va
(pta);

248 
Áu…_addr
 = (
uöt32_t
*)((uöt32_t)Áu…_add∏& 
PAGE_MASK_BASE
);

250 
Áu…_addr
 = 
	`va_to_ø
(fault_addr);

251 
±a
[
±i
] = (
uöt32_t
)
Áu…_addr
 | 
PAGE_FLAG_RW
 | 
PAGE_FLAG_PRESENT
;

253 
	}
}

	@mem/palloc.c

1 
	~<mem/∑Œoc.h
>

2 
	~<bôm≠.h
>

3 
	~<ty≥.h
>

4 
	~<round.h
>

5 
	~<mem/mm.h
>

6 
	~<synch.h
>

7 
	~<devi˚/c⁄sﬁe.h
>

8 
	~<mem/∑gög.h
>

9 
	~<¥oc/¥oc.h
>

10 
	~<°dboﬁ.h
>

11 
	~<öãºu±.h
>

13 
	#STACK_PAGES
 2

	)

19 
	sk∑ge
{

20 
uöt32_t
 
	mty≥
;

21 
uöt32_t
 *
	mvaddr
;

22 
uöt32_t
 
	m«Œoc
;

23 
pid_t
 
	mpid
;

27 
k∑ge
 *
	gk∑ge_li°
;

28 
uöt32_t
 
	g∑ge_Æloc_ödex
;

32 
	$öô_∑Œoc
 ()

35 
size_t
 
poﬁ_size
 = (
k∑ge
Ë* 
PAGE_POOL_SIZE
;

38 
k∑ge_li°
 = (
k∑ge
 *)(
KERNEL_ADDR
);

41 
	`mem£t
((*)
k∑ge_li°
, 0, 
poﬁ_size
);

42 
∑ge_Æloc_ödex
 = 0;

43 
	}
}

47 
uöt32_t
 *

48 
	$∑Œoc_gë_mu…ùÀ
 (
uöt32_t
 
∑ge_ty≥
, 
size_t
 
∑ge_˙t
)

50 *
∑ges
 = 
NULL
;

51 
k∑ge
 *k∑gê
k∑ge_li°
;

52 
i
,
j
;

54 i‡(
∑ge_˙t
 == 0)

55  
NULL
;

57 
∑ge_ty≥
){

58 
HEAP__
:

60 
i
=0;
k∑ge
->
ty≥
!=0&&i<1024;

61 
i
++,
k∑ge
+=(kpage))

62 if(
k∑ge
->
ty≥
 =
FREE__
 && k∑ge->
«Œoc
 =
∑ge_˙t
)

64 i‡(
k∑ge
->
vaddr
>=
VKERNEL_STACK_ADDR
)

65 
∑ges
 = 
k∑ge
->
vaddr
;

69 i‡(
i
 == 1024)

70  
NULL
;

72 
k∑ge
->
ty≥
 = 
HEAP__
;

73 
k∑ge
->
pid
 = 
cur_¥o˚ss
->pid;

75 i‡(
∑ges
 =
NULL
)

77 
∑ges
 = 
	`ø_to_va
(
RKERNEL_HEAP_START
+

78 (
∑ge_Æloc_ödex
+
∑ge_˙t
-1)*
PAGE_SIZE
);

79 
k∑ge
->
vaddr
 = 
∑ges
;

80 
k∑ge
->
«Œoc
 = 
∑ge_˙t
;

81 
∑ge_Æloc_ödex
 +
∑ge_˙t
;

85 
STACK__
:

87 
i
=0;
k∑ge
->
ty≥
!=0 && i<1024;

88 
i
++,
k∑ge
+=(kpage))

89 if(
k∑ge
->
ty≥
 =
FREE__
 && k∑ge->
«Œoc
 =
∑ge_˙t
)

91 i‡(
i
==1024)

92  
NULL
;

93 
k∑ge
->
ty≥
 = 
STACK__
;

94 
k∑ge
->
«Œoc
 = 
∑ge_˙t
;

95 
k∑ge
->
pid
 = 
cur_¥o˚ss
->pid;

96 
k∑ge
->
vaddr
 = 
∑ges
 = (*)
VKERNEL_STACK_ADDR
;

99  
NULL
;

101 i‡(
∑ges
 !
NULL
)

103 i‡(
∑ge_ty≥
 =
HEAP__
)

104 
	`mem£t
(
∑ges
, 0, 
PAGE_SIZE
 * 
∑ge_˙t
);

105 i‡(
∑ge_ty≥
 =
STACK__
)

106 
	`mem£t
(
∑ges
 - 
PAGE_SIZE
*
STACK_PAGES
, 0, PAGE_SIZE*STACK_PAGES);

109  (
uöt32_t
*)
∑ges
;

110 
	}
}

114 
uöt32_t
 *

115 
	$∑Œoc_gë_∑ge
 (
uöt32_t
 
∑ge_ty≥
)

117  
	`∑Œoc_gë_mu…ùÀ
 (
∑ge_ty≥
, 1);

118 
	}
}

122 
	$∑Œoc_‰ì_mu…ùÀ
 (*
∑ges
, 
size_t
 
∑ge_˙t
)

124 
boﬁ
 
found
 = 
Ál£
;

125 
k∑ge
 *k∑gê
k∑ge_li°
;

127 i‡(
∑ges
 =
NULL
 || 
∑ge_˙t
 == 0)

131 
i
=0;
k∑ge
->
ty≥
!=0 && i<1024;i++,kpage+=(kpage))

132 i‡(
k∑ge
->
vaddr
 =
∑ges
 && k∑ge->
«Œoc
 =
∑ge_˙t
)

134 
k∑ge
->
ty≥
 = 
FREE__
;

135 
found
 = 
åue
;

139 i‡(!
found
)

141 
	`¥ötk
("out of bound\n");

144 
	}
}

148 
	$∑Œoc_‰ì_∑ge
 (*
∑ge
)

150 
	`∑Œoc_‰ì_mu…ùÀ
 (
∑ge
, 1);

151 
	}
}

154 
uöt32_t
 *

155 
	$va_to_ø
 (
uöt32_t
 *
va
){

156 i‡(
va
 < 
RKERNEL_HEAP_START
)

157  
va
;

159  
	`VH_TO_RH
(
va
);

160 
	}
}

162 
uöt32_t
 *

163 
	$ø_to_va
 (
uöt32_t
 *
ø
){

164 i‡(
ø
 < 
RKERNEL_HEAP_START
)

165  
ø
;

167  
	`RH_TO_VH
(
ø
);

168 
	}
}

170 
	$∑Œoc_pf_ã°
()

172 
	`¥ötk
("Test start\n");

173 
uöt32_t
 *
⁄e_∑ge1
 = 
	`∑Œoc_gë_∑ge
(
HEAP__
);

174 
uöt32_t
 *
⁄e_∑ge2
 = 
	`∑Œoc_gë_∑ge
(
HEAP__
);

175 
uöt32_t
 *
two_∑ge1
 = 
	`∑Œoc_gë_mu…ùÀ
(
HEAP__
,2);

176 
uöt32_t
 *
thªe_∑ge
;

177 
	`¥ötk
("⁄e_∑ge1 = %x\n", 
⁄e_∑ge1
);

178 
	`¥ötk
("⁄e_∑ge2 = %x\n", 
⁄e_∑ge2
);

179 
	`¥ötk
("two_∑ge1 = %x\n", 
two_∑ge1
);

181 
	`¥ötk
("=----------------------------------=\n");

182 
	`∑Œoc_‰ì_∑ge
(
⁄e_∑ge1
);

183 
	`∑Œoc_‰ì_∑ge
(
⁄e_∑ge2
);

184 
	`∑Œoc_‰ì_mu…ùÀ
(
two_∑ge1
,2);

186 
⁄e_∑ge1
 = 
	`∑Œoc_gë_∑ge
(
HEAP__
);

187 
two_∑ge1
 = 
	`∑Œoc_gë_mu…ùÀ
(
HEAP__
,2);

188 
⁄e_∑ge2
 = 
	`∑Œoc_gë_∑ge
(
HEAP__
);

190 
	`¥ötk
("⁄e_∑ge1 = %x\n", 
⁄e_∑ge1
);

191 
	`¥ötk
("⁄e_∑ge2 = %x\n", 
⁄e_∑ge2
);

192 
	`¥ötk
("two_∑ge1 = %x\n", 
two_∑ge1
);

194 
	`¥ötk
("=----------------------------------=\n");

195 
thªe_∑ge
 = 
	`∑Œoc_gë_mu…ùÀ
(
HEAP__
,3);

197 
	`¥ötk
("thªe_∑gê%x\n", 
thªe_∑ge
);

198 
	`∑Œoc_‰ì_∑ge
(
⁄e_∑ge1
);

199 
	`∑Œoc_‰ì_∑ge
(
⁄e_∑ge2
);

200 
	`∑Œoc_‰ì_mu…ùÀ
(
two_∑ge1
,2);

201 
	`∑Œoc_‰ì_mu…ùÀ
(
thªe_∑ge
, 3);

202 
	}
}

	@proc/proc.c

1 
	~<li°.h
>

2 
	~<¥oc/sched.h
>

3 
	~<mem/mÆloc.h
>

4 
	~<¥oc/¥oc.h
>

5 
	~<ssulib.h
>

6 
	~<öãºu±.h
>

7 
	~<¥oc/sched.h
>

8 
	~<devi˚/c⁄sﬁe.h
>

9 
	~<devi˚/io.h
>

10 
	~<sysˇŒ.h
>

11 
	~<mem/∑gög.h
>

12 
	~<mem/∑Œoc.h
>

13 
	~<°rög.h
>

15 
	#STACK_SIZE
 2048

	)

16 
	#PROC_NUM_MAX
 16

	)

18 
li°
 
	gp_li°
;

19 
li°
 
	gr_li°
;

20 
li°
 
	gs_li°
;

21 
li°
 
	gd_li°
;

23 
¥o˚ss
 
	g¥ocs
[
PROC_NUM_MAX
];

24 
¥o˚ss
 *
	gcur_¥o˚ss
;

25 
	gpid_num_max
;

27 
uöt32_t
 
	g¥o˚ss_°ack_ofs
;

28 
uöt32_t
 *
PID0_PAGE_DIR
;

31 
	glock_pid_sim∂e
;

32 
	gœãly_pid
;

34 
boﬁ
 
m‹e_¥io
(c⁄° 
li°_ñem
 *
a
, c⁄° li°_ñem *
b
,*
aux
);

35 
boﬁ
 
Àss_time_¶ìp
(c⁄° 
li°_ñem
 *
a
, c⁄° li°_ñem *
b
,*
aux
);

36 
pid_t
 
gëVÆidPid
(*
idx
);

38 
¥oc_°¨t
();

39 
¥oc_íd
();

41 
logö_¥om±
(*);

42 
boﬁ
 
check_u£r
(*, *);

43 
shñl_¥oc
(* 
aux
);

46 
	mid
[
BUFSIZ
];

47 
	m∑ssw‹d
[
BUFSIZ
];

48 }
	tu£r_li°
;

50 
u£r_li°
 
	gãmp_li°
 = {"ssuos\n","oslab\n"};

52 
	$lo›_¥oc
(*
aux
)

54 
	`¥ötk
("loop start...\n");

56 
	}
}

58 
	$logö_¥om±
(* 
aux
)

60 
id
[
BUFSIZ
];

61 
∑ssw‹d
[
BUFSIZ
];

65 
	`¥ötk
("\nid : ");

66 
	`gëkbd
(
id
,
BUFSIZ
Ë=
TRUE
);

68 
	`¥ötk
("password : ");

69 
	`gëkbd
(
∑ssw‹d
,
BUFSIZ
Ë=
TRUE
);

71 if(
	`check_u£r
(
id
,
∑ssw‹d
))

72 
	`shñl_¥oc
(
NULL
);

74 
	`¥ötk
("\nincorrect id orÖassword.\n");

76 
	}
}

78 
boﬁ
 
	$check_u£r
(*
id
, *
∑ssw‹d
)

80 i‡(
	`°rcmp
(
ãmp_li°
.
id
,idË|| såcmp—emp_li°.
∑ssw‹d
,∑ssw‹d)Ë 
Ál£
;

81  
åue
;

82 
	}
}

84 
	$öô_¥oc
()

86 
¥o˚ss_°ack_ofs
 = 
	`off£tof
 (
¥o˚ss
, 
°ack
);

88 
lock_pid_sim∂e
 = 0;

89 
œãly_pid
 = -1;

91 
	`li°_öô
(&
p_li°
);

92 
	`li°_öô
(&
r_li°
);

93 
	`li°_öô
(&
s_li°
);

94 
	`li°_öô
(&
d_li°
);

96 
i
;

97 
i
 = 0; i < 
PROC_NUM_MAX
; i++)

99 
¥ocs
[
i
].
pid
 = i;

100 
¥ocs
[
i
].
°©e
 = 
PROC_UNUSED
;

101 
¥ocs
[
i
].
∑ª¡
 = 
NULL
;

104 
pid_t
 
pid
 = 
	`gëVÆidPid
(&
i
);

105 
cur_¥o˚ss
 = &
¥ocs
[
i
];

107 
cur_¥o˚ss
->
pid
 =Öid;

108 
cur_¥o˚ss
->
∑ª¡
 = 
NULL
;

109 
cur_¥o˚ss
->
°©e
 = 
PROC_RUN
;

110 
cur_¥o˚ss
->
¥i‹ôy
 = 0;

111 
cur_¥o˚ss
->
°ack
 = 0;

112 
cur_¥o˚ss
->
pd
 = (*)
	`ªad_¸3
();

113 
cur_¥o˚ss
->
ñem_Æl
.
¥ev
 = 
NULL
;

114 
cur_¥o˚ss
->
ñem_Æl
.
√xt
 = 
NULL
;

115 
cur_¥o˚ss
->
ñem_°©
.
¥ev
 = 
NULL
;

116 
cur_¥o˚ss
->
ñem_°©
.
√xt
 = 
NULL
;

118 
	`li°_push_back
(&
p_li°
, &
cur_¥o˚ss
->
ñem_Æl
);

119 
	`li°_push_back
(&
r_li°
, &
cur_¥o˚ss
->
ñem_°©
);

120 
	}
}

122 
pid_t
 
	$gëVÆidPid
(*
idx
) {

124 
pid_t
 
pid
 = -1;

125 
i
;

127 
lock_pid_sim∂e
)

130 
lock_pid_sim∂e
++;

132 
i
 = 0; i < 
PROC_NUM_MAX
; i++)

134 
tmp
 = 
i
 + 
œãly_pid
 + 1;

135 if(
¥ocs
[
tmp
 % 
PROC_NUM_MAX
].
°©e
 =
PROC_UNUSED
) {

136 
pid
 = 
œãly_pid
 + 1;

137 *
idx
 = 
tmp
 % 
PROC_NUM_MAX
;

142 if(
pid
 != -1)

144 
œãly_pid
 = 
pid
;

147 
lock_pid_sim∂e
 = 0;

149  
pid
;

150 
	}
}

152 
pid_t
 
	$¥oc_¸óã
(
¥oc_func
 
func
, 
¥oc_›ti⁄
 *
›t
, * 
aux
)

154 
¥o˚ss
 *
p
;

155 
idx
;

157 
öå_Àvñ
 
ﬁd_Àvñ
 = 
	`öå_dißbÀ
();

159 
pid_t
 
pid
 = 
	`gëVÆidPid
(&
idx
);

160 
p
 = &
¥ocs
[
idx
];

162 
p
->
pid
 =Öid;

163 
p
->
°©e
 = 
PROC_RUN
;

165 if(
›t
 !
NULL
)

166 
p
->
¥i‹ôy
 = 
›t
->priority;

168 
p
->
¥i‹ôy
 = ()0;

170 
p
->
time_u£d
 = 0;

171 
p
->
time_sched
= 0;

172 
p
->
∑ª¡
 = 
cur_¥o˚ss
;

173 
p
->
sim∂e_lock
 = 0;

174 
p
->
chûd_pid
 = -1;

176 
uöt32_t
 *
°a
;

178 
pid_t
 
tmp_pid
 = 
cur_¥o˚ss
->
pid
;

179 
cur_¥o˚ss
->
pid
 = 
p
->pid;

180 
°a
 = 
	`∑Œoc_gë_mu…ùÀ
(
STACK__
, 2);

181 
cur_¥o˚ss
->
pid
 = 
tmp_pid
;

182 *
t›
 = (*)
°a
;

184 
uöt32_t
 
pdi
, 
±i
;

185 
uöt32_t
 *
±a
, *
pda
 = 
cur_¥o˚ss
->
pd
;

186 
pdi
 = 
	`pde_idx_addr
(
°a
);

187 
±i
 = 
	`±e_idx_addr
(
°a
);

188 i‡(
pda
 =
PID0_PAGE_DIR
)

190 
	`wrôe_¸0
–
	`ªad_¸0
(Ë& ~
CR0_FLAG_PG
);

191 
±a
 = 
	`±_pde
(
pda
[
pdi
]);

192 
	`wrôe_¸0
–
	`ªad_¸0
(Ë| 
CR0_FLAG_PG
);

196 
pda
 = 
	`ø_to_va
(pda);

197 
±a
 = 
	`±_pde
(
pda
[
pdi
]);

199 if(
±a
 =
NULL
)

202 
	`wrôe_¸0
–
	`ªad_¸0
(Ë& ~
CR0_FLAG_PG
);

204 
±a
 = 
	`∑Œoc_gë_∑ge
(
HEAP__
);

205 
±a
 = 
	`va_to_ø
(pta);

206 
	`mem£t
(
±a
,0,
PAGE_SIZE
);

208 
pda
[
pdi
] = (
uöt32_t
)
±a
 | 
PAGE_FLAG_RW
 | 
PAGE_FLAG_PRESENT
;

210 
°a
 = (
uöt32_t
*)((uöt32_t)°®& 
PAGE_MASK_BASE
);

212 
°a
 = 
	`va_to_ø
(sta);

214 
±a
[
±i
] = (
uöt32_t
)
°a
 | 
PAGE_FLAG_RW
 | 
PAGE_FLAG_PRESENT
;

216 
±a
 = 
	`ø_to_va
(pta);

217 
pdi
 = 
	`pde_idx_addr
(
±a
);

218 
±i
 = 
	`±e_idx_addr
(
±a
);

220 
uöt32_t
 *
tmp_±a
 = 
	`±_pde
(
pda
[
pdi
]);

221 
tmp_±a
[
±i
] = (
uöt32_t
)
	`va_to_ø
(
±a
Ë| 
PAGE_FLAG_RW
 | 
PAGE_FLAG_PRESENT
;

223 
	`wrôe_¸0
–
	`ªad_¸0
(Ë| 
CR0_FLAG_PG
);

226 
±a
 = 
	`ø_to_va
(pta);

227 
°a
 = (
uöt32_t
*)((uöt32_t)°®& 
PAGE_MASK_BASE
);

228 
°a
 = 
	`va_to_ø
(sta );

229 
±a
[
±i
] = (
uöt32_t
)
°a
 | 
PAGE_FLAG_RW
 | 
PAGE_FLAG_PRESENT
;

232 
°ack
 = ()(
t›
-1);

234 *(--
t›
Ë()
aux
;

235 *(--
t›
Ë()
¥oc_íd
;

236 *(--
t›
Ë()
func
;

237 *(--
t›
Ë()
¥oc_°¨t
;

239 *(--
t›
Ë
°ack
 ;

240 *(--
t›
) = 1;

241 *(--
t›
) = 2;

242 *(--
t›
) = 3;

243 *(--
t›
) = 4;

244 *(--
t›
) = 5;

245 *(--
t›
) = 6;

247 
p
->
°ack
 = 
t›
;

249 
p
->
pd
 = 
	`pd_¸óã
(
pid
);

251 
p
->
ñem_Æl
.
¥ev
 = 
NULL
;

252 
p
->
ñem_Æl
.
√xt
 = 
NULL
;

253 
p
->
ñem_°©
.
¥ev
 = 
NULL
;

254 
p
->
ñem_°©
.
√xt
 = 
NULL
;

256 
	`li°_push_back
(&
p_li°
, &
p
->
ñem_Æl
);

257 
	`li°_push_back
(&
r_li°
, &
p
->
ñem_°©
);

259 
	`öå_£t_Àvñ
 (
ﬁd_Àvñ
);

260 
	`¥ötk
("proc create done\n");

261  
p
->
pid
;

262 
	}
}

264 * 
	$gëEIP
()

266  
	`__buûtö_ªtu∫_addªss
(0);

267 
	}
}

269 
	$¥oc_°¨t
()

271 
	`öå_íabÀ
 ();

273 
	}
}

275 
	$¥oc_‰ì
()

277 
uöt32_t
 *
pd
 = (uöt32_t*)
cur_¥o˚ss
->pd;

278 
i
;

280 
cur_¥o˚ss
->
∑ª¡
->
chûd_pid
 = cur_¥o˚ss->
pid
;

281 
cur_¥o˚ss
->
∑ª¡
->
sim∂e_lock
 = 0;

283 
	`li°_ªmove
(&
cur_¥o˚ss
->
ñem_°©
);

285 
cur_¥o˚ss
->
°©e
 = 
PROC_ZOMBIE
;

286 
	`li°_push_back
(&
d_li°
, &
cur_¥o˚ss
->
ñem_°©
);

289 
pd
 = 
	`ø_to_va
(pd);

290 
i
=0;i<1024;i++){

291 if(
pd
[
i
] & 
PAGE_FLAG_PRESENT
){

292 
uöt32_t
 *
±
 = (uöt32_t*)(
pd
[
i
] & 
PAGE_MASK_BASE
);

293 
	`∑Œoc_‰ì_∑ge
(
	`ø_to_va
(
±
));

296 
	`∑Œoc_‰ì_∑ge
(
pd
);

297 
	`∑Œoc_‰ì_mu…ùÀ
(
cur_¥o˚ss
->
°ack
,2);

298 
	}
}

300 
	$¥oc_íd
()

302 
	`¥oc_‰ì
();

303 
	`scheduÀ
();

304 
	`¥ötk
("neverÑeach\n");

306 
	}
}

308 
	$¥oc_wake
()

310 
¥o˚ss
* 
p
;

311 
t
 = 
	`gë_ticks
();

313 !
	`li°_em±y
(&
s_li°
))

315 
p
 = 
	`li°_íåy
(
	`li°_‰⁄t
(&
s_li°
), 
¥o˚ss
, 
ñem_°©
);

316 if(
p
->
time_¶ìp
 > 
t
)

318 
p
->
°©e
 = 
PROC_RUN
;

319 
	`li°_ªmove
(&
p
->
ñem_°©
);

321 
	}
}

323 
	$¥oc_¶ìp
(
ticks
)

325 
cur_ticks
 = 
	`gë_ticks
();

326 
cur_¥o˚ss
->
time_¶ìp
 = 
ticks
 + 
cur_ticks
;

327 
cur_¥o˚ss
->
°©e
 = 
PROC_STOP
;

328 
	`li°_ö£π_‹dîed
(&
s_li°
, &
cur_¥o˚ss
->
ñem_°©
,

329 
Àss_time_¶ìp
, 
NULL
);

330 
	`scheduÀ
();

331 
	}
}

333 
	$¥oc_block
()

335 
cur_¥o˚ss
->
°©e
 = 
PROC_BLOCK
;

336 
	`scheduÀ
();

337 
	}
}

339 
	$¥oc_unblock
(
¥o˚ss
* 
¥oc
)

341 
öå_Àvñ
 
ﬁd_Àvñ
;

343 
ﬁd_Àvñ
 = 
	`öå_dißbÀ
();

345 
	`li°_push_back
(&
r_li°
, &
¥oc
->
ñem_°©
);

346 
¥oc
->
°©e
 = 
PROC_RUN
;

348 
	`öå_£t_Àvñ
(
ﬁd_Àvñ
);

349 
	}
}

351 
boﬁ
 
	$Àss_time_¶ìp
(c⁄° 
li°_ñem
 *
a
, c⁄° li°_ñem *
b
,*
aux
)

353 
¥o˚ss
 *
p1
 = 
	`li°_íåy
(
a
, ¥o˚ss, 
ñem_°©
);

354 
¥o˚ss
 *
p2
 = 
	`li°_íåy
(
b
, ¥o˚ss, 
ñem_°©
);

356  
p1
->
time_¶ìp
 < 
p2
->time_sleep;

357 
	}
}

359 
boﬁ
 
	$m‹e_¥io
(c⁄° 
li°_ñem
 *
a
, c⁄° li°_ñem *
b
,*
aux
)

361 
¥o˚ss
 *
p1
 = 
	`li°_íåy
(
a
, ¥o˚ss, 
ñem_°©
);

362 
¥o˚ss
 *
p2
 = 
	`li°_íåy
(
b
, ¥o˚ss, 
ñem_°©
);

363  
p1
->
¥i‹ôy
 > 
p2
->priority;

364 
	}
}

367 
	$kî√l1_¥oc
(* 
aux
)

369 
cur_¥o˚ss
 -> 
¥i‹ôy
 = 200;

372 
	`scheduÀ
();

374 
	}
}

376 
	$kî√l2_¥oc
(* 
aux
)

378 
cur_¥o˚ss
 -> 
¥i‹ôy
 = 200;

381 
	`scheduÀ
();

383 
	}
}

385 
	$ps_¥oc
(* 
aux
)

387 
i
;

388 
i
 = 0; i<
PROC_NUM_MAX
; i++)

390 
¥o˚ss
 *
p
 = &
¥ocs
[
i
];

392 if(
p
->
°©e
 =
PROC_UNUSED
)

395 
	`¥ötk
("pid %dÖpid ", 
p
->
pid
);

397 if(
p
->
∑ª¡
 !
NULL
)

398 
	`¥ötk
("%d", 
p
->
∑ª¡
->
pid
);

400 
	`¥ötk
("non");

402 
	`¥ötk
(" state %dÖrio %d usingÅime %d schedÅime %d",

403 
p
->
°©e
,Ö->
¥i‹ôy
,Ö->
time_u£d
,Ö->
time_sched
);

404 
	`¥ötk
(",Öd = %x\n", 
p
->
pd
);

407 
	`exô
(1);

408 
	}
}

410 c⁄° * 
VERSION
;

411 c⁄° * 
AUTHOR
;

412 c⁄° * 
MODIFIER
;

413 
	$u«me_¥oc
(* 
aux
)

415 
	`¥ötk
("SSUOS %s\nmadêby %s\nmodefõd by %s\n", 
VERSION
, 
AUTHOR
, 
MODIFIER
);

417 
	}
}

419 
	$¥öt_pid
(* 
aux
) {

422 
	`¥ötk
("pid = %d ", 
cur_¥o˚ss
->
pid
);

423 
	`¥ötk
("¥iÿ%d ", 
cur_¥o˚ss
->
¥i‹ôy
);

424 
	`¥ötk
("timê%d ", 
cur_¥o˚ss
->
time_¶i˚
);

425 
	`¥ötk
("tick†%d ", 
	`gë_ticks
());

426 
	`¥ötk
("ö %s\n", 
aux
);

428 
	#SLEEP_FREQ
 100

	)

429 
	`¥oc_¶ìp
(
cur_¥o˚ss
->
pid
 * cur_¥o˚ss->pid * 
SLEEP_FREQ
);

431 
	}
}

435 * 
	mcmd
;

436 
	mty≥
;

437 * 
	mfunc
;

438 } 
	tCmdLi°
;

440 
	$shñl_¥oc
(* 
aux
)

442 
	`¥ötk
("shñ»¥o¯°ack : %x\¿", 
cur_¥o˚ss
->
°ack
);

447 
CmdLi°
 
cmdli°
[] = {

448 {"shutdown", 0, 
shutdown
},

449 {"ps", 1, 
ps_¥oc
},

450 {"u«me", 1, 
u«me_¥oc
},

452 
	#CMDNUM
 3

	)

453 
	#TOKNUM
 10

	)

454 
buf
[
BUFSIZ
];

455 
tokí
[
TOKNUM
][
BUFSIZ
];

456 
tokí_num
;

458 
cur_¥o˚ss
 -> 
¥i‹ôy
 = 100;

462 
¥oc_func
 *
func
;

463 
i
, 
Àn
;

465 
	`¥ötk
("> ");

467 
	`gëkbd
(
buf
,
BUFSIZ
))

472 
i
=0;
buf
[i] != '\n'; i++);

473 
i
--; 
buf
[i] == ' '; i--)

474 
buf
[
i
] = 0;

476 
tokí_num
 = 
	`gëTokí
(
buf
,
tokí
,
TOKNUM
);

478 if–
	`°rcmp
(
tokí
[0], "exit") == 0)

481 if–
	`°∫cmp
(
tokí
[0], "li°", 
BUFSIZ
) == 0)

483 
i
 = 0; i < 
CMDNUM
; i++)

484 
	`¥ötk
("%s\n", 
cmdli°
[
i
].
cmd
);

488 
i
 = 0; i < 
CMDNUM
; i++)

490 if–
	`°∫cmp
(
cmdli°
[
i
].
cmd
, 
tokí
[0], 
BUFSIZ
) == 0)

494 if(
i
 =
CMDNUM
)

496 
	`¥ötk
("Unknow¿comm™d %s\n", 
buf
);

500 if(
cmdli°
[
i
].
ty≥
 == 0)

502 (*
func
)();

503 
func
 = 
cmdli°
[
i
].func;

504 
	`func
();

506 if(
cmdli°
[
i
].
ty≥
 == 1)

508 
cur_¥o˚ss
->
sim∂e_lock
 = 1;

509 
pid
 = 
	`f‹k
(
cmdli°
[
i
].
func
, (*)0x999);

511 
cur_¥o˚ss
->
sim∂e_lock
)

516 
	`¥ötk
("UnknownÅype\n");

520 
	}
}

522 
	$idÀ
(* 
aux
)

525 
	`¥oc_¸óã
(
kî√l1_¥oc
, 
NULL
, NULL);

526 
	`¥oc_¸óã
(
kî√l2_¥oc
, 
NULL
, NULL);

527 
	`¥oc_¸óã
(
logö_¥om±
,
NULL
,NULL);

530 if(
cur_¥o˚ss
->
pid
 != 0) {

531 
	`¥ötk
("îr‹ : idÀÖro˚ss'†pid !0\n", 
cur_¥o˚ss
->
pid
);

535  !
	`li°_em±y
(&
d_li°
) )

537 
li°_ñem
 *
e
 = 
	`li°_p›_‰⁄t
(&
d_li°
);

538 
¥o˚ss
 *
p
 = 
	`li°_íåy
(
e
, ¥o˚ss, 
ñem_°©
);

539 
p
->
°©e
 = 
PROC_UNUSED
;

540 
	`li°_ªmove
–&
p
->
ñem_Æl
);

543 
	`scheduÀ
();

545 
	}
}

547 
	$¥oc_¥öt_d©a
()

549 
a
, 
b
, 
c
, 
d
, 
bp
, 
si
, 
di
, 
•
;

552 
__asm__
 
	`__vﬁ©ûe
("mov %%óx ,%0": "=m"(
a
));

554 
__asm__
 
	`__vﬁ©ûe
("mov %ebx ,%eax");

555 
__asm__
 
	`__vﬁ©ûe
("mov %%óx ,%0": "=m"(
b
));

557 
__asm__
 
	`__vﬁ©ûe
("mov %ecx ,%eax");

558 
__asm__
 
	`__vﬁ©ûe
("mov %%óx ,%0": "=m"(
c
));

560 
__asm__
 
	`__vﬁ©ûe
("mov %edx ,%eax");

561 
__asm__
 
	`__vﬁ©ûe
("mov %%óx ,%0": "=m"(
d
));

564 
__asm__
 
	`__vﬁ©ûe
("mov %ebp ,%eax");

565 
__asm__
 
	`__vﬁ©ûe
("mov %%óx ,%0": "=m"(
bp
));

567 
__asm__
 
	`__vﬁ©ûe
("mov %esi ,%eax");

568 
__asm__
 
	`__vﬁ©ûe
("mov %%óx ,%0": "=m"(
si
));

570 
__asm__
 
	`__vﬁ©ûe
("mov %edi ,%eax");

571 
__asm__
 
	`__vﬁ©ûe
("mov %%óx ,%0": "=m"(
di
));

573 
__asm__
 
	`__vﬁ©ûe
("mov %esp ,%eax");

574 
__asm__
 
	`__vﬁ©ûe
("mov %%óx ,%0": "=m"(
•
));

576 
	`¥ötk
( "\neax %oÉbx %oÉcx %oÉdx %o"\

578 , 
a
, 
b
, 
c
, 
d
, 
bp
, 
si
, 
di
, 
•
);

579 
	}
}

581 
	$hexDump
 (*
addr
, 
Àn
) {

582 
i
;

583 
buff
[17];

584 *
pc
 = (*)
addr
;

586 i‡(
Àn
 == 0) {

587 
	`¥ötk
(" ZERO LENGTH\n");

590 i‡(
Àn
 < 0) {

591 
	`¥ötk
(" NEGATIVE LENGTH: %i\n",
Àn
);

595 
i
 = 0; i < 
Àn
; i++) {

597 i‡((
i
 % 16) == 0) {

598 i‡(
i
 != 0)

599 
	`¥ötk
 (" %s\n", 
buff
);

601 
	`¥ötk
 (" %04x ", 
i
);

604 
	`¥ötk
 (" %02x", 
pc
[
i
]);

606 i‡((
pc
[
i
] < 0x20) || (pc[i] > 0x7e))

607 
buff
[
i
 % 16] = '.';

609 
buff
[
i
 % 16] = 
pc
[i];

610 
buff
[(
i
 % 16) + 1] = '\0';

613 (
i
 % 16) != 0) {

614 
	`¥ötk
 (" ");

615 
i
++;

618 
	`¥ötk
 (" %s\n", 
buff
);

619 
	}
}

	@proc/sched.c

1 
	~<li°.h
>

2 
	~<¥oc/sched.h
>

3 
	~<mem/mÆloc.h
>

4 
	~<¥oc/¥oc.h
>

5 
	~<¥oc/swôch.h
>

7 
li°
 
r_li°
;

9 
boﬁ
 
m‹e_¥io
(c⁄° 
li°_ñem
 *
a
, c⁄° li°_ñem *
b
,*
aux
);

11 
¥o˚ss
* 
	$gë_√xt_¥oc
() {

13 
li°_ñem
 *
e
;

15 if(
cur_¥o˚ss
->
°©e
 =
PROC_RUN
)

17 
	`li°_ªmove
(&
cur_¥o˚ss
->
ñem_°©
);

18 
	`li°_push_back
(&
r_li°
, &
cur_¥o˚ss
->
ñem_°©
);

21 
e
 = 
	`li°_begö
 (&
r_li°
);É !
	`li°_íd
 (&r_list);

22 
e
 = 
	`li°_√xt
 (e))

24 
¥o˚ss
* 
p
 = 
	`li°_íåy
(
	`li°_‰⁄t
(&
r_li°
), ¥o˚ss, 
ñem_°©
);

25 if(
p
->
°©e
 =
PROC_RUN
)

26  
p
;

28  
cur_¥o˚ss
;

29 
	}
}

31 
	$scheduÀ
()

33 
¥o˚ss
 *
cur
;

34 
¥o˚ss
 *
√xt
;

36 
	`¥oc_wake
();

38 
√xt
 = 
	`gë_√xt_¥oc
();

39 
cur
 = 
cur_¥o˚ss
;

40 
cur_¥o˚ss
 = 
√xt
;

41 
cur_¥o˚ss
->
time_sched
++;

42 
cur_¥o˚ss
->
time_¶i˚
 = 0;

44 
	`swôch_¥o˚ss
(
cur
, 
√xt
);

45 
	}
}

	@ssulib.c

1 
	~<ssulib.h
>

2 
	~<devi˚/c⁄sﬁe.h
>

3 
	~<devi˚/io.h
>

4 
	~<sysˇŒ.h
>

7 
	$°∫cmp
(* 
b1
, * 
b2
, 
Àn
)

9 
i
;

11 
i
 = 0; i < 
Àn
; i++)

13 
c
 = 
b1
[
i
] - 
b2
[i];

14 if(
c
)

15  
c
;

16 if(
b1
[
i
] == 0)

20 
	}
}

22 
boﬁ
 
	$gëkbd
(*
buf
, 
Àn
)

24 
ch
;

25 
off£t
 = 0;

27 
Àn
--;

29 ; 
off£t
 < 
Àn
 && 
buf
[offset] != 0; offset++)

30 if(
buf
[
off£t
] == '\n')

32 ;
off£t
>=0;offset--)

33 
buf
[
off£t
] = 0;

34 
off£t
++;

38  (
ch
 = 
	`ssuªad
()) >= 0)

40 if(
ch
 ='\b' && 
off£t
 == 0)

42 
	`£t_curs‹
();

45 
	`¥ötk
("%c",
ch
);

46 
	`£t_curs‹
();

47 i‡(
ch
 == '\b')

49 
buf
[
off£t
-1] = 0;

50 
off£t
--;

52 i‡(
ch
 == '\n')

54 
buf
[
off£t
] = 
ch
;

55  
FALSE
;

59 
buf
[
off£t
] = 
ch
;

60 
off£t
++;

62 if(
off£t
 =
Àn
) offset--;

65  
TRUE
;

66 
	}
}

68 
	$gëTokí
(* 
buf
, 
tokí
[][
BUFSIZ
], 
max_tok
)

70 
num_tok
 = 0;

71 
off_tok
 = 0;

72 
num_tok
 < 
max_tok
 && *
buf
 != '\n')

74 if(*
buf
 == ' ')

76 
tokí
[
num_tok
][
off_tok
] = 0;

77 *
buf
 == ' ') buf++;

78 
off_tok
 = 0;

79 
num_tok
++;

83 
tokí
[
num_tok
][
off_tok
] = *
buf
;

84 
off_tok
++;

85 
buf
++;

88 
tokí
[
num_tok
][
off_tok
] = 0;

89 
num_tok
++;

91  
num_tok
;

92 
	}
}

	@stdio.c

1 
	~<°dio.h
>

2 
	~<˘y≥.h
>

3 
	~<öây≥s.h
>

4 
	~<round.h
>

5 
	~<°döt.h
>

6 
	~<°rög.h
>

9 
	sv¢¥ötf_aux


11 *
	mp
;

12 
	mÀngth
;

13 
	mmax_Àngth
;

16 
v¢¥ötf_hñ≥r
 (, *);

26 
	$v¢¥ötf
 (*
buf„r
, 
size_t
 
buf_size
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

29 
v¢¥ötf_aux
 
aux
;

30 
aux
.
p
 = 
buf„r
;

31 
aux
.
Àngth
 = 0;

32 
aux
.
max_Àngth
 = 
buf_size
 > 0 ? buf_size - 1 : 0;

35 
	`__v¥ötf
 (
f‹m©
, 
¨gs
, 
v¢¥ötf_hñ≥r
, &
aux
);

38 i‡(
buf_size
 > 0)

39 *
aux
.
p
 = '\0';

41  
aux
.
Àngth
;

42 
	}
}

46 
	$v¢¥ötf_hñ≥r
 (
ch
, *
aux_
)

48 
v¢¥ötf_aux
 *
aux
 = 
aux_
;

50 i‡(
aux
->
Àngth
++ <áux->
max_Àngth
)

51 *
aux
->
p
++ = 
ch
;

52 
	}
}

62 
	$¢¥ötf
 (*
buf„r
, 
size_t
 
buf_size
, c⁄° *
f‹m©
, ...)

64 
va_li°
 
¨gs
;

65 
ªtvÆ
;

67 
	`va_°¨t
 (
¨gs
, 
f‹m©
);

68 
ªtvÆ
 = 
	`v¢¥ötf
 (
buf„r
, 
buf_size
, 
f‹m©
, 
¨gs
);

69 
	`va_íd
 (
¨gs
);

71  
ªtvÆ
;

72 
	}
}

79 
	$¥ötf
 (c⁄° *
f‹m©
, ...)

82 
ªtvÆ
;

88  
ªtvÆ
;

89 
	}
}

94 
	s¥ötf_c⁄vîsi⁄


99 
	mMINUS
 = 1 << 0,

100 
	mPLUS
 = 1 << 1,

101 
	mSPACE
 = 1 << 2,

102 
	mPOUND
 = 1 << 3,

103 
	mZERO
 = 1 << 4,

104 
	mGROUP
 = 1 << 5

106 
	mÊags
;

109 
	mwidth
;

113 
	m¥ecisi⁄
;

118 
	mCHAR
 = 1,

119 
	mSHORT
 = 2,

120 
	mINT
 = 3,

121 
	mINTMAX
 = 4,

122 
	mLONG
 = 5,

123 
	mLONGLONG
 = 6,

124 
	mPTRDIFFT
 = 7,

125 
	mSIZET
 = 8

127 
	mty≥
;

130 
	söãgî_ba£


132 
	mba£
;

133 c⁄° *
	mdigôs
;

134 
	mx
;

135 
	mgroup
;

138 c⁄° 
öãgî_ba£
 
	gba£_d
 = {10, "0123456789", 0, 3};

139 c⁄° 
öãgî_ba£
 
	gba£_o
 = {8, "01234567", 0, 3};

140 c⁄° 
öãgî_ba£
 
	gba£_x
 = {16, "0123456789abcdef", 'x', 4};

141 c⁄° 
öãgî_ba£
 
	gba£_X
 = {16, "0123456789ABCDEF", 'X', 4};

143 c⁄° *
∑r£_c⁄vîsi⁄
 (c⁄° *
f‹m©
,

144 
¥ötf_c⁄vîsi⁄
 *,

145 
va_li°
 *);

146 
f‹m©_öãgî
 (
vÆue
, 
boﬁ
 
is_sig√d
, boﬁ 
√g©ive
,

147 c⁄° 
öãgî_ba£
 *,

148 c⁄° 
¥ötf_c⁄vîsi⁄
 *,

149 (*
ouçut
Ë(, *), *
aux
);

150 
	`ouçut_dup
 (
ch
, 
size_t
 
˙t
,

151 (*
ouçut
Ë(, *), *
aux
);

152 
	`f‹m©_°rög
 (c⁄° *
°rög
, 
Àngth
,

153 
¥ötf_c⁄vîsi⁄
 *,

154 (*
ouçut
Ë(, *), *
aux
);

157 
	$__v¥ötf
 (c⁄° *
f‹m©
, 
va_li°
 
¨gs
,

158 (*
ouçut
Ë(, *), *
aux
)

160 ; *
f‹m©
 != '\0'; format++)

162 
¥ötf_c⁄vîsi⁄
 
c
;

165 i‡(*
f‹m©
 != '%')

167 
	`ouçut
 (*
f‹m©
, 
aux
);

170 
f‹m©
++;

173 i‡(*
f‹m©
 == '%')

175 
	`ouçut
 ('%', 
aux
);

180 
f‹m©
 = 
	`∑r£_c⁄vîsi⁄
 (f‹m©, &
c
, &
¨gs
);

183 *
f‹m©
)

189 
ötmax_t
 
vÆue
;

191 
c
.
ty≥
)

193 
CHAR
:

194 
vÆue
 = (sig√d Ë
	`va_¨g
 (
¨gs
, );

196 
SHORT
:

197 
vÆue
 = (Ë
	`va_¨g
 (
¨gs
, );

199 
INT
:

200 
vÆue
 = 
	`va_¨g
 (
¨gs
, );

202 
INTMAX
:

203 
vÆue
 = 
	`va_¨g
 (
¨gs
, 
ötmax_t
);

205 
LONG
:

206 
vÆue
 = 
	`va_¨g
 (
¨gs
, );

208 
LONGLONG
:

209 
vÆue
 = 
	`va_¨g
 (
¨gs
, );

211 
PTRDIFFT
:

212 
vÆue
 = 
	`va_¨g
 (
¨gs
, 
±rdiff_t
);

214 
SIZET
:

215 
vÆue
 = 
	`va_¨g
 (
¨gs
, 
size_t
);

216 i‡(
vÆue
 > 
SIZE_MAX
 / 2)

217 
vÆue
 = vÆuê- 
SIZE_MAX
 - 1;

223 
	`f‹m©_öãgî
 (
vÆue
 < 0 ? -value : value,

224 
åue
, 
vÆue
 < 0, &
ba£_d
, &
c
, 
ouçut
, 
aux
);

234 
uötmax_t
 
vÆue
;

235 c⁄° 
öãgî_ba£
 *
b
;

237 
c
.
ty≥
)

239 
CHAR
:

240 
vÆue
 = (Ë
	`va_¨g
 (
¨gs
, );

242 
SHORT
:

243 
vÆue
 = (Ë
	`va_¨g
 (
¨gs
, );

245 
INT
:

246 
vÆue
 = 
	`va_¨g
 (
¨gs
, );

248 
INTMAX
:

249 
vÆue
 = 
	`va_¨g
 (
¨gs
, 
uötmax_t
);

251 
LONG
:

252 
vÆue
 = 
	`va_¨g
 (
¨gs
, );

254 
LONGLONG
:

255 
vÆue
 = 
	`va_¨g
 (
¨gs
, );

257 
PTRDIFFT
:

258 
vÆue
 = 
	`va_¨g
 (
¨gs
, 
±rdiff_t
);

259 #i‡
UINTMAX_MAX
 !
PTRDIFF_MAX


260 
vÆue
 &((
uötmax_t
Ë
PTRDIFF_MAX
 << 1) | 1;

263 
SIZET
:

264 
vÆue
 = 
	`va_¨g
 (
¨gs
, 
size_t
);

270 *
f‹m©
)

272 'o': 
b
 = &
ba£_o
; ;

273 'u': 
b
 = &
ba£_d
; ;

274 'x': 
b
 = &
ba£_x
; ;

275 'X': 
b
 = &
ba£_X
; ;

280 
	`f‹m©_öãgî
 (
vÆue
, 
Ál£
, fÆ£, 
b
, &
c
, 
ouçut
, 
aux
);

287 
ch
 = 
	`va_¨g
 (
¨gs
, );

288 
	`f‹m©_°rög
 (&
ch
, 1, &
c
, 
ouçut
, 
aux
);

295 c⁄° *
s
 = 
	`va_¨g
 (
¨gs
, *);

296 i‡(
s
 =
NULL
)

297 
s
 = "(null)";

302 
	`f‹m©_°rög
 (
s
, 
	`°∫Àn
 (s, 
c
.
¥ecisi⁄
), &c, 
ouçut
, 
aux
);

310 *
p
 = 
	`va_¨g
 (
¨gs
, *);

312 
c
.
Êags
 = 
POUND
;

313 
	`f‹m©_öãgî
 ((
uöçå_t
Ë
p
, 
Ál£
, false,

314 &
ba£_x
, &
c
, 
ouçut
, 
aux
);

326 
	`__¥ötf
 ("<<nÿ%%%¯ö kî√l>>", 
ouçut
, 
aux
, *
f‹m©
);

330 
	`__¥ötf
 ("<<nÿ%%%¯c⁄vîsi⁄>>", 
ouçut
, 
aux
, *
f‹m©
);

334 
	}
}

341 
	$∑r£_c⁄vîsi⁄
 (c⁄° *
f‹m©
, 
¥ötf_c⁄vîsi⁄
 *
c
,

342 
va_li°
 *
¨gs
)

345 
c
->
Êags
 = 0;

348 *
f‹m©
++)

351 
c
->
Êags
 |
MINUS
;

354 
c
->
Êags
 |
PLUS
;

357 
c
->
Êags
 |
SPACE
;

360 
c
->
Êags
 |
POUND
;

363 
c
->
Êags
 |
ZERO
;

366 
c
->
Êags
 |
GROUP
;

369 
f‹m©
--;

370 
nŸ_a_Êag
;

373 
nŸ_a_Êag
:

374 i‡(
c
->
Êags
 & 
MINUS
)

375 
c
->
Êags
 &~
ZERO
;

376 i‡(
c
->
Êags
 & 
PLUS
)

377 
c
->
Êags
 &~
SPACE
;

380 
c
->
width
 = 0;

381 i‡(*
f‹m©
 == '*')

383 
f‹m©
++;

384 
c
->
width
 = 
	`va_¨g
 (*
¨gs
, );

388 ; 
	`isdigô
 (*
f‹m©
); format++)

389 
c
->
width
 = c->width * 10 + *
f‹m©
 - '0';

391 i‡(
c
->
width
 < 0)

393 
c
->
width
 = -c->width;

394 
c
->
Êags
 |
MINUS
;

398 
c
->
¥ecisi⁄
 = -1;

399 i‡(*
f‹m©
 == '.')

401 
f‹m©
++;

402 i‡(*
f‹m©
 == '*')

404 
f‹m©
++;

405 
c
->
¥ecisi⁄
 = 
	`va_¨g
 (*
¨gs
, );

409 
c
->
¥ecisi⁄
 = 0;

410 ; 
	`isdigô
 (*
f‹m©
); format++)

411 
c
->
¥ecisi⁄
 = c->¥ecisi⁄ * 10 + *
f‹m©
 - '0';

413 i‡(
c
->
¥ecisi⁄
 < 0)

414 
c
->
¥ecisi⁄
 = -1;

416 i‡(
c
->
¥ecisi⁄
 >= 0)

417 
c
->
Êags
 &~
ZERO
;

420 
c
->
ty≥
 = 
INT
;

421 *
f‹m©
++)

424 i‡(*
f‹m©
 == 'h')

426 
f‹m©
++;

427 
c
->
ty≥
 = 
CHAR
;

430 
c
->
ty≥
 = 
SHORT
;

434 
c
->
ty≥
 = 
INTMAX
;

438 i‡(*
f‹m©
 == 'l')

440 
f‹m©
++;

441 
c
->
ty≥
 = 
LONGLONG
;

444 
c
->
ty≥
 = 
LONG
;

448 
c
->
ty≥
 = 
PTRDIFFT
;

452 
c
->
ty≥
 = 
SIZET
;

456 
f‹m©
--;

460  
f‹m©
;

461 
	}
}

471 
	$f‹m©_öãgî
 (
vÆue
, 
boﬁ
 
is_sig√d
, boﬁ 
√g©ive
,

472 c⁄° 
öãgî_ba£
 *
b
,

473 c⁄° 
¥ötf_c⁄vîsi⁄
 *
c
,

474 (*
ouçut
Ë(, *), *
aux
)

476 
buf
[64], *
˝
;

477 
x
;

478 
sign
;

479 
¥ecisi⁄
;

480 
∑d_˙t
;

481 
digô_˙t
;

486 
sign
 = 0;

487 i‡(
is_sig√d
)

489 i‡(
c
->
Êags
 & 
PLUS
)

490 
sign
 = 
√g©ive
 ? '-' : '+';

491 i‡(
c
->
Êags
 & 
SPACE
)

492 
sign
 = 
√g©ive
 ? '-' : ' ';

493 i‡(
√g©ive
)

494 
sign
 = '-';

500 
x
 = (
c
->
Êags
 & 
POUND
Ë&& 
vÆue
 ? 
b
->x : 0;

505 
˝
 = 
buf
;

506 
digô_˙t
 = 0;

507 
vÆue
 > 0)

509 i‡((
c
->
Êags
 & 
GROUP
Ë&& 
digô_˙t
 > 0 && digô_˙à% 
b
->
group
 == 0)

510 *
˝
++ = ',';

511 *
˝
++ = 
b
->
digôs
[
vÆue
 % b->
ba£
];

512 
vÆue
 /
b
->
ba£
;

513 
digô_˙t
++;

521 
¥ecisi⁄
 = 
c
->precision < 0 ? 1 : c->precision;

522 
˝
 - 
buf
 < 
¥ecisi⁄
 && cp < buf +  buf - 1)

523 *
˝
++ = '0';

524 i‡((
c
->
Êags
 & 
POUND
Ë&& 
b
->
ba£
 =8 && (
˝
 =
buf
 || cp[-1] != '0'))

525 *
˝
++ = '0';

528 
∑d_˙t
 = 
c
->
width
 - (
˝
 - 
buf
Ë- (
x
 ? 2 : 0Ë- (
sign
 != 0);

529 i‡(
∑d_˙t
 < 0)

530 
∑d_˙t
 = 0;

533 i‡((
c
->
Êags
 & (
MINUS
 | 
ZERO
)) == 0)

534 
	`ouçut_dup
 (' ', 
∑d_˙t
, 
ouçut
, 
aux
);

535 i‡(
sign
)

536 
	`ouçut
 (
sign
, 
aux
);

537 i‡(
x
)

539 
	`ouçut
 ('0', 
aux
);

540 
	`ouçut
 (
x
, 
aux
);

542 i‡(
c
->
Êags
 & 
ZERO
)

543 
	`ouçut_dup
 ('0', 
∑d_˙t
, 
ouçut
, 
aux
);

544 
˝
 > 
buf
)

545 
	`ouçut
 (*--
˝
, 
aux
);

546 i‡(
c
->
Êags
 & 
MINUS
)

547 
	`ouçut_dup
 (' ', 
∑d_˙t
, 
ouçut
, 
aux
);

548 
	}
}

552 
	$ouçut_dup
 (
ch
, 
size_t
 
˙t
, (*
ouçut
Ë(, *), *
aux
)

554 
˙t
-- > 0)

555 
	`ouçut
 (
ch
, 
aux
);

556 
	}
}

562 
	$f‹m©_°rög
 (c⁄° *
°rög
, 
Àngth
,

563 
¥ötf_c⁄vîsi⁄
 *
c
,

564 (*
ouçut
Ë(, *), *
aux
)

566 
i
;

567 i‡(
c
->
width
 > 
Àngth
 && (c->
Êags
 & 
MINUS
) == 0)

568 
	`ouçut_dup
 (' ', 
c
->
width
 - 
Àngth
, 
ouçut
, 
aux
);

569 
i
 = 0; i < 
Àngth
; i++)

570 
	`ouçut
 (
°rög
[
i
], 
aux
);

571 i‡(
c
->
width
 > 
Àngth
 && (c->
Êags
 & 
MINUS
) != 0)

572 
	`ouçut_dup
 (' ', 
c
->
width
 - 
Àngth
, 
ouçut
, 
aux
);

573 
	}
}

578 
	$__¥ötf
 (c⁄° *
f‹m©
,

579 (*
ouçut
Ë(, *), *
aux
, ...)

581 
va_li°
 
¨gs
;

583 
	`va_°¨t
 (
¨gs
, 
aux
);

584 
	`__v¥ötf
 (
f‹m©
, 
¨gs
, 
ouçut
, 
aux
);

585 
	`va_íd
 (
¨gs
);

586 
	}
}

594 
	$hex_dump
 (
uöçå_t
 
ofs
, c⁄° *
buf_
, 
size_t
 
size
, 
boﬁ
 
ascii
)

596 c⁄° 
uöt8_t
 *
buf
 = 
buf_
;

597 c⁄° 
size_t
 
≥r_löe
 = 16;

599 
size
 > 0)

601 
size_t
 
°¨t
, 
íd
, 
n
;

602 
size_t
 
i
;

605 
°¨t
 = 
ofs
 % 
≥r_löe
;

606 
íd
 = 
≥r_löe
;

607 i‡(
íd
 - 
°¨t
 > 
size
)

608 
íd
 = 
°¨t
 + 
size
;

609 
n
 = 
íd
 - 
°¨t
;

612 
	`¥ötf
 ("%08jx ", (
uötmax_t
Ë
	`ROUND_DOWN
 (
ofs
, 
≥r_löe
));

613 
i
 = 0; i < 
°¨t
; i++)

614 
	`¥ötf
 (" ");

615 ; 
i
 < 
íd
; i++)

616 
	`¥ötf
 ("%02hhx%c",

617 
buf
[
i
 - 
°¨t
], i =
≥r_löe
 / 2 - 1? '-' : ' ');

618 i‡(
ascii
)

620 ; 
i
 < 
≥r_löe
; i++)

621 
	`¥ötf
 (" ");

622 
	`¥ötf
 ("|");

623 
i
 = 0; i < 
°¨t
; i++)

624 
	`¥ötf
 (" ");

625 ; 
i
 < 
íd
; i++)

626 
	`¥ötf
 ("%c",

627 
	`i•röt
 (
buf
[
i
 - 
°¨t
]) ? buf[i - start] : '.');

628 ; 
i
 < 
≥r_löe
; i++)

629 
	`¥ötf
 (" ");

630 
	`¥ötf
 ("|");

632 
	`¥ötf
 ("\n");

634 
ofs
 +
n
;

635 
buf
 +
n
;

636 
size
 -
n
;

638 
	}
}

643 
	$¥öt_hum™_ªadabÀ_size
 (
uöt64_t
 
size
)

645 i‡(
size
 == 1)

646 
	`¥ötf
 ("1 byte");

649 c⁄° *
Á˘‹s
[] = {"byãs", "kB", "MB", "GB", "TB", 
NULL
};

650 c⁄° **
Â
;

652 
Â
 = 
Á˘‹s
; 
size
 >1024 && fp[1] !
NULL
; fp++)

653 
size
 /= 1024;

654 
	`¥ötf
 ("%"
PRIu64
" %s", 
size
, *
Â
);

656 
	}
}

	@string.c

1 
	~<°rög.h
>

2 
	~<debug.h
>

3 
	~<ty≥.h
>

8 
	$mem˝y
 (*
d°_
, c⁄° *
§c_
, 
size_t
 
size
)

10 *
d°
 = 
d°_
;

11 c⁄° *
§c
 = 
§c_
;

16 
size
-- > 0)

17 *
d°
++ = *
§c
++;

19  
d°_
;

20 
	}
}

25 
	$memmove
 (*
d°_
, c⁄° *
§c_
, 
size_t
 
size
)

27 *
d°
 = 
d°_
;

28 c⁄° *
§c
 = 
§c_
;

33 i‡(
d°
 < 
§c
)

35 
size
-- > 0)

36 *
d°
++ = *
§c
++;

40 
d°
 +
size
;

41 
§c
 +
size
;

42 
size
-- > 0)

43 *--
d°
 = *--
§c
;

46  
d°
;

47 
	}
}

54 
	$memcmp
 (c⁄° *
a_
, c⁄° *
b_
, 
size_t
 
size
)

56 c⁄° *
a
 = 
a_
;

57 c⁄° *
b
 = 
b_
;

62 ; 
size
-- > 0; 
a
++, 
b
++)

63 i‡(*
a
 !*
b
)

64  *
a
 > *
b
 ? +1 : -1;

66 
	}
}

74 
	$°rcmp
 (c⁄° *
a_
, c⁄° *
b_
)

76 c⁄° *
a
 = (c⁄° *Ë
a_
;

77 c⁄° *
b
 = (c⁄° *Ë
b_
;

82 *
a
 !'\0' && *®=*
b
)

84 
a
++;

85 
b
++;

88  *
a
 < *
b
 ? -1 : *a > *b;

89 
	}
}

95 
	$memchr
 (c⁄° *
block_
, 
ch_
, 
size_t
 
size
)

97 c⁄° *
block
 = 
block_
;

98 
ch
 = 
ch_
;

102 ; 
size
-- > 0; 
block
++)

103 i‡(*
block
 =
ch
)

104  (*Ë
block
;

106  
NULL
;

107 
	}
}

114 
	$°rchr
 (c⁄° *
°rög
, 
c_
)

116 
c
 = 
c_
;

121 i‡(*
°rög
 =
c
)

122  (*Ë
°rög
;

123 i‡(*
°rög
 == '\0')

124  
NULL
;

126 
°rög
++;

127 
	}
}

131 
size_t


132 
	$°rc•n
 (c⁄° *
°rög
, c⁄° *
°›
)

134 
size_t
 
Àngth
;

136 
Àngth
 = 0; 
°rög
[length] != '\0';Üength++)

137 i‡(
	`°rchr
 (
°›
, 
°rög
[
Àngth
]Ë!
NULL
)

139  
Àngth
;

140 
	}
}

146 
	$°Ωbrk
 (c⁄° *
°rög
, c⁄° *
°›
)

148 ; *
°rög
 != '\0'; string++)

149 i‡(
	`°rchr
 (
°›
, *
°rög
Ë!
NULL
)

150  (*Ë
°rög
;

151  
NULL
;

152 
	}
}

157 
	$°ºchr
 (c⁄° *
°rög
, 
c_
)

159 
c
 = 
c_
;

160 c⁄° *
p
 = 
NULL
;

162 ; *
°rög
 != '\0'; string++)

163 i‡(*
°rög
 =
c
)

164 
p
 = 
°rög
;

165  (*Ë
p
;

166 
	}
}

170 
size_t


171 
	$°r•n
 (c⁄° *
°rög
, c⁄° *
skù
)

173 
size_t
 
Àngth
;

175 
Àngth
 = 0; 
°rög
[length] != '\0';Üength++)

176 i‡(
	`°rchr
 (
skù
, 
°rög
[
Àngth
]Ë=
NULL
)

178  
Àngth
;

179 
	}
}

185 
	$°r°r
 (c⁄° *
hay°ack
, c⁄° *
√edÀ
)

187 
size_t
 
hay°ack_Àn
 = 
	`°æí
 (
hay°ack
);

188 
size_t
 
√edÀ_Àn
 = 
	`°æí
 (
√edÀ
);

190 i‡(
hay°ack_Àn
 >
√edÀ_Àn
)

192 
size_t
 
i
;

194 
i
 = 0; i <
hay°ack_Àn
 - 
√edÀ_Àn
; i++)

195 i‡(!
	`memcmp
 (
hay°ack
 + 
i
, 
√edÀ
, 
√edÀ_Àn
))

196  (*Ë
hay°ack
 + 
i
;

199  
NULL
;

200 
	}
}

236 
	$°πok_r
 (*
s
, c⁄° *
dñimôîs
, **
ßve_±r
)

238 *
tokí
;

245 i‡(
s
 =
NULL
)

246 
s
 = *
ßve_±r
;

250 
	`°rchr
 (
dñimôîs
, *
s
Ë!
NULL
)

255 i‡(*
s
 == '\0')

257 *
ßve_±r
 = 
s
;

258  
NULL
;

261 
s
++;

265 
tokí
 = 
s
;

266 
	`°rchr
 (
dñimôîs
, *
s
Ë=
NULL
)

267 
s
++;

268 i‡(*
s
 != '\0')

270 *
s
 = '\0';

271 *
ßve_±r
 = 
s
 + 1;

274 *
ßve_±r
 = 
s
;

275  
tokí
;

276 
	}
}

280 
	$mem£t
 (*
d°_
, 
vÆue
, 
size_t
 
size
)

282 *
d°
 = 
d°_
;

286 
size
-- > 0)

287 *
d°
++ = 
vÆue
;

289  
d°_
;

290 
	}
}

293 
size_t


294 
	$°æí
 (c⁄° *
°rög
)

296 c⁄° *
p
;

298 i‡(
°rög
 !
NULL
)  0;

300 
p
 = 
°rög
; *p != '\0';Ö++)

302  
p
 - 
°rög
;

303 
	}
}

307 
size_t


308 
	$°∫Àn
 (c⁄° *
°rög
, 
size_t
 
maxÀn
)

310 
size_t
 
Àngth
;

312 
Àngth
 = 0; 
°rög
[Àngth] !'\0' &&Üígth < 
maxÀn
;Üength++)

314  
Àngth
;

315 
	}
}

326 
size_t


327 
	$°æ˝y
 (*
d°
, c⁄° *
§c
, 
size_t
 
size
)

329 
size_t
 
§c_Àn
;

334 
§c_Àn
 = 
	`°æí
 (
§c
);

335 i‡(
size
 > 0)

337 
size_t
 
d°_Àn
 = 
size
 - 1;

338 i‡(
§c_Àn
 < 
d°_Àn
)

339 
d°_Àn
 = 
§c_Àn
;

340 
	`mem˝y
 (
d°
, 
§c
, 
d°_Àn
);

341 
d°
[
d°_Àn
] = '\0';

343  
§c_Àn
;

344 
	}
}

356 
size_t


357 
	$°æˇt
 (*
d°
, c⁄° *
§c
, 
size_t
 
size
)

359 
size_t
 
§c_Àn
, 
d°_Àn
;

364 
§c_Àn
 = 
	`°æí
 (
§c
);

365 
d°_Àn
 = 
	`°æí
 (
d°
);

366 i‡(
size
 > 0 && 
d°_Àn
 < size)

368 
size_t
 
c›y_˙t
 = 
size
 - 
d°_Àn
 - 1;

369 i‡(
§c_Àn
 < 
c›y_˙t
)

370 
c›y_˙t
 = 
§c_Àn
;

371 
	`mem˝y
 (
d°
 + 
d°_Àn
, 
§c
, 
c›y_˙t
);

372 
d°
[
d°_Àn
 + 
c›y_˙t
] = '\0';

374  
§c_Àn
 + 
d°_Àn
;

375 
	}
}

	@synch.c

1 
	~<synch.h
>

2 
	~<öãºu±.h
>

3 
	~<¥oc/¥oc.h
>

4 
	~<devi˚/c⁄sﬁe.h
>

6 #i‚de‡
ASSERT


7 
	#ASSERT
(
COND
Ë;

	)

21 
	$£ma_öô
(
£m≠h‹e
 *
£ma
, 
vÆue
)

23 
	`ASSERT
 (
£ma
 !
NULL
);

25 
£ma
->
vÆue
 = value;

26 
	`li°_öô
(&
£ma
->
waôîs
);

27 
	}
}

38 
	$£ma_down
 (
£m≠h‹e
 *
£ma
)

40 
öå_Àvñ
 
ﬁd_Àvñ
;

42 
	`ASSERT
 (
£ma
 !
NULL
);

43 
	`ASSERT
 (!
	`öå_c⁄ãxt
 ());

45 
ﬁd_Àvñ
 = 
	`öå_dißbÀ
 ();

46 
£ma
->
vÆue
 == 0)

49 
	`li°_push_back
 (&
£ma
->
waôîs
, &
cur_¥o˚ss
->
ñem_°©
);

50 
	`¥oc_block
 ();

52 
£ma
->
vÆue
--;

53 
	`öå_£t_Àvñ
 (
ﬁd_Àvñ
);

54 
	}
}

61 
boﬁ


62 
	$£ma_åy_down
 (
£m≠h‹e
 *
£ma
)

64 
öå_Àvñ
 
ﬁd_Àvñ
;

66 
boﬁ
 
suc˚ss
;

68 
	`ASSERT
 (
£ma
 !
NULL
);

70 
ﬁd_Àvñ
 = 
	`öå_dißbÀ
 ();

71 i‡(
£ma
->
vÆue
 > 0)

73 
£ma
->
vÆue
--;

74 
suc˚ss
 = 
åue
;

77 
suc˚ss
 = 
Ál£
;

78 
	`öå_£t_Àvñ
 (
ﬁd_Àvñ
);

80  
suc˚ss
;

81 
	}
}

88 
	$£ma_up
 (
£m≠h‹e
 *
£ma
)

90 
öå_Àvñ
 
ﬁd_Àvñ
;

92 
	`ASSERT
 (
£ma
 !
NULL
);

94 
ﬁd_Àvñ
 = 
	`öå_dißbÀ
 ();

95 i‡(!
	`li°_em±y
 (&
£ma
->
waôîs
))

96 
	`¥oc_unblock
 (
	`li°_íåy
 (
	`li°_p›_‰⁄t
 (&
£ma
->
waôîs
),

97 
¥o˚ss
, 
ñem_°©
));

98 
£ma
->
vÆue
++;

99 
	`öå_£t_Àvñ
 (
ﬁd_Àvñ
);

100 
	}
}

101 
£ma_ã°_hñ≥r
 (*
£ma_
);

107 
	$£ma_£lf_ã°
 ()

109 
£m≠h‹e
 
£ma
[2];

110 
i
;

112 
	`¥ötk
 ("Testing semaphores...");

113 
	`£ma_öô
 (&
£ma
[0], 0);

114 
	`£ma_öô
 (&
£ma
[1], 0);

115 
	`¥oc_¸óã
 (
£ma_ã°_hñ≥r
, 
NULL
, &
£ma
);

116 
	`¥ötk
("after create\n");

122 
	`¥ötk
 ("done.\n");

123 
	}
}

127 
	$£ma_ã°_hñ≥r
 (*
£ma_
)

129 
£m≠h‹e
 *
£ma
 = 
£ma_
;

130 
i
;

131 
cur_¥o˚ss
 -> 
¥i‹ôy
 = 100;

133 
i
 = 0; i < 10; i++)

135 
	`£ma_down
 (&
£ma
[0]);

136 
	`£ma_up
 (&
£ma
[1]);

138 
	}
}

157 
	$lock_öô
 (
lock
 *lock)

159 
	`ASSERT
 (
lock
 !
NULL
);

161 
lock
->
hﬁdî
 = 
NULL
;

162 
	`£ma_öô
 (&
lock
->
£m≠h‹e
, 1);

163 
	}
}

174 
	$lock_acquúe
 (
lock
 *lock)

176 
	`ASSERT
 (
lock
 !
NULL
);

177 
	`ASSERT
 (!
	`öå_c⁄ãxt
 ());

178 
	`ASSERT
 (!
	`lock_hñd_by_cuºít_thªad
 (
lock
));

180 
	`£ma_down
 (&
lock
->
£m≠h‹e
);

181 
lock
->
hﬁdî
 = 
cur_¥o˚ss
;

182 
	}
}

190 
boﬁ


191 
	$lock_åy_acquúe
 (
lock
 *lock)

193 
boﬁ
 
suc˚ss
;

195 
	`ASSERT
 (
lock
 !
NULL
);

196 
	`ASSERT
 (!
	`lock_hñd_by_cuºít_thªad
 (
lock
));

198 
suc˚ss
 = 
	`£ma_åy_down
 (&
lock
->
£m≠h‹e
);

199 i‡(
suc˚ss
)

200 
lock
->
hﬁdî
 = 
cur_¥o˚ss
;

201  
suc˚ss
;

202 
	}
}

210 
	$lock_ªÀa£
 (
lock
 *lock)

212 
	`ASSERT
 (
lock
 !
NULL
);

213 
	`ASSERT
 (
	`lock_hñd_by_cuºít_thªad
 (
lock
));

215 
lock
->
hﬁdî
 = 
NULL
;

216 
	`£ma_up
 (&
lock
->
£m≠h‹e
);

217 
	}
}

222 
boﬁ


223 
	$lock_hñd_by_cuºít_thªad
 (c⁄° 
lock
 *lock)

225 
	`ASSERT
 (
lock
 !
NULL
);

227  
lock
->
hﬁdî
 =
cur_¥o˚ss
;

228 
	}
}

	@vsprintk.c

1 
	~<°d¨g.h
>

3 
	#ZEROPAD
 1

	)

4 
	#SIGN
 2

	)

5 
	#PLUS
 4

	)

6 
	#SPACE
 8

	)

7 
	#LEFT
 16

	)

8 
	#SPECIAL
 32

	)

9 
	#SMALL
 64

	)

11 
	#is_digô
(
c
Ë–(cË> '0' && (cË< '9' )

	)

13 
	#do_div
(
n
,
ba£
) \

15 
__ªs
; \

16 
__ªs
 = (()
n
Ë% ()
ba£
; \

17 
n
 = ((ÍË/ ()
ba£
; \

18 
__ªs
; \

19 })

	)

21 
	$°æí_k
(c⁄° *
°rög
)

23 c⁄° *
ªt
 = 
°rög
;

25 *
°rög
++);

27  
°rög
 - 1 - 
ªt
;

28 
	}
}

30 *
	$numbî
(* 
°r
, 
num
, 
ba£
, 
size
, 
¥ecisi⁄
, 
ty≥
)

32 
c
,
sign
,
tmp
[36];

33 c⁄° *
digôs
="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

34 
i
;

36 i‡(
ty≥
&
SMALL
Ë
digôs
="0123456789abcdefghijklmnopqrstuvwxyz";

37 i‡(
ty≥
&
LEFT
Ëty≥ &~
ZEROPAD
;

38 i‡(
ba£
<2 || base>36)

40 
c
 = (
ty≥
 & 
ZEROPAD
) ? '0' : ' ' ;

41 i‡(
ty≥
&
SIGN
 && 
num
<0) {

42 
sign
='-';

43 
num
 = -num;

45 
sign
=(
ty≥
&
PLUS
Ë? '+' : (—y≥&
SPACE
) ? ' ' : 0);

46 i‡(
sign
Ë
size
--;

47 i‡(
ty≥
&
SPECIAL
)

48 i‡(
ba£
==16Ë
size
 -= 2;

49 i‡(
ba£
==8Ë
size
--;

50 
i
=0;

51 i‡(
num
==0)

52 
tmp
[
i
++]='0';

53 
num
!=0)

54 
tmp
[
i
++]=
digôs
[
	`do_div
(
num
,
ba£
)];

55 i‡(
i
>
¥ecisi⁄
)Örecision=i;

56 
size
 -
¥ecisi⁄
;

57 i‡(!(
ty≥
&(
ZEROPAD
+
LEFT
)))

58 
size
-->0)

59 *
°r
++ = ' ';

60 i‡(
sign
)

61 *
°r
++ = 
sign
;

62 i‡(
ty≥
&
SPECIAL
)

63 i‡(
ba£
==8)

64 *
°r
++ = '0';

65 i‡(
ba£
==16) {

66 *
°r
++ = '0';

67 *
°r
++ = 
digôs
[33];

69 i‡(!(
ty≥
&
LEFT
))

70 
size
-->0)

71 *
°r
++ = 
c
;

72 
i
<
¥ecisi⁄
--)

73 *
°r
++ = '0';

74 
i
-->0)

75 *
°r
++ = 
tmp
[
i
];

76 
size
-->0)

77 *
°r
++ = ' ';

78  
°r
;

79 
	}
}

81 
	$skù_©oi
(c⁄° **
s
)

83 
i
=0;

85 
	`is_digô
(**
s
))

87 
i
 = i*10 + *((*
s
)++) - '0';

89  
i
;

90 
	}
}

92 
	$v•rötk
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

94 
Àn
;

95 
i
;

97 
quÆifõr
;

98 
¥ecisi⁄
;

99 
fõld_width
;

101 *
°r
;

102 *
s
;

103 *
ù
;

105 
Êags
;

107 
°r
 = 
buf
 ; *
fmt
 ; ++fmt)

109 if(*
fmt
 != '%')

111 *
°r
++ = *
fmt
;

115 
Êags
 = 0;

116 
ª≥©
:

117 ++
fmt
;

118 *
fmt
)

120 '-': 
Êags
 |
LEFT
; 
ª≥©
;

121 '+': 
Êags
 |
PLUS
; 
ª≥©
;

122 ' ': 
Êags
 |
SPACE
; 
ª≥©
;

123 '#': 
Êags
 |
SPECIAL
 ; 
ª≥©
;

124 '0': 
Êags
 |
ZEROPAD
; 
ª≥©
;

127 
fõld_width
 = -1;

129 if(
	`is_digô
(*
fmt
))

131 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

133 if(*
fmt
 == '*')

135 
fõld_width
 = 
	`va_¨g
(
¨gs
, );

136 if(
fõld_width
 < 0)

138 
fõld_width
 = -field_width;

139 
Êags
 |
LEFT
;

143 
¥ecisi⁄
 = -1;

145 if(*
fmt
 == '.')

147 ++
fmt
;

148 if(
	`is_digô
(*
fmt
))

150 
¥ecisi⁄
 = 
	`skù_©oi
(&
fmt
);

152 if(*
fmt
 == '*')

154 
¥ecisi⁄
 = 
	`va_¨g
(
¨gs
, );

156 if(
¥ecisi⁄
 < 0)

158 
¥ecisi⁄
 = 0;

162 
quÆifõr
 = -1;

164 if(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'L')

166 
quÆifõr
 = *
fmt
;

167 ++
fmt
;

170 *
fmt
)

174 if(!(
Êags
 & 
LEFT
))

176 --
fõld_width
 > 0)

178 *
°r
++ = ' ';

181 *
°r
++ = ()
	`va_¨g
(
¨gs
, );

182 --
fõld_width
 > 0)

184 *
°r
++ = ' ';

190 
s
 = 
	`va_¨g
(
¨gs
, *);

191 
Àn
 = 
	`°æí_k
(
s
);

192 if(
¥ecisi⁄
 < 0)

194 
¥ecisi⁄
 = 
Àn
;

196 if(
Àn
 > 
¥ecisi⁄
)

198 
Àn
 = 
¥ecisi⁄
;

201 if(!(
Êags
 & 
LEFT
))

203 
Àn
 < 
fõld_width
--)

205 *
°r
++ = ' ';

208 
i
 = 0 ; i < 
Àn
 ; ++i)

210 *
°r
++ = *
s
++;

213 
Àn
 < 
fõld_width
--)

215 *
°r
++ = ' ';

221 
°r
 = 
	`numbî
(°r, 
	`va_¨g
(
¨gs
, ), 8, 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

226 if(
fõld_width
 == -1)

228 
fõld_width
 = 8;

229 
Êags
 |
ZEROPAD
;

231 
°r
 = 
	`numbî
(°r, ()
	`va_¨g
(
¨gs
, *), 16, 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

236 
Êags
 |
SMALL
;

240 
°r
 = 
	`numbî
(°r, 
	`va_¨g
(
¨gs
, ), 16, 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

246 
Êags
 |
SIGN
;

250 
°r
 = 
	`numbî
(°r, 
	`va_¨g
(
¨gs
, ), 10, 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

255 
ù
 = 
	`va_¨g
(
¨gs
, *);

256 *
ù
 = (
°r
 - 
buf
);

261 if(*
fmt
 != '%')

263 *
°r
++ = '%';

265 if(*
fmt
)

267 *
°r
++ = *
fmt
;

271 --
fmt
;

278 *
°r
 = '\0';

279  (
°r
 - 
buf
);

280 
	}
}

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

108 
__ex˘y≥
 (
iß um
);

109 
__ex˘y≥
 (
ißÕha
);

110 
__ex˘y≥
 (
is˙ål
);

111 
__ex˘y≥
 (
isdigô
);

112 
__ex˘y≥
 (
i¶owî
);

113 
__ex˘y≥
 (
isgøph
);

114 
__ex˘y≥
 (
i•röt
);

115 
__ex˘y≥
 (
i•un˘
);

116 
__ex˘y≥
 (
is•a˚
);

117 
__ex˘y≥
 (
isuµî
);

118 
__ex˘y≥
 (
isxdigô
);

122 
	$tﬁowî
 (
__c
Ë
__THROW
;

125 
	$touµî
 (
__c
Ë
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__ex˘y≥
 (
isbœnk
);

133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE


173 #ifde‡
__is˘y≥_f


174 
	$__is˘y≥_f
 (
Ænum
)

175 
	$__is˘y≥_f
 (
Æpha
)

176 
	$__is˘y≥_f
 (
˙ål
)

177 
	$__is˘y≥_f
 (
digô
)

178 
	$__is˘y≥_f
 (
lowî
)

179 
	$__is˘y≥_f
 (
gøph
)

180 
	$__is˘y≥_f
 (
¥öt
)

181 
	$__is˘y≥_f
 (
pun˘
)

182 
	$__is˘y≥_f
 (
•a˚
)

183 
	$__is˘y≥_f
 (
uµî
)

184 
	$__is˘y≥_f
 (
xdigô
)

185 #ifde‡
__USE_ISOC99


186 
	$__is˘y≥_f
 (
bœnk
)

188 #ñi‡
deföed
 
__is˘y≥


189 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

190 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

191 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

192 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

193 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

194 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

195 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

196 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

197 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

198 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

199 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

200 #ifde‡
__USE_ISOC99


201 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

205 #ifde‡
__USE_EXTERN_INLINES


206 
__exã∫_ölöe
 

207 
	`__NTH
 (
	$tﬁowî
 (
__c
))

209  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

210 
	}
}

212 
__exã∫_ölöe
 

213 
__NTH
 (
	$touµî
 (
__c
))

215  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

216 
	}
}

219 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


220 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

221 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

224 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


225 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

226 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

228 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

229 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

235 #ifde‡
__USE_XOPEN2K8


237 
	~<bôs/ty≥s/loˇÀ_t.h
>

241 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

242 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

244 
	#__ex˘y≥_l
(
«me
) \

245 
	`«me
 (, 
loˇÀ_t
Ë
__THROW


	)

251 
__ex˘y≥_l
 (
iß um_l
);

252 
__ex˘y≥_l
 (
ißÕha_l
);

253 
__ex˘y≥_l
 (
is˙ål_l
);

254 
__ex˘y≥_l
 (
isdigô_l
);

255 
__ex˘y≥_l
 (
i¶owî_l
);

256 
__ex˘y≥_l
 (
isgøph_l
);

257 
__ex˘y≥_l
 (
i•röt_l
);

258 
__ex˘y≥_l
 (
i•un˘_l
);

259 
__ex˘y≥_l
 (
is•a˚_l
);

260 
__ex˘y≥_l
 (
isuµî_l
);

261 
__ex˘y≥_l
 (
isxdigô_l
);

263 
__ex˘y≥_l
 (
isbœnk_l
);

267 
	$__tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

271 
	$__touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

272 
	$touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

274 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


275 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

276 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

277 
	#__touµî_l
(
c
, 
loˇÀ
) \

278 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

279 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

280 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

284 #i‚de‡
__NO_CTYPE


285 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

286 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

287 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

288 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

289 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

290 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

291 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

292 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

293 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

294 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

295 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

297 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

299 #ifde‡
__USE_MISC


300 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

301 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

304 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

305 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

306 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

307 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

308 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

309 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

310 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

311 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

312 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

313 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

314 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

316 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

318 #ifde‡
__USE_MISC


319 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

320 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

181 #ifdef 
__USE_POSIX


183 
	~<bôs/posix1_lim.h
>

186 #ifdef 
__USE_POSIX2


187 
	~<bôs/posix2_lim.h
>

190 #ifdef 
__USE_XOPEN


191 
	~<bôs/x›í_lim.h
>

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 sig√d 
	töt_Àa°8_t
;

44 
	töt_Àa°16_t
;

45 
	töt_Àa°32_t
;

46 #i‡
__WORDSIZE
 == 64

47 
	töt_Àa°64_t
;

49 
__exãnsi⁄__


50 
	töt_Àa°64_t
;

54 
	tuöt_Àa°8_t
;

55 
	tuöt_Àa°16_t
;

56 
	tuöt_Àa°32_t
;

57 #i‡
__WORDSIZE
 == 64

58 
	tuöt_Àa°64_t
;

60 
__exãnsi⁄__


61 
	tuöt_Àa°64_t
;

68 sig√d 
	töt_Á°8_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Á°16_t
;

71 
	töt_Á°32_t
;

72 
	töt_Á°64_t
;

74 
	töt_Á°16_t
;

75 
	töt_Á°32_t
;

76 
__exãnsi⁄__


77 
	töt_Á°64_t
;

81 
	tuöt_Á°8_t
;

82 #i‡
__WORDSIZE
 == 64

83 
	tuöt_Á°16_t
;

84 
	tuöt_Á°32_t
;

85 
	tuöt_Á°64_t
;

87 
	tuöt_Á°16_t
;

88 
	tuöt_Á°32_t
;

89 
__exãnsi⁄__


90 
	tuöt_Á°64_t
;

95 #i‡
__WORDSIZE
 == 64

96 #i‚de‡
__öçå_t_deföed


97 
	töçå_t
;

98 
	#__öçå_t_deföed


	)

100 
	tuöçå_t
;

102 #i‚de‡
__öçå_t_deföed


103 
	töçå_t
;

104 
	#__öçå_t_deföed


	)

106 
	tuöçå_t
;

111 
__ötmax_t
 
	tötmax_t
;

112 
__uötmax_t
 
	tuötmax_t
;

115 #i‡
__WORDSIZE
 == 64

116 
	#__INT64_C
(
c
Ë¯## 
L


	)

117 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

119 
	#__INT64_C
(
c
Ë¯## 
LL


	)

120 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

126 
	#INT8_MIN
 (-128)

	)

127 
	#INT16_MIN
 (-32767-1)

	)

128 
	#INT32_MIN
 (-2147483647-1)

	)

129 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

131 
	#INT8_MAX
 (127)

	)

132 
	#INT16_MAX
 (32767)

	)

133 
	#INT32_MAX
 (2147483647)

	)

134 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

137 
	#UINT8_MAX
 (255)

	)

138 
	#UINT16_MAX
 (65535)

	)

139 
	#UINT32_MAX
 (4294967295U)

	)

140 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

144 
	#INT_LEAST8_MIN
 (-128)

	)

145 
	#INT_LEAST16_MIN
 (-32767-1)

	)

146 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

147 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

149 
	#INT_LEAST8_MAX
 (127)

	)

150 
	#INT_LEAST16_MAX
 (32767)

	)

151 
	#INT_LEAST32_MAX
 (2147483647)

	)

152 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

155 
	#UINT_LEAST8_MAX
 (255)

	)

156 
	#UINT_LEAST16_MAX
 (65535)

	)

157 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

158 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

162 
	#INT_FAST8_MIN
 (-128)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

165 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

167 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

168 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

170 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

172 
	#INT_FAST8_MAX
 (127)

	)

173 #i‡
__WORDSIZE
 == 64

174 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

175 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

177 
	#INT_FAST16_MAX
 (2147483647)

	)

178 
	#INT_FAST32_MAX
 (2147483647)

	)

180 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

183 
	#UINT_FAST8_MAX
 (255)

	)

184 #i‡
__WORDSIZE
 == 64

185 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

186 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

188 
	#UINT_FAST16_MAX
 (4294967295U)

	)

189 
	#UINT_FAST32_MAX
 (4294967295U)

	)

191 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

195 #i‡
__WORDSIZE
 == 64

196 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

197 
	#INTPTR_MAX
 (9223372036854775807L)

	)

198 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

200 
	#INTPTR_MIN
 (-2147483647-1)

	)

201 
	#INTPTR_MAX
 (2147483647)

	)

202 
	#UINTPTR_MAX
 (4294967295U)

	)

207 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

209 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

220 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

222 #i‡
__WORDSIZE32_PTRDIFF_LONG


223 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

224 
	#PTRDIFF_MAX
 (2147483647L)

	)

226 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

227 
	#PTRDIFF_MAX
 (2147483647)

	)

232 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

233 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

236 #i‡
__WORDSIZE
 == 64

237 
	#SIZE_MAX
 (18446744073709551615UL)

	)

239 #i‡
__WORDSIZE32_SIZE_ULONG


240 
	#SIZE_MAX
 (4294967295UL)

	)

242 
	#SIZE_MAX
 (4294967295U)

	)

247 #i‚de‡
WCHAR_MIN


249 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

250 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

254 
	#WINT_MIN
 (0u)

	)

255 
	#WINT_MAX
 (4294967295u)

	)

258 
	#INT8_C
(
c
Ë
	)
c

259 
	#INT16_C
(
c
Ë
	)
c

260 
	#INT32_C
(
c
Ë
	)
c

261 #i‡
__WORDSIZE
 == 64

262 
	#INT64_C
(
c
Ë¯## 
L


	)

264 
	#INT64_C
(
c
Ë¯## 
LL


	)

268 
	#UINT8_C
(
c
Ë
	)
c

269 
	#UINT16_C
(
c
Ë
	)
c

270 
	#UINT32_C
(
c
Ë¯## 
U


	)

271 #i‡
__WORDSIZE
 == 64

272 
	#UINT64_C
(
c
Ë¯## 
UL


	)

274 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

278 #i‡
__WORDSIZE
 == 64

279 
	#INTMAX_C
(
c
Ë¯## 
L


	)

280 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

282 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

283 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

286 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

288 
	#INT8_WIDTH
 8

	)

289 
	#UINT8_WIDTH
 8

	)

290 
	#INT16_WIDTH
 16

	)

291 
	#UINT16_WIDTH
 16

	)

292 
	#INT32_WIDTH
 32

	)

293 
	#UINT32_WIDTH
 32

	)

294 
	#INT64_WIDTH
 64

	)

295 
	#UINT64_WIDTH
 64

	)

297 
	#INT_LEAST8_WIDTH
 8

	)

298 
	#UINT_LEAST8_WIDTH
 8

	)

299 
	#INT_LEAST16_WIDTH
 16

	)

300 
	#UINT_LEAST16_WIDTH
 16

	)

301 
	#INT_LEAST32_WIDTH
 32

	)

302 
	#UINT_LEAST32_WIDTH
 32

	)

303 
	#INT_LEAST64_WIDTH
 64

	)

304 
	#UINT_LEAST64_WIDTH
 64

	)

306 
	#INT_FAST8_WIDTH
 8

	)

307 
	#UINT_FAST8_WIDTH
 8

	)

308 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

309 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

310 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

311 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

312 
	#INT_FAST64_WIDTH
 64

	)

313 
	#UINT_FAST64_WIDTH
 64

	)

315 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

316 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

318 
	#INTMAX_WIDTH
 64

	)

319 
	#UINTMAX_WIDTH
 64

	)

321 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

322 
	#SIG_ATOMIC_WIDTH
 32

	)

323 
	#SIZE_WIDTH
 
__WORDSIZE


	)

324 
	#WCHAR_WIDTH
 32

	)

325 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	~<bôs/ty≥s/__FILE.h
>

37 
	~<bôs/ty≥s/FILE.h
>

39 
	#_STDIO_USES_IOSTREAM


	)

41 
	~<bôs/libio.h
>

43 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


44 #ifde‡
__GNUC__


45 #i‚de‡
_VA_LIST_DEFINED


46 
_G_va_li°
 
	tva_li°
;

47 
	#_VA_LIST_DEFINED


	)

50 
	~<°d¨g.h
>

54 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


55 #i‚de‡
__off_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__off_t
 
	toff_t
;

59 
__off64_t
 
	toff_t
;

61 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

69 #ifde‡
__USE_XOPEN2K8


70 #i‚de‡
__ssize_t_deföed


71 
__ssize_t
 
	tssize_t
;

72 
	#__ssize_t_deföed


	)

77 #i‚de‡
__USE_FILE_OFFSET64


78 
_G_Âos_t
 
	tÂos_t
;

80 
_G_Âos64_t
 
	tÂos_t
;

82 #ifde‡
__USE_LARGEFILE64


83 
_G_Âos64_t
 
	tÂos64_t
;

87 
	#_IOFBF
 0

	)

88 
	#_IOLBF
 1

	)

89 
	#_IONBF
 2

	)

93 #i‚de‡
BUFSIZ


94 
	#BUFSIZ
 
_IO_BUFSIZ


	)

100 #i‚de‡
EOF


101 
	#EOF
 (-1)

	)

107 
	#SEEK_SET
 0

	)

108 
	#SEEK_CUR
 1

	)

109 
	#SEEK_END
 2

	)

110 #ifde‡
__USE_GNU


111 
	#SEEK_DATA
 3

	)

112 
	#SEEK_HOLE
 4

	)

116 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


118 
	#P_tmpdú
 "/tmp"

	)

131 
	~<bôs/°dio_lim.h
>

135 
_IO_FILE
 *
°dö
;

136 
_IO_FILE
 *
°dout
;

137 
_IO_FILE
 *
°dîr
;

139 
	#°dö
 
°dö


	)

140 
	#°dout
 
°dout


	)

141 
	#°dîr
 
°dîr


	)

144 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

146 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

148 #ifde‡
__USE_ATFILE


150 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

151 c⁄° *
__√w
Ë
__THROW
;

158 #i‚de‡
__USE_FILE_OFFSET64


159 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

161 #ifde‡
__REDIRECT


162 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

164 
	#tmpfûe
 
tmpfûe64


	)

168 #ifde‡
__USE_LARGEFILE64


169 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

173 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

175 #ifde‡
__USE_MISC


178 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

182 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


190 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

191 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

199 
	`f˛o£
 (
FILE
 *
__°ªam
);

204 
	`fÊush
 (
FILE
 *
__°ªam
);

206 #ifde‡
__USE_MISC


213 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

216 #ifde‡
__USE_GNU


223 
	`f˛o£Æl
 ();

227 #i‚de‡
__USE_FILE_OFFSET64


232 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

233 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

238 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

239 c⁄° *
__ª°ri˘
 
__modes
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

242 #ifde‡
__REDIRECT


243 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

244 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

245 
__wur
;

246 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

249 
__wur
;

251 
	#f›í
 
f›í64


	)

252 
	#‰e›í
 
‰e›í64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

257 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

258 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

263 #ifdef 
__USE_POSIX


265 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

268 #ifdef 
__USE_GNU


271 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

272 c⁄° *
__ª°ri˘
 
__modes
,

273 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

276 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

278 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

279 
__THROW
 
__wur
;

284 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

290 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

294 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

295 
__modes
, 
size_t
 
__n
Ë
__THROW
;

297 #ifdef 
__USE_MISC


300 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

301 
size_t
 
__size
Ë
__THROW
;

304 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

312 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

313 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

318 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

320 
	$•rötf
 (*
__ª°ri˘
 
__s
,

321 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

327 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

328 
_G_va_li°
 
__¨g
);

333 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

335 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

336 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

338 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


340 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

341 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

342 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

344 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

345 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

346 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

349 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

352 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

353 
_G_va_li°
 
__¨g
)

354 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

355 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

356 c⁄° *
__ª°ri˘
 
__fmt
, ...)

357 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

358 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

359 c⁄° *
__ª°ri˘
 
__fmt
, ...)

360 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

363 #ifde‡
__USE_XOPEN2K8


365 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

366 
_G_va_li°
 
__¨g
)

367 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

368 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

369 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

377 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

378 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

383 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

385 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

386 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

388 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

389 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

390 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

391 #ifde‡
__REDIRECT


395 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

396 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

397 
__isoc99_fsˇnf
Ë
__wur
;

398 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

399 
__isoc99_sˇnf
Ë
__wur
;

400 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

401 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

402 
__isoc99_ssˇnf
);

404 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

405 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

406 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

407 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

409 
	#fsˇnf
 
__isoc99_fsˇnf


	)

410 
	#sˇnf
 
__isoc99_sˇnf


	)

411 
	#ssˇnf
 
__isoc99_ssˇnf


	)

415 #ifdef 
__USE_ISOC99


420 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

421 
_G_va_li°
 
__¨g
)

422 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

428 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

429 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

432 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

433 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

434 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

436 #i‡!
deföed
 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
vfsˇnf
,

444 (
FILE
 *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

446 
__isoc99_vfsˇnf
)

447 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

448 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

449 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

450 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

451 
	`__REDIRECT_NTH
 (
vssˇnf
,

452 (c⁄° *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
,

454 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

455 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

457 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
,

459 
_G_va_li°
 
__¨g
Ë
__wur
;

460 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

461 
_G_va_li°
 
__¨g
Ë
__wur
;

462 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

463 c⁄° *
__ª°ri˘
 
__f‹m©
,

464 
_G_va_li°
 
__¨g
Ë
__THROW
;

465 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

466 
	#vsˇnf
 
__isoc99_vsˇnf


	)

467 
	#vssˇnf
 
__isoc99_vssˇnf


	)

477 
	`fgëc
 (
FILE
 *
__°ªam
);

478 
	`gëc
 (
FILE
 *
__°ªam
);

484 
	`gëch¨
 ();

488 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

490 #ifde‡
__USE_POSIX199506


495 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

496 
	`gëch¨_u∆ocked
 ();

499 #ifde‡
__USE_MISC


506 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

517 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

518 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

524 
	`putch¨
 (
__c
);

528 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
_G_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 #ifde‡
__USE_EXTERN_INLINES


859 
	~<bôs/°dio.h
>

861 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


862 
	~<bôs/°dio2.h
>

864 #ifde‡
__LDBL_COMPAT


865 
	~<bôs/°dio-ldbl.h
>

868 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

541 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

542 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

549 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

550 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

552 #ifde‡
__USE_GNU


558 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

559 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

563 
	$‰ì
 (*
__±r
Ë
__THROW
;

565 #ifde‡
__USE_MISC


566 
	~<Æloˇ.h
>

569 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

570 || 
deföed
 
__USE_MISC


572 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

575 #ifde‡
__USE_XOPEN2K


577 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

581 #ifde‡
__USE_ISOC11


583 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

584 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

588 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

592 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

594 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


596 #ifde‡
__˝lu•lus


597 "C++" 
	$©_quick_exô
 ((*
__func
) ())

598 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

600 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #ifdef 
__USE_MISC


607 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

614 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

616 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


620 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

623 #ifde‡
__USE_ISOC99


626 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

631 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_GNU


636 *
	$£cuª_gëív
 (c⁄° *
__«me
)

637 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


644 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

647 #ifde‡
__USE_XOPEN2K


650 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

651 
__THROW
 
	`__n⁄nuŒ
 ((2));

654 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifdef 
__USE_MISC


661 
	$˛óªnv
 (Ë
__THROW
;

665 #i‡
deföed
 
__USE_MISC
 \

666 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

672 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

675 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


684 #i‚de‡
__USE_FILE_OFFSET64


685 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

687 #ifde‡
__REDIRECT


688 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

689 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

691 
	#mk°emp
 
mk°emp64


	)

694 #ifde‡
__USE_LARGEFILE64


695 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

699 #ifde‡
__USE_MISC


706 #i‚de‡
__USE_FILE_OFFSET64


707 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

711 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

713 
	#mk°emps
 
mk°emps64


	)

716 #ifde‡
__USE_LARGEFILE64


717 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

718 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

722 #ifde‡
__USE_XOPEN2K8


728 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

731 #ifde‡
__USE_GNU


738 #i‚de‡
__USE_FILE_OFFSET64


739 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__REDIRECT


742 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

743 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

745 
	#mko°emp
 
mko°emp64


	)

748 #ifde‡
__USE_LARGEFILE64


749 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

758 #i‚de‡
__USE_FILE_OFFSET64


759 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

760 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

762 #ifde‡
__REDIRECT


763 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

764 
__Êags
), 
mko°emps64
)

765 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

767 
	#mko°emps
 
mko°emps64


	)

770 #ifde‡
__USE_LARGEFILE64


771 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

772 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

781 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

784 #ifdef 
__USE_GNU


787 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


797 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

798 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

803 #i‚de‡
__COMPAR_FN_T


804 
	#__COMPAR_FN_T


	)

805 (*
	t__com∑r_‚_t
) (const *, const *);

807 #ifdef 
__USE_GNU


808 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

811 #ifde‡
__USE_GNU


812 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

817 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

818 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

819 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

821 #ifde‡
__USE_EXTERN_INLINES


822 
	~<bôs/°dlib-b£¨ch.h
>

827 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

828 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

829 #ifde‡
__USE_GNU


830 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

832 
	`__n⁄nuŒ
 ((1, 4));

837 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

838 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

840 #ifde‡
__USE_ISOC99


841 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

842 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
div_t
 
	$div
 (
__numî
, 
__díom
)

850 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

852 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 #ifde‡
__USE_ISOC99


855 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

856 
__díom
)

857 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

861 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

862 || 
deföed
 
__USE_MISC


869 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

870 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

875 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

876 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

881 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

882 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

885 #ifde‡
__USE_MISC


887 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

888 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

889 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

890 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

894 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

899 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

900 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

901 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

902 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

906 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

907 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

908 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

910 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

911 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

912 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

913 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

919 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

922 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

923 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

926 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

930 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

931 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

934 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

935 
__THROW
;

938 #ifde‡
__USE_MISC


943 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

947 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


954 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

955 *c⁄° *
__ª°ri˘
 
__tokís
,

956 **
__ª°ri˘
 
__vÆuï
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

961 #ifde‡
__USE_XOPEN


963 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

969 #ifde‡
__USE_XOPEN2KXSI


971 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

974 #ifde‡
__USE_XOPEN_EXTENDED


979 
	$gø¡±
 (
__fd
Ë
__THROW
;

983 
	$u∆ock±
 (
__fd
Ë
__THROW
;

988 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

991 #ifde‡
__USE_GNU


995 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

996 
__THROW
 
	`__n⁄nuŒ
 ((2));

999 
	`gë±
 ();

1002 #ifde‡
__USE_MISC


1006 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1));

1010 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1013 
	$ây¶Ÿ
 (Ë
__THROW
;

1016 
	~<bôs/°dlib-Êﬂt.h
>

1019 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1020 
	~<bôs/°dlib.h
>

1022 #ifde‡
__LDBL_COMPAT


1023 
	~<bôs/°dlib-ldbl.h
>

1026 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


53 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

54 
__c
, 
size_t
 
__n
)

55 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

63 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

64 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


70 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

71 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

72 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__OPTIMIZE__


76 
__exã∫_Æways_ölöe
 *

77 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


79  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

82 
__exã∫_Æways_ölöe
 const *

83 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
	}
}

90 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

91 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

94 #ifde‡
__USE_GNU


97 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


98 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

99 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

100 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


109 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

110 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

112 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

122 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

124 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

125 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

129 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

133 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

137 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

139 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

140 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

147 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

148 
__THROW
 
	`__n⁄nuŒ
 ((2));

150 #ifde‡
__USE_XOPEN2K8


152 
	~<bôs/ty≥s/loˇÀ_t.h
>

155 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

156 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

159 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

160 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

163 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

164 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

166 *
	$°rdup
 (c⁄° *
__s
)

167 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

173 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

174 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

175 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


180 
	#°rdu∑
(
s
) \

181 (
__exãnsi⁄__
 \

183 c⁄° *
__ﬁd
 = (
s
); \

184 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

185 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

186 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

187 
	}
}))

	)

190 
	#°∫du∑
(
s
, 
n
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

196 
__√w
[
__Àn
] = '\0'; \

197 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

198 }))

	)

202 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


205 *
°rchr
 (*
__s
, 
__c
)

206 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

207 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

208 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

210 #ifde‡
__OPTIMIZE__


211 
__exã∫_Æways_ölöe
 *

212 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


214  
__buûtö_°rchr
 (
__s
, 
__c
);

217 
__exã∫_Æways_ölöe
 const *

218 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

225 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

226 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


232 *
	`°ºchr
 (*
__s
, 
__c
)

233 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

234 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

235 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__OPTIMIZE__


238 
__exã∫_Æways_ölöe
 *

239 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


241  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

244 
__exã∫_Æways_ölöe
 const *

245 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
	}
}

252 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

253 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

256 #ifde‡
__USE_GNU


259 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


260 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

261 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

266 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

276 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

279 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


282 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

283 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__OPTIMIZE__


288 
__exã∫_Æways_ölöe
 *

289 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


291  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

294 
__exã∫_Æways_ölöe
 const *

295 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


297  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

300 
	}
}

302 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

303 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

306 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


309 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

310 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

311 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

312 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__OPTIMIZE__


315 
__exã∫_Æways_ölöe
 *

316 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


318  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

321 
__exã∫_Æways_ölöe
 const *

322 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


324  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

327 
	}
}

329 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

336 
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

341 c⁄° *
__ª°ri˘
 
__dñim
,

342 **
__ª°ri˘
 
__ßve_±r
)

343 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

344 #ifde‡
__USE_POSIX


345 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

346 **
__ª°ri˘
 
__ßve_±r
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

350 #ifde‡
__USE_GNU


352 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


353 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

354 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

355 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

356 c⁄° *
__√edÀ
)

357 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

360 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 #ifde‡
__USE_GNU


368 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

369 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

374 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

375 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

378 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

384 
size_t
 
	$°æí
 (c⁄° *
__s
)

385 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

387 #ifdef 
__USE_XOPEN2K8


390 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

397 #ifde‡
__USE_XOPEN2K


405 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

410 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

411 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

413 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

414 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

420 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

425 #ifde‡
__USE_XOPEN2K8


427 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

430 #ifde‡
__USE_MISC


431 
	~<°rögs.h
>

435 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

439 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

440 c⁄° *
__ª°ri˘
 
__dñim
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 #ifdef 
__USE_XOPEN2K8


446 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

449 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

451 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

456 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

457 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

458 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

460 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifdef 
__USE_GNU


466 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

467 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

470 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

473 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

475 #i‚de‡
ba£«me


480 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


481 "C++" *
	$ba£«me
 (*
__fûíame
)

482 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

483 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

484 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

486 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 #i‡
	`__GNUC_PREREQ
 (3,4)

492 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


494 
	~<bôs/°rög_f‹tifõd.h
>

498 
__END_DECLS


	@/usr/include/syscall.h

1 
	~<sys/sysˇŒ.h
>

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

61 
	~<bôs/uöä-idítôy.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

80 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

81 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

82 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

83 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

85 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

86 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

87 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

88 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

90 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

91 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

92 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

93 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

119 #unde‡
__USE_ISOC11


120 #unde‡
__USE_ISOC99


121 #unde‡
__USE_ISOC95


122 #unde‡
__USE_ISOCXX11


123 #unde‡
__USE_POSIX


124 #unde‡
__USE_POSIX2


125 #unde‡
__USE_POSIX199309


126 #unde‡
__USE_POSIX199506


127 #unde‡
__USE_XOPEN


128 #unde‡
__USE_XOPEN_EXTENDED


129 #unde‡
__USE_UNIX98


130 #unde‡
__USE_XOPEN2K


131 #unde‡
__USE_XOPEN2KXSI


132 #unde‡
__USE_XOPEN2K8


133 #unde‡
__USE_XOPEN2K8XSI


134 #unde‡
__USE_LARGEFILE


135 #unde‡
__USE_LARGEFILE64


136 #unde‡
__USE_FILE_OFFSET64


137 #unde‡
__USE_MISC


138 #unde‡
__USE_ATFILE


139 #unde‡
__USE_GNU


140 #unde‡
__USE_FORTIFY_LEVEL


141 #unde‡
__KERNEL_STRICT_NAMES


142 #unde‡
__GLIBC_USE_DEPRECATED_GETS


146 #i‚de‡
_LOOSE_KERNEL_NAMES


147 
	#__KERNEL_STRICT_NAMES


	)

157 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


158 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

159 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

161 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

168 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


169 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

170 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

176 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

182 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

183 && !
deföed
 
	g_DEFAULT_SOURCE


185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

190 #ifde‡
_GNU_SOURCE


191 #unde‡
_ISOC95_SOURCE


192 
	#_ISOC95_SOURCE
 1

	)

193 #unde‡
_ISOC99_SOURCE


194 
	#_ISOC99_SOURCE
 1

	)

195 #unde‡
_ISOC11_SOURCE


196 
	#_ISOC11_SOURCE
 1

	)

197 #unde‡
_POSIX_SOURCE


198 
	#_POSIX_SOURCE
 1

	)

199 #unde‡
_POSIX_C_SOURCE


200 
	#_POSIX_C_SOURCE
 200809L

	)

201 #unde‡
_XOPEN_SOURCE


202 
	#_XOPEN_SOURCE
 700

	)

203 #unde‡
_XOPEN_SOURCE_EXTENDED


204 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

205 #unde‡
_LARGEFILE64_SOURCE


206 
	#_LARGEFILE64_SOURCE
 1

	)

207 #unde‡
_DEFAULT_SOURCE


208 
	#_DEFAULT_SOURCE
 1

	)

209 #unde‡
_ATFILE_SOURCE


210 
	#_ATFILE_SOURCE
 1

	)

215 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

216 || (!
deföed
 
	g__STRICT_ANSI__
 \

217 && !
deföed
 
	g_ISOC99_SOURCE
 \

218 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

219 && !
deföed
 
	g_XOPEN_SOURCE
))

220 #unde‡
_DEFAULT_SOURCE


221 
	#_DEFAULT_SOURCE
 1

	)

225 #i‡(
deföed
 
_ISOC11_SOURCE
 \

226 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

227 
	#__USE_ISOC11
 1

	)

231 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

232 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

233 
	#__USE_ISOC99
 1

	)

237 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

238 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

239 
	#__USE_ISOC95
 1

	)

242 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus
 >= 201703L

245 
	#__USE_ISOC11
 1

	)

249 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


250 
	#__USE_ISOCXX11
 1

	)

251 
	#__USE_ISOC99
 1

	)

258 #ifde‡
_DEFAULT_SOURCE


259 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


260 
	#__USE_POSIX_IMPLICITLY
 1

	)

262 #unde‡
_POSIX_SOURCE


263 
	#_POSIX_SOURCE
 1

	)

264 #unde‡
_POSIX_C_SOURCE


265 
	#_POSIX_C_SOURCE
 200809L

	)

268 #i‡((!
deföed
 
__STRICT_ANSI__
 \

269 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

270 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

271 
	#_POSIX_SOURCE
 1

	)

272 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

273 
	#_POSIX_C_SOURCE
 2

	)

274 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

275 
	#_POSIX_C_SOURCE
 199506L

	)

276 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

277 
	#_POSIX_C_SOURCE
 200112L

	)

279 
	#_POSIX_C_SOURCE
 200809L

	)

281 
	#__USE_POSIX_IMPLICITLY
 1

	)

290 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

291 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

292 
	#_POSIX_SOURCE
 1

	)

293 #unde‡
_POSIX_C_SOURCE


294 
	#_POSIX_C_SOURCE
 199506L

	)

297 #i‡(
deföed
 
_POSIX_SOURCE
 \

298 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

299 || 
deföed
 
_XOPEN_SOURCE
)

300 
	#__USE_POSIX
 1

	)

303 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


304 
	#__USE_POSIX2
 1

	)

307 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

308 
	#__USE_POSIX199309
 1

	)

311 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

312 
	#__USE_POSIX199506
 1

	)

315 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

316 
	#__USE_XOPEN2K
 1

	)

317 #unde‡
__USE_ISOC95


318 
	#__USE_ISOC95
 1

	)

319 #unde‡
__USE_ISOC99


320 
	#__USE_ISOC99
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

324 
	#__USE_XOPEN2K8
 1

	)

325 #unde‡
_ATFILE_SOURCE


326 
	#_ATFILE_SOURCE
 1

	)

329 #ifdef 
_XOPEN_SOURCE


330 
	#__USE_XOPEN
 1

	)

331 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

332 
	#__USE_XOPEN_EXTENDED
 1

	)

333 
	#__USE_UNIX98
 1

	)

334 #unde‡
_LARGEFILE_SOURCE


335 
	#_LARGEFILE_SOURCE
 1

	)

336 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

337 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

338 
	#__USE_XOPEN2K8
 1

	)

339 
	#__USE_XOPEN2K8XSI
 1

	)

341 
	#__USE_XOPEN2K
 1

	)

342 
	#__USE_XOPEN2KXSI
 1

	)

343 #unde‡
__USE_ISOC95


344 
	#__USE_ISOC95
 1

	)

345 #unde‡
__USE_ISOC99


346 
	#__USE_ISOC99
 1

	)

349 #ifde‡
_XOPEN_SOURCE_EXTENDED


350 
	#__USE_XOPEN_EXTENDED
 1

	)

355 #ifde‡
_LARGEFILE_SOURCE


356 
	#__USE_LARGEFILE
 1

	)

359 #ifde‡
_LARGEFILE64_SOURCE


360 
	#__USE_LARGEFILE64
 1

	)

363 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

364 
	#__USE_FILE_OFFSET64
 1

	)

367 #i‡
deföed
 
_DEFAULT_SOURCE


368 
	#__USE_MISC
 1

	)

371 #ifdef 
_ATFILE_SOURCE


372 
	#__USE_ATFILE
 1

	)

375 #ifdef 
_GNU_SOURCE


376 
	#__USE_GNU
 1

	)

379 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

380 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

381 #i‡
_FORTIFY_SOURCE
 > 1

382 
	#__USE_FORTIFY_LEVEL
 2

	)

384 
	#__USE_FORTIFY_LEVEL
 1

	)

387 
	#__USE_FORTIFY_LEVEL
 0

	)

394 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


395 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

397 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

402 
	~<°dc-¥edef.h
>

410 #unde‡
__GNU_LIBRARY__


411 
	#__GNU_LIBRARY__
 6

	)

415 
	#__GLIBC__
 2

	)

416 
	#__GLIBC_MINOR__
 27

	)

418 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

419 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

422 #i‚de‡
__ASSEMBLER__


423 #i‚de‡
_SYS_CDEFS_H


424 
	~<sys/cdefs.h
>

429 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


430 
	#__USE_LARGEFILE
 1

	)

431 
	#__USE_LARGEFILE64
 1

	)

437 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

438 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

439 && 
deföed
 
	g__exã∫_ölöe


440 
	#__USE_EXTERN_INLINES
 1

	)

448 
	~<gnu/°ubs.h
>

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

61 
	#__STDC_NO_THREADS__
 1

	)

	@
1
.
1
/usr/include
82
1445
arch/Main.c
arch/do_syscall.c
arch/i386/crset.asm
arch/i386/intr-stubs.S
arch/i386/io.asm
arch/i386/mem.asm
arch/i386/switch.S
arch/interrupt.c
arch/syscall.c
bitmap.c
build/Main.s
device/block.c
device/console.c
device/device.c
device/ide.c
device/kbd.c
device/partition.c
device/pit.c
include/bitmap.h
include/ctype.h
include/debug.h
include/device/block.h
include/device/console.h
include/device/device.h
include/device/ide.h
include/device/io.h
include/device/kbd.h
include/device/partition.h
include/device/pit.h
include/do_syscall.h
include/interrupt.h
include/intr-stubs.h
include/inttypes.h
include/limits.h
include/list.h
include/loader.h
include/mem/malloc.h
include/mem/mm.h
include/mem/paging.h
include/mem/palloc.h
include/packed.h
include/proc/proc.h
include/proc/sched.h
include/proc/switch.h
include/round.h
include/ssulib.h
include/stdarg.h
include/stdbool.h
include/stddef.h
include/stdint.h
include/stdio.h
include/stdlib.h
include/string.h
include/synch.h
include/syscall.h
include/type.h
include/vaddr.h
list.c
mem/malloc.c
mem/mm.c
mem/paging.c
mem/palloc.c
proc/proc.c
proc/sched.c
ssulib.c
stdio.c
string.c
synch.c
vsprintk.c
/usr/include/ctype.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/syscall.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/strings.h
/usr/include/stdc-predef.h
