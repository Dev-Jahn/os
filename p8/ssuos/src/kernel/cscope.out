cscope 15 /media/jahn/External2/os/p8/ssuos/src/kernel               0000197589
	@arch/Main.c

1 
	~<öãºu±.h
>

2 
	~<devi˚/c⁄sﬁe.h
>

3 
	~<devi˚/block.h
>

4 
	~<ty≥.h
>

5 
	~<devi˚/kbd.h
>

6 
	~<devi˚/io.h
>

7 
	~<devi˚/pô.h
>

8 
	~<°d¨g.h
>

9 
	~<ssulib.h
>

10 
	~<mem/∑gög.h
>

11 
	~<¥oc/¥oc.h
>

12 
	~<mem/mm.h
>

13 
	~<sysˇŒ.h
>

14 
	~<devi˚/kbd.h
>

15 
	~<devi˚/©a.h
>

16 
	~<fûesys/fs.h
>

18 
	~<synch.h
>

19 
	~<mem/∑Œoc.h
>

21 
maö_öô
();

22 
¥öt_c⁄åibut‹s
();

24 c⁄° * 
	gVERSION
 = "0.1.07";

25 c⁄° * 
	gAUTHOR
 = "OSLAB";

26 c⁄° * 
	gMODIFIER
 = "You";

28 
	$ssuos_maö
()

30 
	`maö_öô
();

32 
	`idÀ
(
NULL
);

35 
	}
}

37 
	$maö_öô
()

39 
	`öå_dißbÀ
();

42 
	`öô_c⁄sﬁe
();

44 
	`¥öt_c⁄åibut‹s
();

46 
	`dëe˘_mem
();

47 
	`¥ötk
("%s", "Memory Detecting");

48 
	`¥ötk
("\n-Mem‹y sizê%u Kbyãs\n", 
	`mem_size
()/1024);

50 
	`öô_pô
();

51 
	`¥ötk
("%s", "PIT Intialization\n");

53 
	`öô_sysˇŒ
();

54 
	`¥ötk
("%s", "System call Intialization\n");

56 
	`öô_öå
();

57 
	`¥ötk
("%s", "Interrupt Initialization\n");

59 
	`öô_kbd
();

61 
	`öô_∑Œoc
();

62 
	`¥ötk
("%s" "Palloc Initialization\n");

64 
	`öô_∑gög
();

65 
	`¥ötk
("%s", "Paging Initialization\n");

67 
	`öô_¥oc
();

68 
	`¥ötk
("%s", "Process Intialization\n");

70 
	`öå_íabÀ
();

72 
	`öô_©a
();

73 
	`¥ötk
("%s", "ATA device Intialization\n");

75 
	`öô_fûesy°em
();

77 
	`¥ötk
("========== initialization complete ==========\n\n");

80 #ifde‡
SCREEN_SCROLL


81 
	`ª‰eshS¸ìn
();

83 
	}
}

85 
	$¥öt_c⁄åibut‹s
()

87 
	`¥ötk
("%s", "SSUOS main start!!!!\n");

88 
	`¥ötk
(" ______ ______ __ __ ______ ______ \n");

89 
	`¥ötk
(" / \\ / \\ / | / | / \\ / \\ \n");

90 
	`¥ötk
(" /$$$$$$ |/$$$$$$ |$$ | $$ | /$$$$$$ |/$$$$$$ |\n");

91 
	`¥ötk
(" $$ \\__$$/ $$ \\__$$/ $$ | $$ | $$ | $$ |$$ \\__$$/ \n");

92 
	`¥ötk
(" $$ \\ $$ \\ $$ | $$ | $$ | $$ |$$ \\ \n");

93 
	`¥ötk
(" $$$$$$ | $$$$$$ |$$ | $$ | $$ | $$ | $$$$$$ |\n");

94 
	`¥ötk
(" / \\__$$ |/ \\__$$ |$$ \\__$$ | $$ \\__$$ |/ \\__$$ |\n");

95 
	`¥ötk
(" $$ $$/ $$ $$/ $$ $$/ $$ $$/ $$ $$/ \n");

96 
	`¥ötk
(" $$$$$$/ $$$$$$/ $$$$$$/ $$$$$$/ $$$$$$/ \n");

97 
	`¥ötk
("\n");

98 
	`¥ötk
("****************Made by OSLAB in SoongSil University*********************\n");

99 
	`¥ötk
("\n");

100 
	`¥ötk
("contributors : Yunkyu Lee , Minwoo Jang , Sanghun Choi , Eunseok Choi\n");

101 
	`¥ötk
(" Hyunho Ji , Giwook Kang , Kisu Kim , Seonguk Lee \n");

102 
	`¥ötk
(" Gibeom Byeon, Jeonghwan Lee, Kyoungmin Kim, Myungjoon Shon\n");

103 
	`¥ötk
(" Hansol Lee , Jinwoo Lee , Mhanwoo Heo, Yongmin Kim, Jeongwoo Choi\n");

104 
	`¥ötk
("\n");

105 
	`¥ötk
("************************ Professor. Jiman Hong ************************\n");

106 
	`¥ötk
(" \n");

107 
	}
}

	@arch/do_syscall.c

1 
	~<¥oc/sched.h
>

2 
	~<¥oc/¥oc.h
>

3 
	~<devi˚/devi˚.h
>

4 
	~<öãºu±.h
>

5 
	~<devi˚/kbd.h
>

6 
	~<fûesys/fûe.h
>

8 
pid_t
 
	$do_f‹k
(
¥oc_func
 
func
, * 
aux1
)

10 
pid_t
 
pid
;

11 
¥oc_›ti⁄
 
›t
;

13 
›t
.
¥i‹ôy
 = 
cur_¥o˚ss
->Öriority;

14 
pid
 = 
	`¥oc_¸óã
(
func
, &
›t
, 
aux1
);

16  
pid
;

17 
	}
}

19 
	$do_exô
(
°©us
)

21 
cur_¥o˚ss
->
exô_°©us
 = 
°©us
;

22 
	`¥oc_‰ì
();

23 
	`do_sched_⁄_ªtu∫
();

24 
	}
}

26 
pid_t
 
	$do_waô
(*
°©us
)

28 
cur_¥o˚ss
->
chûd_pid
 != -1)

29 
	`scheduÀ
();

32 
pid
 = 
cur_¥o˚ss
->
chûd_pid
;

33 
cur_¥o˚ss
->
chûd_pid
 = -1;

35 
¥o˚ss
 
¥ocs
[];

36 
¥ocs
[
pid
].
°©e
 = 
PROC_UNUSED
;

38 if(!
°©us
)

39 *
°©us
 = 
¥ocs
[
pid
].
exô_°©us
;

41  
pid
;

42 
	}
}

44 
	$do_shutdown
()

46 
	`dev_shutdown
();

48 
	}
}

50 
	$do_ssuªad
()

52  
	`kbd_ªad_ch¨
();

53 
	}
}

55 
	$do_›í
(c⁄° *
∑th«me
, 
Êags
)

57 
öode
 *inode;

58 
ssufûe
 **
fûe_curs‹
 = 
cur_¥o˚ss
->
fûe
;

59 
fd
;

61 
fd
 = 0; fd < 
NR_FILEDES
; fd++)

62 if(
fûe_curs‹
[
fd
] =
NULL
) ;

64 i‡(
fd
 =
NR_FILEDES
)

67 i‡–(
öode
 = 
	`öode_›í
(
∑th«me
)Ë=
NULL
)

70 i‡(
öode
->
¢_ty≥
 =
SSU_TYPE_DIR
)

73 
fd
 = 
	`fûe_›í
(
öode
,
Êags
,0);

75  
fd
;

76 
	}
}

78 
	$do_ªad
(
fd
, *
buf
, 
Àn
)

80  
	`gíîic_ªad
(
fd
, (*)
buf
, 
Àn
);

81 
	}
}

82 
	$do_wrôe
(
fd
, c⁄° *
buf
, 
Àn
)

84  
	`gíîic_wrôe
(
fd
, (*)
buf
, 
Àn
);

85 
	}
}

	@arch/i386/crset.asm

1 [
SECTION
 .
ãxt
]

3 [
GLOBAL
 
ªad_¸0
]

4 
	gªad_¸0
:

5 
push
 
ebp


6 
mov
 
ebp
, 
e•


7 
mov
 
	góx
, 
¸0


8 
p›
 
ebp


9 
	gªä


11 [
GLOBAL
 
wrôe_¸0
]

12 
	gwrôe_¸0
:

13 
push
 
ebp


14 
mov
 
ebp
, 
e•


15 
mov
 
	góx
, 
	gdw‹d
[
ebp
+8]

16 
mov
 
	g¸0
, 
óx


17 
p›
 
ebp


18 
	gªä


20 [
GLOBAL
 
ªad_¸3
]

21 
	gªad_¸3
:

22 
push
 
ebp


23 
mov
 
ebp
, 
e•


24 
mov
 
	góx
, 
¸3


25 
p›
 
ebp


26 
	gªä


28 [
GLOBAL
 
wrôe_¸3
]

29 
	gwrôe_¸3
:

30 
push
 
ebp


31 
mov
 
ebp
, 
e•


32 
mov
 
	góx
, 
	gdw‹d
[
ebp
+8]

33 
mov
 
	g¸3
, 
óx


34 
p›
 
ebp


35 
	gªä


	@arch/i386/intr-stubs.S

2 .
	gãxt


17 .
func
 
öå_íåy


18 
	göå_íåy
:

20 
pushl
 %
ds


21 
pushl
 %
es


22 
pushl
 %
fs


23 
pushl
 %
gs


24 
pushÆ


27 
˛d


31 
ÀÆ
 56(%
e•
), %
ebp


34 
	gpushl
 %
	ge•


35 .
globl
 
öå_comm⁄


36 
ˇŒ
 
öå_comm⁄


37 
addl
 
	g$4
, %
	ge•


38 .
	gídfunc


48 .
globl
 
	göå_exô


49 .
func
 
öå_exô


50 
	göå_exô
:

52 
p›Æ


53 
p›l
 %
gs


54 
p›l
 %
fs


55 
p›l
 %
es


56 
p›l
 %
ds


60 
addl
 
$12
, %
e•


63 
	gúë


64 .
	gídfunc


92 .
	gd©a


93 .
globl
 
öå_°ubs


94 
	göå_°ubs
:

98 
	#zîo
 \

99 
pushl
 %
ebp
; \

100 
pushl
 
$0


	)

104 
	#REAL
 \

105 
	`pushl
 (%
e•
); \

106 
movl
 %
ebp
, 4(%
e•
)

	)

111 
	#STUB
(
NUMBER
, 
TYPE
) \

112 .
ãxt
; \

113 .
func
 
öå
##
NUMBER
##
_°ub
; \

114 
öå
##
NUMBER
##
_°ub
: \

115 
TYPE
; \

116 
push
 
$0x
##
NUMBER
; \

117 
jmp
 
öå_íåy
; \

118 .
ídfunc
; \

120 .
d©a
; \

121 .
öå
##
NUMBER
##
_°ub
;

	)

124 
	$STUB
(00, 
zîo
Ë
	$STUB
(01, 
zîo
Ë
	$STUB
(02, 
zîo
Ë
	$STUB
(03, 
zîo
)

125 
	$STUB
(04, 
zîo
Ë
	$STUB
(05, 
zîo
Ë
	$STUB
(06, 
zîo
Ë
	$STUB
(07, 
zîo
)

126 
	$STUB
(08, 
REAL
Ë
	$STUB
(09, 
zîo
Ë
	$STUB
(0a, 
REAL
Ë
	$STUB
(0b, 
REAL
)

127 
	$STUB
(0c, 
zîo
Ë
	$STUB
(0d, 
REAL
Ë
	$STUB
(0e, 
REAL
Ë
	$STUB
(0f, 
zîo
)

129 
	$STUB
(10, 
zîo
Ë
	$STUB
(11, 
REAL
Ë
	$STUB
(12, 
zîo
Ë
	$STUB
(13, 
zîo
)

130 
	$STUB
(14, 
zîo
Ë
	$STUB
(15, 
zîo
Ë
	$STUB
(16, 
zîo
Ë
	$STUB
(17, 
zîo
)

131 
	$STUB
(18, 
REAL
Ë
	$STUB
(19, 
zîo
Ë
	$STUB
(1a, 
REAL
Ë
	$STUB
(1b, 
REAL
)

132 
	$STUB
(1c, 
zîo
Ë
	$STUB
(1d, 
REAL
Ë
	$STUB
(1e, 
REAL
Ë
	$STUB
(1f, 
zîo
)

134 
	$STUB
(20, 
zîo
Ë
	$STUB
(21, 
zîo
Ë
	$STUB
(22, 
zîo
Ë
	$STUB
(23, 
zîo
)

135 
	$STUB
(24, 
zîo
Ë
	$STUB
(25, 
zîo
Ë
	$STUB
(26, 
zîo
Ë
	$STUB
(27, 
zîo
)

136 
	$STUB
(28, 
zîo
Ë
	$STUB
(29, 
zîo
Ë
	$STUB
(2a, 
zîo
Ë
	$STUB
(2b, 
zîo
)

137 
	$STUB
(2c, 
zîo
Ë
	$STUB
(2d, 
zîo
Ë
	$STUB
(2e, 
zîo
Ë
	$STUB
(2f, 
zîo
)

139 
	$STUB
(30, 
zîo
Ë
	$STUB
(31, 
zîo
Ë
	$STUB
(32, 
zîo
Ë
	$STUB
(33, 
zîo
)

140 
	$STUB
(34, 
zîo
Ë
	$STUB
(35, 
zîo
Ë
	$STUB
(36, 
zîo
Ë
	$STUB
(37, 
zîo
)

141 
	$STUB
(38, 
zîo
Ë
	$STUB
(39, 
zîo
Ë
	$STUB
(3a, 
zîo
Ë
	$STUB
(3b, 
zîo
)

142 
	$STUB
(3c, 
zîo
Ë
	$STUB
(3d, 
zîo
Ë
	$STUB
(3e, 
zîo
Ë
	$STUB
(3f, 
zîo
)

144 
	$STUB
(40, 
zîo
Ë
	$STUB
(41, 
zîo
Ë
	$STUB
(42, 
zîo
Ë
	$STUB
(43, 
zîo
)

145 
	$STUB
(44, 
zîo
Ë
	$STUB
(45, 
zîo
Ë
	$STUB
(46, 
zîo
Ë
	$STUB
(47, 
zîo
)

146 
	$STUB
(48, 
zîo
Ë
	$STUB
(49, 
zîo
Ë
	$STUB
(4a, 
zîo
Ë
	$STUB
(4b, 
zîo
)

147 
	$STUB
(4c, 
zîo
Ë
	$STUB
(4d, 
zîo
Ë
	$STUB
(4e, 
zîo
Ë
	$STUB
(4f, 
zîo
)

149 
	$STUB
(50, 
zîo
Ë
	$STUB
(51, 
zîo
Ë
	$STUB
(52, 
zîo
Ë
	$STUB
(53, 
zîo
)

150 
	$STUB
(54, 
zîo
Ë
	$STUB
(55, 
zîo
Ë
	$STUB
(56, 
zîo
Ë
	$STUB
(57, 
zîo
)

151 
	$STUB
(58, 
zîo
Ë
	$STUB
(59, 
zîo
Ë
	$STUB
(5a, 
zîo
Ë
	$STUB
(5b, 
zîo
)

152 
	$STUB
(5c, 
zîo
Ë
	$STUB
(5d, 
zîo
Ë
	$STUB
(5e, 
zîo
Ë
	$STUB
(5f, 
zîo
)

154 
	$STUB
(60, 
zîo
Ë
	$STUB
(61, 
zîo
Ë
	$STUB
(62, 
zîo
Ë
	$STUB
(63, 
zîo
)

155 
	$STUB
(64, 
zîo
Ë
	$STUB
(65, 
zîo
Ë
	$STUB
(66, 
zîo
Ë
	$STUB
(67, 
zîo
)

156 
	$STUB
(68, 
zîo
Ë
	$STUB
(69, 
zîo
Ë
	$STUB
(6a, 
zîo
Ë
	$STUB
(6b, 
zîo
)

157 
	$STUB
(6c, 
zîo
Ë
	$STUB
(6d, 
zîo
Ë
	$STUB
(6e, 
zîo
Ë
	$STUB
(6f, 
zîo
)

159 
	$STUB
(70, 
zîo
Ë
	$STUB
(71, 
zîo
Ë
	$STUB
(72, 
zîo
Ë
	$STUB
(73, 
zîo
)

160 
	$STUB
(74, 
zîo
Ë
	$STUB
(75, 
zîo
Ë
	$STUB
(76, 
zîo
Ë
	$STUB
(77, 
zîo
)

161 
	$STUB
(78, 
zîo
Ë
	$STUB
(79, 
zîo
Ë
	$STUB
(7a, 
zîo
Ë
	$STUB
(7b, 
zîo
)

162 
	$STUB
(7c, 
zîo
Ë
	$STUB
(7d, 
zîo
Ë
	$STUB
(7e, 
zîo
Ë
	`STUB
(7f, zero)

	@arch/i386/io.asm

1 [
SECTION
 .
ãxt
]

2 [
GLOBAL
 
öb
]

3 
	göb
:

4 
push
 
ebp


5 
mov
 
ebp
, 
e•


7 
x‹
 
	góx
, 
óx


8 
mov
 
	gdx
, 
	gw‹d
[
ebp
+8]

9 
ö
 
	gÆ
, 
dx


11 
p›
 
ebp


12 
	gªt


13 [
GLOBAL
 
outb
]

14 
	goutb
:

15 
push
 
ebp


16 
mov
 
ebp
, 
e•


18 
mov
 
	gÆ
, 
	gbyã
 [
ebp
+12]

19 
mov
 
	gdx
, 
	gw‹d
 [
ebp
+8]

20 
out
 
	gdx
, 
Æ


22 
p›
 
ebp


23 
	gªt


25 [
GLOBAL
 
öl
]

26 
	göl
:

27 
push
 
ebp


28 
mov
 
ebp
, 
e•


29 
push
 
edx


31 
mov
 
	gdx
, 
	gw‹d
 [
ebp
+8]

32 
x‹
 
	góx
, 
óx


34 
ö
 
	góx
, 
dx


35 
p›
 
edx


36 
mov
 
	ge•
, 
ebp


37 
p›
 
ebp


38 
	gªt


40 [
GLOBAL
 
oué
]

41 
	goué
:

42 
push
 
ebp


43 
mov
 
ebp
, 
e•


44 
push
 
edx


45 
push
 
óx


47 
mov
 
	gdx
, 
	gw‹d
 [
ebp
+8]

48 
mov
 
	góx
, 
	gdw‹d
 [
ebp
+12]

49 
out
 
	gdx
, 
óx


51 
p›
 
óx


52 
p›
 
edx


53 
mov
 
	ge•
, 
ebp


54 
p›
 
ebp


55 
	gªt


57 [
GLOBAL
 
iowaô
]

58 
	giowaô
:

59 
push
 
ax


61 
x‹
 
ax
,áx

62 
	gout
 0x80, 
Æ


64 
p›
 
ax


65 
	gªt


	@arch/i386/mem.asm

1 [
SECTION
 .
ãxt
]

3 [
GLOBAL
 
gëMemSize
]

4 
	ggëMemSize
:

5 
push
 
ecx


6 
push
 
edx


7 
x‹
 
ecx
, 
	gecx
 ;
˛ór
 
Æl
 
	gªgi°îs
. 
This
 
is
 
√eded
 
ã°ög
 
œãr


8 
x‹
 
	gedx
, 
edx


9 
mov
 
	gax
, 0xe801

11 
	gjc
 .
îr‹


12 
cmp
 
	gah
, 0x86 ;
unsuµ‹ãd
 
fun˘i⁄


13 
	gje
 .
îr‹


14 
cmp
 
	gah
, 0x80 ;
övÆid
 
comm™d


15 
	gje
 .
îr‹


16 
	gjcxz
 .
	gu£_ax
 ;
bios
 
may
 
have
 
°‹ed
 
ô
 
ö
 
	gax
,
bx
 
‹
 
	gcx
,
	gdx
. 
ã°
 
cx
 
	gis
 0

17 
p›
 
edx


18 
p›
 
ecx


19 
ªt


21 
mov
 
	gax
, 
	gcx
 ;
ôs
 
	gnŸ
, 
so
 
ô
 
should
 
c⁄èö
 
mem
 
	gsize
; 
°‹e
 it

22 
mov
 
	gbx
, 
	gdx


24 .
	gu£_ax
:

25 
mov
 
ax
, 
bx


26 
p›
 
	gedx
 ;
mem
 
size
 
is
 
ö
 
ax
 
™d
 
bx
 
	gÆªady
,  
ô


27 
p›
 
ecx


28 
	gªt


30 .
	gîr‹
:

31 
mov
 
ax
, -1

32 
mov
 
	gbx
, 0

33 
p›
 
edx


34 
p›
 
ecx


35 
	gªt


	@arch/i386/switch.S

2 .
£t
 
	gARG_CUR
, 8

3 .
£t
 
	gARG_NEXT
, 12

5 .
globÆ
 
	gswôch_¥o˚ss


7 .
func
 
swôch_¥o˚ss


8 
	gswôch_¥o˚ss
:

11 
pushl
 %
ebp


12 
movl
 %
e•
, %
ebp


14 
	gpushl
 %
óx


15 
	gpushl
 %
ebx


16 
	gpushl
 %
ecx


17 
	gpushl
 %
edx


18 
	gpushl
 %
esi


19 
	gpushl
 %
	gedi


22 .
globÆ
 
¥o˚ss_°ack_ofs


23 
mov
 
	g¥o˚ss_°ack_ofs
, %
edx


24 
mov
 
	g¥o˚ss_°ack_ofs
, %
ebx


25 
addl
 
	g$4
, %
ebx


28 
movl
 
ARG_CUR
(%
ebp
), %
óx


29 
	gmovl
 %
	ge•
, (%
	góx
, %
	gedx
, 1)

32 
movl
 
ARG_NEXT
(%
ebp
), %
óx


34 
movl
 (%
óx
, %
edx
, 1), %
e•


35 
movl
 (%
óx
, %
ebx
, 1), %
ecx


36 
	gmovl
 %
	gecx
, %
¸3


39 
	gp›l
 %
edi


40 
	gp›l
 %
esi


41 
	gp›l
 %
edx


42 
	gp›l
 %
ecx


43 
	gp›l
 %
ebx


44 
	gp›l
 %
óx


46 
	gp›l
 %
ebp


48 
	gªt


	@arch/interrupt.c

1 
	~<öãºu±.h
>

2 
	~<devi˚/c⁄sﬁe.h
>

3 
	~<ty≥.h
>

4 
	~<devi˚/pô.h
>

5 
	~<¥oc/sched.h
>

6 
	~<devi˚/io.h
>

7 
	~<devi˚/kbd.h
>

8 
	~<¥oc/¥oc.h
>

9 
	~<ssulib.h
>

10 
	~<¥oc/swôch.h
>

11 
	~<sysˇŒ.h
>

12 
	~<öå-°ubs.h
>

15 
	#TIMER_MAX
 10

	)

16 
	#REFRESH_FPS
 20

	)

17 
	#CODE_SEGMENT
 0x08

	)

19 #¥agm®
∑ck
(
push
, 1)

21 
	s_ID


23 
	mLowOff£t
;

24 
	mCodeSñe˘‹
;

25 
	mTy≥
;

26 
	mHighOff£t
;

27 } 
	t_ID
;

29 
	s_IDTR


31 
	mSize
;

32 
	mAddªss
;

33 } 
	t_IDTR
;

34 #¥agm®
∑ck
(
p›
)

36 
_ID
 *
	gidt
;

38 #i‚de‡
ASSERT


39 
	#ASSERT
(
CONDITION
Ë–(*Ë0)

	)

42 
	gticks
;

44 
öå_h™dÀr_func
 *
	gh™dÀrs
[
INTR_MAX
];

45 
boﬁ
 
	gsched_⁄_ªtu∫
;

47 
boﬁ
 
	gö_exã∫Æ_öå
;

49 
deÁu…_h™dÀr
(
öå_‰ame
 *
i‰ame
);

50 
timî_h™dÀr
(
öå_‰ame
 *
i‰ame
);

51 
sysˇŒ_h™dÀr
(
öå_‰ame
 *
i‰ame
);

53 
	$öô_öå
()

55 
i
;

57 
ticks
 = 0;

58 
ö_exã∫Æ_öå
 = 
Ál£
;

59 
sched_⁄_ªtu∫
 = 
Ál£
;

61 
öå_Àvñ
 
ﬁd_Àvñ
 = 
	`öå_dißbÀ
();

63 
_IDTR
 
IDTR
;

65 
__asm__
 
	`__vﬁ©ûe
("sidà%0"::"m" (
IDTR
));

66 
	`¥ötk
("idå sizê: %dáddªs†: 0x%x\n", 
IDTR
.
Size
, IDTR.
Addªss
);

67 
idt
 = (
_ID
 *)
IDTR
.
Addªss
;

69 
i
 = 0; i<
INTR_MAX
; i++)

71 
idt
[
i
].
LowOff£t
 = ()(()
öå_°ubs
[i] & 0xffff);

72 
idt
[
i
].
CodeSñe˘‹
 = ()
CODE_SEGMENT
;

73 if(
i
 == 5)

74 
idt
[
i
].
Ty≥
 = ()0x9f00;

76 
idt
[
i
].
Ty≥
 = ()0x8e00;

77 
idt
[
i
].
HighOff£t
 = ()((()
öå_°ubs
[i] >> 16) & 0xffff);

79 
h™dÀrs
[
i
] = 
deÁu…_h™dÀr
;

82 
	`ªg_h™dÀr
(32, 
timî_h™dÀr
);

83 
	`¥ötk
("%s", "Timer Handler Registration\n");

86 
	`ªg_h™dÀr
(0x30, 
sysˇŒ_h™dÀr
);

87 
	`¥ötk
("%s", "System Call Handler Registeration\n");

89 
	`öå_£t_Àvñ
 (
ﬁd_Àvñ
);

91 
	}
}

93 
	$öå_comm⁄
(
öå_‰ame
 *
i‰ame
)

95 
ö_exã∫Æ_öå
 = 
i‰ame
->
vec_no
 >= 0x20 && iframe->vec_no < 0x30;

98 if(
ö_exã∫Æ_öå
)

100 
	`ASSERT
 (
	`öå_gë_Àvñ
 (Ë=
INTR_OFF
);

101 
sched_⁄_ªtu∫
 = 
Ál£
;

105 if(
h™dÀrs
[
i‰ame
->
vec_no
] !
NULL
)

106 
h™dÀrs
[
i‰ame
->
vec_no
](iframe);

108 
	`deÁu…_h™dÀr
(
i‰ame
);

110 if(
ö_exã∫Æ_öå
)

112 
	`ASSERT
 (
i‰ame
->
vec_no
 >= 0x20 && iframe->vec_no < 0x30);

114 
ö_exã∫Æ_öå
 = 
Ál£
;

117 
	`outb
(0x20, 0x20);

120 if(
i‰ame
->
vec_no
 >= 0x28)

121 
	`outb
(0xa0, 0x20);

123 if(
sched_⁄_ªtu∫
)

124 
	`scheduÀ
();

126 
	}
}

128 
	$do_sched_⁄_ªtu∫
()

130 
	`ASSERT
 (
	`öå_c⁄ãxt
 ());

131 
sched_⁄_ªtu∫
 = 
åue
;

132 
	}
}

134 
	$ªg_h™dÀr
(
idx
, 
öå_h™dÀr_func
 *
h™dÀr
)

136 
öå_Àvñ
 
ﬁd_Àvñ
 = 
	`öå_dißbÀ
();

138 
h™dÀrs
[
idx
] = 
h™dÀr
;

141 
	`öå_£t_Àvñ
 (
ﬁd_Àvñ
);

143 
	}
}

152 
	#FLAG_MBS
 0x00000002

	)

153 
	#FLAG_IF
 0x00000200

	)

156 
öå_Àvñ
 
	$öå_gë_Àvñ
 ()

158 
uöt32_t
 
Êags
;

164 
asm
 vﬁ©ûê("pushÊ;Ö›»%0" : "=g" (
Êags
));

166  
Êags
 & 
FLAG_IF
 ? 
INTR_ON
 : 
INTR_OFF
;

167 
	}
}

171 
öå_Àvñ
 
	$öå_£t_Àvñ
 (
öå_Àvñ
 
Àvñ
)

173  
Àvñ
 =
INTR_ON
 ? 
	`öå_íabÀ
 (Ë: 
	`öå_dißbÀ
 ();

174 
	}
}

177 
öå_Àvñ
 
	$öå_íabÀ
 ()

179 
öå_Àvñ
 
ﬁd_Àvñ
 = 
	`öå_gë_Àvñ
 ();

180 
	`ASSERT
 (!
	`öå_c⁄ãxt
 ());

186 
asm
 volatile ("sti");

188  
ﬁd_Àvñ
;

189 
	}
}

192 
öå_Àvñ
 
	$öå_dißbÀ
 ()

194 
öå_Àvñ
 
ﬁd_Àvñ
 = 
	`öå_gë_Àvñ
 ();

199 
asm
 volatile ("cli" : : : "memory");

201  
ﬁd_Àvñ
;

202 
	}
}

206 
boﬁ
 
	$öå_c⁄ãxt
 ()

208  
ö_exã∫Æ_öå
;

209 
	}
}

213 
	$gë_ticks
()

215  
ticks
;

216 
	}
}

218 
	$deÁu…_h™dÀr
(
öå_‰ame
 *
i‰ame
)

222 
	`¥ötk
("\n\nöàöå %d\n\n", 
i‰ame
->
vec_no
);

226 
	}
}

228 
	$timî_h™dÀr
(
öå_‰ame
 *
i‰ame
)

230 
ticks
++;

231 
cur_¥o˚ss
->
time_u£d
++;

232 
cur_¥o˚ss
->
time_¶i˚
++;

234 if(
cur_¥o˚ss
->
time_¶i˚
 >
TIMER_MAX
)

236 
	`do_sched_⁄_ªtu∫
();

238 #ifde‡
SCREEN_SCROLL


240 
ª‰esh_ticks
 = 0;

241 if(++
ª‰esh_ticks
 >(
PIT_FRQ_HZ
/
REFRESH_FPS
)) {

242 
ª‰esh_ticks
 = 0;

243 
	`ª‰eshS¸ìn
();

246 
	}
}

248 
	$sysˇŒ_h™dÀr
(
öå_‰ame
 *
i‰ame
)

250 
sys_num
, 
¨g_num
, 
ªt
;

251 *
±
;

252 
i
;

254 
	#SYSCALL_ARG_MAX
 4

	)

255 
¨g
[
SYSCALL_ARG_MAX
];

257 
±
 = (*Ë((()&
i‰ame
->
ss
) - 4);

258 
sys_num
 = *
±
++;

259 
¨g_num
 = 
sysˇŒ_tbl
[
sys_num
][1];

261 
i
 = 0; i<
¨g_num
; i++)

262 
¨g
[
i
] = *
±
++;

264 
¨g_num
)

267 
ªt
 = (((*)())
sysˇŒ_tbl
[
sys_num
][0])();

270 
ªt
 = (((*)())
sysˇŒ_tbl
[
sys_num
][0])(
¨g
[0]);

273 
ªt
 = (((*)(, ))
sysˇŒ_tbl
[
sys_num
][0])(
¨g
[0],árg[1]);

276 
ªt
 = (((*)(, , ))
sysˇŒ_tbl
[
sys_num
][0]Ë(
¨g
[0],árg[1],árg[2]);

280 *(
±
 + 3Ë
ªt
;

281 
	}
}

	@arch/syscall.c

1 
	~<sysˇŒ.h
>

2 
	~<do_sysˇŒ.h
>

3 
	~<¥oc/¥oc.h
>

11 
	#sysˇŒ0
(
SYS_NUM
) ({ \

12 
ªt
; \

13 
__asm__
 
	`__vﬁ©ûe
( \

18 : [
num
] "g" (
SYS_NUM
) \

20 
ªt
; \

21 })

	)

23 
	#sysˇŒ1
(
SYS_NUM
, 
ARG0
) ({ \

24 
ªt
; \

25 
__asm__
 
	`__vﬁ©ûe
( \

31 : [
num
] "g" (
SYS_NUM
), \

32 [
¨g0
] "g" (
ARG0
) \

34 
ªt
; \

35 })

	)

37 
	#sysˇŒ2
(
SYS_NUM
, 
ARG0
, 
ARG1
) ({ \

38 
ªt
; \

39 
__asm__
 
	`__vﬁ©ûe
( \

46 : [
num
] "g" (
SYS_NUM
), \

47 [
¨g0
] "g" (
ARG0
), \

48 [
¨g1
] "g" (
ARG1
) \

50 
ªt
; \

51 })

	)

53 
	#sysˇŒ3
(
SYS_NUM
, 
ARG0
, 
ARG1
, 
ARG2
) ({ \

54 
ªt
; \

55 
__asm__
 
	`__vﬁ©ûe
( \

63 : [
num
] "g" (
SYS_NUM
), \

64 [
¨g0
] "g" (
ARG0
), \

65 [
¨g1
] "g" (
ARG1
), \

66 [
¨g2
] "g" (
ARG2
) \

68 
ªt
; \

69 })

	)

71 
	gsysˇŒ_tbl
[
SYS_NUM
][2];

73 
	#REGSYS
(
NUM
, 
FUNC
, 
ARG
) \

74 
sysˇŒ_tbl
[
NUM
][0] = ()
FUNC
; \

75 
sysˇŒ_tbl
[
NUM
][1] = 
ARG
;

	)

78 
	$öô_sysˇŒ
()

80 
	`REGSYS
(
SYS_FORK
, 
do_f‹k
, 2);

81 
	`REGSYS
(
SYS_EXIT
, 
do_exô
, 1);

82 
	`REGSYS
(
SYS_WAIT
, 
do_waô
, 1);

83 
	`REGSYS
(
SYS_SSUREAD
, 
do_ssuªad
, 0);

84 
	`REGSYS
(
SYS_SHUTDOWN
, 
do_shutdown
, 0);

85 
	`REGSYS
(
SYS_OPEN
, 
do_›í
, 2);

86 
	`REGSYS
(
SYS_READ
, 
do_ªad
, 3);

87 
	`REGSYS
(
SYS_WRITE
, 
do_wrôe
, 3);

88 
	}
}

90 
	$exô
(
°©us
)

92 
	`sysˇŒ1
(
SYS_EXIT
, 
°©us
);

93 
	}
}

95 
pid_t
 
	$f‹k
(
¥oc_func
 
func
, * 
aux1
)

97  
	`sysˇŒ2
(
SYS_FORK
, 
func
, 
aux1
);

98 
	}
}

100 
pid_t
 
	$waô
(*
°©us
)

102  
	`sysˇŒ1
(
SYS_WAIT
, 
°©us
);

103 
	}
}

105 
	$ssuªad
()

107  
	`sysˇŒ0
(
SYS_SSUREAD
);

108 
	}
}

110 
	$shutdown
()

112 
	`sysˇŒ0
(
SYS_SHUTDOWN
);

113 
	}
}

115 
	$›í
(c⁄° *
∑th«me
, 
Êags
)

117  
	`sysˇŒ2
(
SYS_OPEN
, 
∑th«me
, 
Êags
);

118 
	}
}

120 
	$ªad
(
fd
, *
buf
, 
size_t
 
Àn
)

122  
	`sysˇŒ3
(
SYS_READ
, 
fd
, 
buf
, 
Àn
);

123 
	}
}

125 
	$wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
Àn
)

127  
	`sysˇŒ3
(
SYS_WRITE
, 
fd
, 
buf
, 
Àn
);

128 
	}
}

	@bitmap.c

1 
	~<bôm≠.h
>

2 
	~<limôs.h
>

3 
	~<round.h
>

7 #ifde‡
FILESYS


8 
	~<fûe.h
>

11 #i‚de‡
ASSERT


12 
	#ASSERT
(
COND
Ë;

	)

18 
	#ELEM_BITS
 ( (
ñem_ty≥
Ë* 
CHAR_BIT
)

	)

28 
ölöe
 
size_t


29 
	$ñem_idx
 (
size_t
 
bô_idx
)

31  
bô_idx
 / 
ELEM_BITS
;

32 
	}
}

36 
ölöe
 
ñem_ty≥


37 
	$bô_mask
 (
size_t
 
bô_idx
)

39  (
ñem_ty≥
Ë1 << (
bô_idx
 % 
ELEM_BITS
);

40 
	}
}

43 
ölöe
 
size_t


44 
	$ñem_˙t
 (
size_t
 
bô_˙t
)

46  
	`DIV_ROUND_UP
 (
bô_˙t
, 
ELEM_BITS
);

47 
	}
}

50 
ölöe
 
size_t


51 
	$byã_˙t
 (
size_t
 
bô_˙t
)

53   (
ñem_ty≥
Ë* 
	`ñem_˙t
 (
bô_˙t
);

54 
	}
}

58 
ölöe
 
ñem_ty≥


59 
	$œ°_mask
 (c⁄° 
bôm≠
 *
b
)

61 
œ°_bôs
 = 
b
->
bô_˙t
 % 
ELEM_BITS
;

62  
œ°_bôs
 ? ((
ñem_ty≥
) 1 <<Üast_bits) - 1 : (elem_type) -1;

63 
	}
}

96 
bôm≠
 *

97 
	$bôm≠_¸óã_ö_buf
 (
size_t
 
bô_˙t
, *
block
, size_à
block_size
)

99 
bôm≠
 *
b
 = 
block
;

101 
	`ASSERT
 (
block_size
 >
	`bôm≠_buf_size
 (
bô_˙t
));

103 
b
->
bô_˙t
 = bit_cnt;

104 
b
->
bôs
 = (
ñem_ty≥
 *) (b + 1);

105 
	`bôm≠_£t_Æl
 (
b
, 
Ál£
);

106  
b
;

107 
	}
}

111 
size_t


112 
	$bôm≠_buf_size
 (
size_t
 
bô_˙t
)

114   (
bôm≠
Ë+ 
	`byã_˙t
 (
bô_˙t
);

115 
	}
}

134 
size_t


135 
	$bôm≠_size
 (c⁄° 
bôm≠
 *
b
)

137  
b
->
bô_˙t
;

138 
	}
}

143 
	$bôm≠_£t
 (
bôm≠
 *
b
, 
size_t
 
idx
, 
boﬁ
 
vÆue
)

145 
	`ASSERT
 (
b
 !
NULL
);

146 
	`ASSERT
 (
idx
 < 
b
->
bô_˙t
);

147 i‡(
vÆue
)

148 
	`bôm≠_m¨k
 (
b
, 
idx
);

150 
	`bôm≠_ª£t
 (
b
, 
idx
);

151 
	}
}

155 
	$bôm≠_m¨k
 (
bôm≠
 *
b
, 
size_t
 
bô_idx
)

157 
size_t
 
idx
 = 
	`ñem_idx
 (
bô_idx
);

158 
ñem_ty≥
 
mask
 = 
	`bô_mask
 (
bô_idx
);

164 
b
->
bôs
[
idx
] |
mask
;

165 
	}
}

169 
	$bôm≠_ª£t
 (
bôm≠
 *
b
, 
size_t
 
bô_idx
)

171 
size_t
 
idx
 = 
	`ñem_idx
 (
bô_idx
);

172 
ñem_ty≥
 
mask
 = 
	`bô_mask
 (
bô_idx
);

178 
b
->
bôs
[
idx
] &~
mask
;

179 
	}
}

185 
	$bôm≠_Êù
 (
bôm≠
 *
b
, 
size_t
 
bô_idx
)

187 
size_t
 
idx
 = 
	`ñem_idx
 (
bô_idx
);

188 
ñem_ty≥
 
mask
 = 
	`bô_mask
 (
bô_idx
);

194 
b
->
bôs
[
idx
] ^
mask
;

195 
	}
}

198 
boﬁ


199 
	$bôm≠_ã°
 (c⁄° 
bôm≠
 *
b
, 
size_t
 
idx
)

201 
	`ASSERT
 (
b
 !
NULL
);

202 
	`ASSERT
 (
idx
 < 
b
->
bô_˙t
);

203  (
b
->
bôs
[
	`ñem_idx
 (
idx
)] & 
	`bô_mask
 (idx)) != 0;

204 
	}
}

210 
	$bôm≠_£t_Æl
 (
bôm≠
 *
b
, 
boﬁ
 
vÆue
)

212 
	`ASSERT
 (
b
 !
NULL
);

214 
	`bôm≠_£t_mu…ùÀ
 (
b
, 0, 
	`bôm≠_size
 (b), 
vÆue
);

215 
	}
}

219 
	$bôm≠_£t_mu…ùÀ
 (
bôm≠
 *
b
, 
size_t
 
°¨t
, size_à
˙t
, 
boﬁ
 
vÆue
)

221 
size_t
 
i
;

223 
	`ASSERT
 (
b
 !
NULL
);

224 
	`ASSERT
 (
°¨t
 <
b
->
bô_˙t
);

225 
	`ASSERT
 (
°¨t
 + 
˙t
 <
b
->
bô_˙t
);

227 
i
 = 0; i < 
˙t
; i++)

228 
	`bôm≠_£t
 (
b
, 
°¨t
 + 
i
, 
vÆue
);

229 
	}
}

233 
size_t


234 
	$bôm≠_cou¡
 (c⁄° 
bôm≠
 *
b
, 
size_t
 
°¨t
, size_à
˙t
, 
boﬁ
 
vÆue
)

236 
size_t
 
i
, 
vÆue_˙t
;

238 
	`ASSERT
 (
b
 !
NULL
);

239 
	`ASSERT
 (
°¨t
 <
b
->
bô_˙t
);

240 
	`ASSERT
 (
°¨t
 + 
˙t
 <
b
->
bô_˙t
);

242 
vÆue_˙t
 = 0;

243 
i
 = 0; i < 
˙t
; i++)

244 i‡(
	`bôm≠_ã°
 (
b
, 
°¨t
 + 
i
Ë=
vÆue
)

245 
vÆue_˙t
++;

246  
vÆue_˙t
;

247 
	}
}

251 
boﬁ


252 
	$bôm≠_c⁄èös
 (c⁄° 
bôm≠
 *
b
, 
size_t
 
°¨t
, size_à
˙t
, 
boﬁ
 
vÆue
)

254 
size_t
 
i
;

256 
	`ASSERT
 (
b
 !
NULL
);

257 
	`ASSERT
 (
°¨t
 <
b
->
bô_˙t
);

258 
	`ASSERT
 (
°¨t
 + 
˙t
 <
b
->
bô_˙t
);

260 
i
 = 0; i < 
˙t
; i++)

261 i‡(
	`bôm≠_ã°
 (
b
, 
°¨t
 + 
i
Ë=
vÆue
)

262  
åue
;

263  
Ál£
;

264 
	}
}

268 
boﬁ


269 
	$bôm≠_™y
 (c⁄° 
bôm≠
 *
b
, 
size_t
 
°¨t
, size_à
˙t
)

271  
	`bôm≠_c⁄èös
 (
b
, 
°¨t
, 
˙t
, 
åue
);

272 
	}
}

276 
boﬁ


277 
	$bôm≠_n⁄e
 (c⁄° 
bôm≠
 *
b
, 
size_t
 
°¨t
, size_à
˙t
)

279  !
	`bôm≠_c⁄èös
 (
b
, 
°¨t
, 
˙t
, 
åue
);

280 
	}
}

284 
boﬁ


285 
	$bôm≠_Æl
 (c⁄° 
bôm≠
 *
b
, 
size_t
 
°¨t
, size_à
˙t
)

287  !
	`bôm≠_c⁄èös
 (
b
, 
°¨t
, 
˙t
, 
Ál£
);

288 
	}
}

296 
size_t


297 
	$bôm≠_sˇn
 (c⁄° 
bôm≠
 *
b
, 
size_t
 
°¨t
, size_à
˙t
, 
boﬁ
 
vÆue
)

299 
	`ASSERT
 (
b
 !
NULL
);

300 
	`ASSERT
 (
°¨t
 <
b
->
bô_˙t
);

302 i‡(
˙t
 <
b
->
bô_˙t
)

304 
size_t
 
œ°
 = 
b
->
bô_˙t
 - 
˙t
;

305 
size_t
 
i
;

306 
i
 = 
°¨t
; i <
œ°
; i++)

307 i‡(!
	`bôm≠_c⁄èös
 (
b
, 
i
, 
˙t
, !
vÆue
))

308  
i
;

310  
BITMAP_ERROR
;

311 
	}
}

320 
size_t


321 
	$bôm≠_sˇn_™d_Êù
 (
bôm≠
 *
b
, 
size_t
 
°¨t
, size_à
˙t
, 
boﬁ
 
vÆue
)

323 
size_t
 
idx
 = 
	`bôm≠_sˇn
 (
b
, 
°¨t
, 
˙t
, 
vÆue
);

324 i‡(
idx
 !
BITMAP_ERROR
)

325 
	`bôm≠_£t_mu…ùÀ
 (
b
, 
idx
, 
˙t
, !
vÆue
);

326  
idx
;

327 
	}
}

331 #ifde‡
FILESYS


333 
size_t


334 
	$bôm≠_fûe_size
 (c⁄° 
bôm≠
 *
b
)

336  
	`byã_˙t
 (
b
->
bô_˙t
);

337 
	}
}

341 
boﬁ


342 
	$bôm≠_ªad
 (
bôm≠
 *
b
, 
fûe
 *file)

344 
boﬁ
 
suc˚ss
 = 
åue
;

345 i‡(
b
->
bô_˙t
 > 0)

347 
off_t
 
size
 = 
	`byã_˙t
 (
b
->
bô_˙t
);

348 
suc˚ss
 = 
	`fûe_ªad_©
 (
fûe
, 
b
->
bôs
, 
size
, 0) == size;

349 
b
->
bôs
[
	`ñem_˙t
 (b->
bô_˙t
Ë- 1] &
	`œ°_mask
 (b);

351  
suc˚ss
;

352 
	}
}

356 
boﬁ


357 
	$bôm≠_wrôe
 (c⁄° 
bôm≠
 *
b
, 
fûe
 *file)

359 
off_t
 
size
 = 
	`byã_˙t
 (
b
->
bô_˙t
);

360  
	`fûe_wrôe_©
 (
fûe
, 
b
->
bôs
, 
size
, 0) == size;

361 
	}
}

	@device/ata.c

1 
	~<devi˚/©a.h
>

2 
	~<˘y≥.h
>

3 
	~<debug.h
>

4 
	~<°dboﬁ.h
>

5 
	~<°dio.h
>

6 
	~<devi˚/block.h
>

7 
	~<devi˚/∑πôi⁄.h
>

8 
	~<devi˚/io.h
>

9 
	~<öãºu±.h
>

10 
	~<synch.h
>

11 
	~<devi˚/c⁄sﬁe.h
>

13 
	#STUDENT_NAME
 "HeoM™woo"

	)

15 
£˘‹_ªad
 (
©a_devi˚
*, *);

16 
£˘‹_wrôe
 (
©a_devi˚
 *, const *);

18 
disk_h™dÀr
 (
öå_‰ame
 *
i‰ame
);

20 *
å™sf‹m_°rög
 (*, 
Àn
);

21 
¥öt_hex
(
buf
[], 
blk_£c_t
 ,
size
);

23 
jump_©a
 (
©a_devi˚
 *
devi˚
);

24 
boﬁ
 
dñay_©a_f‹
(
©a_devi˚
 *
devi˚
, 
wh©_f‹
);

25 
©a_cmd
(
©a_devi˚
 *
n
, 
uöt8_t
 
comm™d
);

26 
©a_io_ªady
 (
©a_devi˚
 *
d
, 
blk_£c_t
 
£c_num
);

27 
©a_wrôe
 (*
dev
, 
blk_£c_t
 
£c_num
, c⁄° *
buf
);

28 
©a_ªad
 (*
dev
, 
blk_£c_t
 
£c_num
, *
buf
);

31 
blk_dev_›s
 
	g©a_›s
 =

33 
©a_ªad
,

34 
©a_wrôe


38 
	gtmp_block
[
ATA_SECOR_SIZE
] = {0, };

45 
	$˛r_tmp_block
()

47 
i
 = 0; i < 
ATA_SECOR_SIZE
; i++)

48 
tmp_block
[
i
] = 0x00;

49 
	}
}

53 
	$öô_©a
()

55 
i
;

56 
blk_˙t_t
 
nblock
;

58 
i
 = 0; i < 
ATA_DEV_NUM
; i++){

59 if(
i
 == 0){

60 
©a
.
nodes
[
i
].
ty≥
 = 
ATA_MASTER
;

61 
©a
.
nodes
[
i
].
p‹t_addr
 = 0x1f0;

62 
©a
.
nodes
[
i
].
úq
 = 5 + 0x20;

65 
©a
.
nodes
[
i
].
ty≥
 = 
ATA_SLAVE
;

66 
©a
.
nodes
[
i
].
p‹t_addr
 = 0x170;

67 
©a
.
nodes
[
i
].
úq
 = 7 + 0x20;

70 
©a_devi˚
 * 
devi˚
 = &
©a
.
nodes
[
i
];

71 
	`£ma_öô
 (&
devi˚
->
£ma
, 0);

73 
	`ªg_h™dÀr
 (
devi˚
->
úq
, 
disk_h™dÀr
);

75 
	`jump_©a
 (
devi˚
);

76 
	`dñay_©a_f‹
 (
devi˚
, 
ATA_WAIT_IDLE
);

78 
	`©a_cmd
 (
devi˚
, 
ATA_CMD_IDENTIFY
);

80 
	`£ma_down
 (&
devi˚
->
£ma
);

82 
	`£˘‹_ªad
 (
devi˚
, 
tmp_block
);

84 
nblock
 = *(
blk_˙t_t
 *Ë(
tmp_block
 + 120);

85 if(
devi˚
->
ty≥
 =
ATA_MASTER
){

86 
	`¥ötk
("ata0 : ");

87 
	`blk_dev_ªgi°î
 (&
©a0_blk_dev
, 
BLK_DEV_HDD
,

88 
	`å™sf‹m_°rög
 (
tmp_block
 + 20, 20),

89 
	`å™sf‹m_°rög
 (
tmp_block
 + 54, 20),

90 
nblock
, 
BLK_SEC_SIZE
, &
©a_›s
, 
devi˚
);

91 
	`˛r_tmp_block
();

93 
	`¥ötk
("ata1 : ");

94 
	`blk_dev_ªgi°î
 (&
©a1_blk_dev
, 
BLK_DEV_HDD
,

95 
	`å™sf‹m_°rög
 (
tmp_block
 + 20, 20),

96 
	`å™sf‹m_°rög
 (
tmp_block
 + 54, 20),

97 
nblock
, 
BLK_SEC_SIZE
, &
©a_›s
, 
devi˚
);

98 
	`˛r_tmp_block
();

101 
	}
}

104 
	$jump_©a
 (
©a_devi˚
 *
devi˚
)

106 
uöt8_t
 
jmp_hd_ªg
 ;

107 i‡(
devi˚
->
ty≥
 =
ATA_MASTER
)

108 
jmp_hd_ªg
 = 
ATA_DRHD_MST
;

110 
jmp_hd_ªg
 = 
ATA_DRHD_SLV
;

112 
	`outb
 (
	`ATA_REG_DEVICE
 (
devi˚
->
p‹t_addr
), 
jmp_hd_ªg
 );

113 
	`öb
 (
	`ATA_DEV_CTRL_REG
 (
devi˚
->
p‹t_addr
));

114 
	}
}

116 
boﬁ


117 
	$dñay_©a_f‹
(
©a_devi˚
 *
devi˚
, 
wh©_f‹
)

119 
i
;

120 
i
 = 0; i < 5000; i++)

122 if(
wh©_f‹
 =
ATA_WAIT_IDLE
 &&

123 (
	`öb
 (
	`ATA_REG_STATUS
 (
devi˚
->
p‹t_addr
)Ë& (
ATA_SR_BSY
 | 
ATA_SR_DRQ
)) == 0)

124  
åue
;

125 if(
wh©_f‹
 =
ATA_WAIT_BUSY
 && !(
	`öb
 (
	`ATA_DEV_CTRL_REG
 (
devi˚
->
p‹t_addr
)Ë& 
ATA_SR_BSY
))

126  (
	`öb
 (
	`ATA_DEV_CTRL_REG
 (
devi˚
->
p‹t_addr
)Ë& 
ATA_SR_DRQ
) != 0;

128  
Ál£
;

129 
	}
}

132 
	$©a_io_ªady
 (
©a_devi˚
 *
d
, 
blk_£c_t
 
£c_num
)

135 
	`dñay_©a_f‹
 (
d
, 
ATA_WAIT_IDLE
);

136 
	`jump_©a
 (
d
);

137 
	`dñay_©a_f‹
 (
d
, 
ATA_WAIT_IDLE
);

138 
	`outb
 (
	`ATA_REG_ERR
 (
d
->
p‹t_addr
), 0);

139 
	`outb
 (
	`ATA_REG_NSECT
 (
d
->
p‹t_addr
), 1);

140 
	`outb
 (
	`ATA_REG_LBAL
 (
d
->
p‹t_addr
), 
£c_num
);

141 
	`outb
 (
	`ATA_REG_LBAM
 (
d
->
p‹t_addr
), 
£c_num
 >> 8);

142 
	`outb
 (
	`ATA_REG_LBAH
 (
d
->
p‹t_addr
), (
£c_num
 >> 16));

143 
	`outb
 (
	`ATA_REG_DEVICE
 (
d
->
p‹t_addr
), 
ATA_DRHD_LBA
 | (d->
ty≥
 =
ATA_SLAVE
 ? 
ATA_DRHD_SLV
 : 0Ë| (
£c_num
 >> 24));

144 
	}
}

152 
	$©a_ªad
 (*
dev
, 
blk_£c_t
 
£c_num
, *
buf
)

154 
©a_devi˚
 *
d
 = 
dev
;

155 
	`©a_io_ªady
 (
d
, 
£c_num
);

156 
	`©a_cmd
 (
d
, 
ATA_CMD_READ_PIO
);

157 
	`dñay_©a_f‹
 (
d
, 
ATA_WAIT_BUSY
);

158 
	`£ma_down
 (&
d
->
£ma
);

159 !(
	`öb
(
	`ATA_REG_STATUS
(
d
->
p‹t_addr
)) & 0x08));

160 
	`£˘‹_ªad
 (
d
, 
buf
);

161 
	`£ma_up
(&
d
->
£ma
);

162 
	}
}

171 
	$©a_wrôe
 (*
dev
, 
blk_£c_t
 
£c_num
, c⁄° *
buf
)

173 
©a_devi˚
 *
d
 = 
dev
;

174 
	`©a_io_ªady
 (
d
, 
£c_num
);

175 
	`©a_cmd
 (
d
, 
ATA_CMD_WRITE_PIO
);

176 i‡(!
	`dñay_©a_f‹
 (
d
, 
ATA_WAIT_BUSY
));

177 
	`£˘‹_wrôe
 (
d
, 
buf
);

178 
	`£ma_down
 (&
d
->
£ma
);

179 
	`£ma_up
(&
d
->
£ma
);

180 
	}
}

188 
	$©a_cmd
(
©a_devi˚
 *
devi˚
, 
uöt8_t
 
comm™d
)

190 
	`outb
 (
	`ATA_REG_CMD
 (
devi˚
->
p‹t_addr
), 
comm™d
);

191 
	}
}

196 
	$£˘‹_ªad
 (
©a_devi˚
 *
devi˚
, *
£˘‹
)

198 
	`ösw
 (
	`ATA_REG_DATA
 (
devi˚
->
p‹t_addr
), 
£˘‹
, 
ATA_SECOR_SIZE
 / 2);

199 
	}
}

204 
	$£˘‹_wrôe
 (
©a_devi˚
 *
devi˚
, c⁄° *
£˘‹
)

206 
	`outsw
 (
	`ATA_REG_DATA
 (
devi˚
->
p‹t_addr
), 
£˘‹
, 
ATA_SECOR_SIZE
 / 2);

207 
	}
}

212 
	$disk_h™dÀr
 (
öå_‰ame
 *
i‰ame
)

214 
©a_devi˚
 *
devi˚
;

215 
i
;

216 
öå_num
 = 
i‰ame
->
vec_no
;

218 
i
 = 0; i < 2; i++){

219 
devi˚
 = &
©a
.
nodes
[
i
];

220 i‡(
öå_num
 =
devi˚
->
úq
)

222 
	`öb
 (
	`ATA_REG_STATUS
 (
devi˚
->
p‹t_addr
));

223 
	`£ma_up
 (&
devi˚
->
£ma
);

227 
	}
}

230 
	$¥öt_hex
(
buf
[], 
blk_£c_t
 
£c_num
, 
Àn
) {

232 
i
,
j
;

233 
uöt32_t
 
addr
 = 
£c_num
 * 
ATA_SECOR_SIZE
;

234 *
tmp
 = 
buf
;

235 
i
 = 0; i < 
Àn
; i+= 0x10)

237 
	`¥ötk
("%08x: ", 
addr
 + 
i
);

238 
j
 = 0; j < 0x10; j++)

240 if(
i
 + 
j
 >
Àn
)

241 
	`¥ötk
(" ");

243 
	`¥ötk
("%02x", 
tmp
[
i
+
j
]);

244 if(
j
 % 2 == 1)

245 
	`¥ötk
(" ");

247 
	`¥ötk
(" | ");

248 
j
 = 0; j < 0x10; j++)

250 if(
i
 + 
j
 >
Àn
)

253 if(
	`isgøph
(
tmp
[
i
+
j
]))

254 
	`¥ötk
("%c", 
tmp
[
i
+
j
]);

255 if(
tmp
[
i
+
j
] == 0x20)

256 
	`¥ötk
(" ");

258 
	`¥ötk
(".");

260 
	`¥ötk
("\n");

262 
	}
}

265 
	$å™sf‹m_°rög
 (*
buf
, 
Àn
)

267 
i
;

268 
tmp
;

270 
i
 = 0; i+2 <
Àn
; i += 2)

272 
tmp
 = 
buf
[
i
];

273 
buf
[
i
] = buf[i+1];

274 
buf
[
i
+1] = 
tmp
;

277 --
Àn
 > 0){

278 if(
buf
[
Àn
] != 0x20 && buf[len] != 0){

279 
buf
[
Àn
+1]=0;

284  
buf
;

285 
	}
}

	@device/block.c

1 
	~<devi˚/block.h
>

2 
	~<devi˚/©a.h
>

3 
	~<devi˚/c⁄sﬁe.h
>

7 
	$blk_dev_ªad
 (
blk_dev
 *blk_dev, 
blk_£c_t
 
£˘‹
, *
buf
)

9 
	`¥ötk
("boooo\n");

11 
blk_dev
->
›s
->
	`ªad
 (blk_dev->
devi˚_öfo
, 
£˘‹
, 
buf
);

12 
	}
}

16 
	$blk_dev_wrôe
 (
blk_dev
 *blk_dev, 
blk_£c_t
 
£˘‹
, c⁄° *
buf
)

18 
blk_dev
->
›s
->
	`wrôe
 (blk_dev->
devi˚_öfo
, 
£˘‹
, 
buf
);

19 
	}
}

27 
	$blk_dev_ªgi°î
 (
blk_dev
 * blk_dev, 
blk_dev_t
 
ty≥
,

28 c⁄° *
dev
, c⁄° *
£rül
, 
blk_˙t_t
 
cou¡
,

29 
blk_size_t
 
size
, c⁄° 
blk_dev_›s
 *
›s
, *
devi˚_öfo
)

32 
blk_dev
->
ty≥
 =Åype;

33 
blk_dev
->
blk_cou¡
 = 
cou¡
;

34 
blk_dev
->
blk_size
 = 
size
;

35 
blk_dev
->
›s
 = ops;

36 
blk_dev
->
devi˚_öfo
 = device_info;

38 
	`¥ötk
("block devi˚Ñegi°î :%s, sîü»:%†\n", 
dev
, 
£rül
);

40 
	}
}

	@device/console.c

1 
	~<öãºu±.h
>

2 
	~<devi˚/c⁄sﬁe.h
>

3 
	~<ty≥.h
>

4 
	~<devi˚/kbd.h
>

5 
	~<devi˚/io.h
>

6 
	~<devi˚/pô.h
>

7 
	~<°d¨g.h
>

9 
	#HSCREEN
 80

	)

10 
	#VSCREEN
 25

	)

11 
	#SIZE_SCREEN
 
HSCREEN
 * 
VSCREEN


	)

12 
	#NSCROLL
 100

	)

13 
	#SIZE_SCROLL
 
NSCROLL
 * 
HSCREEN


	)

14 
	#VIDIO_MEMORY
 0xB8000

	)

16 
	#IO_BASE
 0x3F8

	)

17 
	#FIRST_SPORT
 (
IO_BASE
)

	)

18 
	#LINE_STATUS
 (
IO_BASE
 + 5Ë

	)

19 
	#THR_EMPTY
 0x20

	)

21 
	g√xt_löe
[2];

23 #ifde‡
SCREEN_SCROLL


25 
	#buf_e
 (
buf_w
 + 
SIZE_NSCROLL
)

	)

26 
	#SCROLL_END
 
buf_s
 + 
SIZE_SCROLL


	)

28 
	gbuf_s
[
SIZE_SCROLL
];

29 *
	gbuf_w
;

30 *
	gbuf_p
;

32 
	gsum_y
;

34 
boﬁ
 
	ga_s
 = 
TRUE
;

37 
	$öô_c⁄sﬁe
()

39 
Glob_x
 = 0;

40 
Glob_y
 = 2;

42 
√xt_löe
[0] = '\n';

43 
√xt_löe
[1] = '\r';

45 #ifde‡
SCREEN_SCROLL


46 
buf_w
 = 
buf_s
;

47 
buf_p
 = 
buf_s
;

48 
a_s
 = 
TRUE
;

50 
sum_y
 = 0;

53 
	}
}

55 
	$£t_curs‹
()

57 
	`outb
(0x3D4, 0x0F);

58 
	`outb
(0x3D5, (
Glob_y
*
HSCREEN
+
Glob_x
)&0xFF);

59 
	`outb
(0x3D4, 0x0E);

60 
	`outb
(0x3D5, (((
Glob_y
*
HSCREEN
+
Glob_x
)>>8)&0xFF));

61 
	}
}

63 
	$PrötCh¨ToS¸ìn
(
x
, 
y
, c⁄° *
pSåög
)

65 
Glob_x
 = 
x
;

66 
Glob_y
 = 
y
;

67 
i
 = 0;

68 
pSåög
[
i
] != 0)

70 
	`PrötCh¨
(
Glob_x
++, 
Glob_y
, 
pSåög
[
i
++]);

72 
a_s
 = 
TRUE
;

73 
	}
}

75 
	$PrötCh¨
(
x
, 
y
, c⁄° 
Såög
)

77 #ifde‡
SCREEN_SCROLL


78 i‡(
Såög
 == '\n') {

79 if((
y
+1Ë> 
VSCREEN
) {

80 
	`s¸ﬁl
();

81 
y
--;

83 
Glob_x
 = 0;

84 
Glob_y
 = 
y
+1;

85 
sum_y
++;

88 i‡(
Såög
 == '\b') {

89 if(
Glob_x
 == 0) ;

90 
Glob_x
-=2;

91 
buf_w
[
y
 * 
HSCREEN
 + 
x
 - 1] = 0;

94 i‡((
y
 >
VSCREEN
Ë&& (
x
 >= 0)) {

95 
	`s¸ﬁl
();

96 
x
 = 0;

97 
y
--;

100 * 
b
 = &
buf_w
[
y
 * 
HSCREEN
 + 
x
];

101 if(
b
 >
SCROLL_END
)

102 
b
-
SIZE_SCROLL
;

103 *
b
 = 
Såög
;

105 if(
Glob_x
 >
HSCREEN
)

107 
Glob_x
 = 0;

108 
Glob_y
++;

109 
sum_y
++;

113 
CHAR
 *
pS¸ìn
 = (CHAR *)
VIDIO_MEMORY
;

115 i‡(
Såög
 == '\n') {

116 if((
y
+1) > 24) {

117 
	`s¸ﬁl
();

118 
y
--;

120 
pS¸ìn
 +((
y
+1) * 80);

121 
Glob_x
 = 0;

122 
Glob_y
 = 
y
+1;

126 i‡((
y
 > 24Ë&& (
x
 >= 0)) {

127 
	`s¸ﬁl
();

128 
x
 = 0; 
y
--;

131 
pS¸ìn
 +–
y
 * 80Ë+ 
x
;

132 
pS¸ìn
[0].
bAâ
 = 0x07;

133 
pS¸ìn
[0].
bCh
 = 
Såög
;

135 if(
Glob_x
 > 79)

137 
Glob_x
 = 0;

138 
Glob_y
++;

142 
	}
}

144 
	$˛rS¸ìn
()

146 
CHAR
 *
pS¸ìn
 = (CHAR *Ë
VIDIO_MEMORY
;

147 
i
;

149 
i
 = 0; i < 80*25; i++) {

150 (*
pS¸ìn
).
bAâ
 = 0x07;

151 (*
pS¸ìn
++).
bCh
 = ' ';

153 
Glob_x
 = 0;

154 
Glob_y
 = 0;

155 
	}
}

157 
	$s¸ﬁl
()

159 #ifde‡
SCREEN_SCROLL


160 
buf_w
 +
HSCREEN
;

161 
buf_p
 +
HSCREEN
;

163 
buf_w
 > 
SCROLL_END
)

164 
buf_w
 -
SIZE_SCROLL
;

168 
i
;

169 *
buf_±r
 = 
buf_w
 + 
SIZE_SCREEN
;

170 
i
 = 0; i < 
HSCREEN
; i++)

172 if(
buf_±r
 > 
SCROLL_END
)

173 
buf_±r
 -
SIZE_SCROLL
;

174 *(
buf_±r
++) = 0;

179 
CHAR
 *
pS¸ìn
 = (CHAR *Ë
VIDIO_MEMORY
;

180 
CHAR
 *
pS¸Buf
 = (CHAR *Ë(
VIDIO_MEMORY
 + 2*80);

181 
i
;

182 
i
 = 0; i < 80*24; i++) {

183 (*
pS¸ìn
).
bAâ
 = (*
pS¸Buf
).bAtt;

184 (*
pS¸ìn
++).
bCh
 = (*
pS¸Buf
++).bCh;

186 
i
 = 0; i < 80; i++) {

187 (*
pS¸ìn
).
bAâ
 = 0x07;

188 (*
pS¸ìn
++).
bCh
 = ' ';

191 
Glob_y
--;

193 
	}
}

195 #ifde‡
SERIAL_STDOUT


196 
	$¥ötCh¨ToSîül
(c⁄° *
pSåög
)

198 
i
;

199 
öå_Àvñ
 
ﬁd_Àvñ
 = 
	`öå_dißbÀ
();

200 ;*
pSåög
 !
NULL
;ÖString++)

202 if(*
pSåög
 != '\n'){

203 (
	`öb
(
LINE_STATUS
Ë& 
THR_EMPTY
) == 0)

205 
	`outb
(
FIRST_SPORT
, *
pSåög
);

209 
i
=0; i<2; i++){

210 (
	`öb
(
LINE_STATUS
Ë& 
THR_EMPTY
) == 0)

212 
	`outb
(
FIRST_SPORT
, 
√xt_löe
[
i
]);

216 
	`öå_£t_Àvñ
 (
ﬁd_Àvñ
);

217 
	}
}

221 
	$¥ötk
(c⁄° *
fmt
, ...)

223 
buf
[1024];

224 
va_li°
 
¨gs
;

225 
Àn
;

227 
	`va_°¨t
(
¨gs
, 
fmt
);

228 
Àn
 = 
	`v•rötk
(
buf
, 
fmt
, 
¨gs
);

229 
	`va_íd
(
¨gs
);

231 #ifde‡
SERIAL_STDOUT


232 
	`¥ötCh¨ToSîül
(
buf
);

234 
	`PrötCh¨ToS¸ìn
(
Glob_x
, 
Glob_y
, 
buf
);

236  
Àn
;

237 
	}
}

239 #ifde‡
SCREEN_SCROLL


240 
	$s¸ﬁl_s¸ìn
(
off£t
)

242 * 
tmp_buf_p
;

243 * 
tmp_buf_w
;

244 if(
a_s
 =
TRUE
 && 
off£t
 > 0 && 
buf_p
 =
buf_w
)

247 
a_s
 = 
FALSE
;

249 
tmp_buf_p
 = (*)(()
buf_p
 + (
HSCREEN
 * 
off£t
));

250 
tmp_buf_w
 = 
buf_w
 + 
SIZE_SCREEN
;

251 if(
tmp_buf_w
 > 
SCROLL_END
)

252 
tmp_buf_w
 = (*)((Èmp_buf_w - 
SIZE_SCROLL
);

254 if(
sum_y
 < 
NSCROLL
 && 
off£t
 < 0 && 
tmp_buf_p
 <
buf_s
 && 
buf_p
 > buf_s) ;

255 if(
off£t
 > 0 && 
tmp_buf_p
 > 
buf_w
 && 
buf_p
 <= buf_w) ;

256 if(
off£t
 < 0 && 
tmp_buf_p
 <
tmp_buf_w
 && 
buf_p
 >Åmp_buf_w) ;

258 
buf_p
 = 
tmp_buf_p
;

260 if(
buf_p
 >
SCROLL_END
)

261 
buf_p
 = (*)(()buf_∞- 
SIZE_SCROLL
);

262 if(
buf_p
 < 
buf_s
)

263 
buf_p
 = (*)(()buf_∞+ 
SIZE_SCROLL
);

265 
	`ª‰eshS¸ìn
();

266 
	}
}

268 
	$£t_ÁŒow
()

270 
a_s
 = 
TRUE
;

271 
	}
}

273 
	$ª‰eshS¸ìn
()

275 
CHAR
 *
p_s
(CHAR *Ë
VIDIO_MEMORY
;

276 
i
;

278 if(
a_s
)

279 
buf_p
 = 
buf_w
;

281 * 
b
 = 
buf_p
;

283 
i
 = 0; i < 
SIZE_SCREEN
; i++, 
b
++, 
p_s
++)

285 if(
b
 >
SCROLL_END
)

286 
b
 -
SIZE_SCROLL
;

287 
p_s
->
bAâ
 = 0x07;

288 
p_s
->
bCh
 = *
b
;

290 
	}
}

	@device/device.c

1 
	~<devi˚/c⁄sﬁe.h
>

2 
	~<devi˚/devi˚.h
>

3 
	~<devi˚/io.h
>

10 
	$dev_shutdown
()

12 c⁄° 
s
[] = "Shutdown";

13 c⁄° *
p
;

18 
	`¥ötk
 ("Powering off...\n");

23 
p
 = 
s
; *p != '\0';Ö++)

24 
	`outb
 (0x8900, *
p
);

29 
asm
 volatile ("cli; hlt" : : : "memory");

32 
	`¥ötk
 ("stillÑunning...\n");

34 
	}
}

	@device/kbd.c

1 
	~<devi˚/kbd.h
>

2 
	~<ty≥.h
>

3 
	~<devi˚/c⁄sﬁe.h
>

4 
	~<öãºu±.h
>

5 
	~<devi˚/io.h
>

6 
	~<ssulib.h
>

8 
Key_Sètus
 
	gKSèt
;

9 
	gkbd_buf
[
BUFSIZ
];

10 
	gbuf_hód
, 
	gbuf_èû
;

12 
BYTE
 
	gKbd_M≠
[4][
KBDMAPSIZE
] = {

47 
boﬁ
 
kbd_ªmove_ch¨
();

49 
	$öô_kbd
()

51 
KSèt
.
Shi·Fœg
 = 0;

52 
KSèt
.
C≠¶ockFœg
 = 0;

53 
KSèt
.
NumlockFLag
 = 0;

54 
KSèt
.
S¸ﬁŒockFœg
 = 0;

55 
KSèt
.
Exã¡edFœg
 = 0;

56 
KSèt
.
Pau£Fœg
 = 0;

58 
buf_hód
 = 0;

59 
buf_èû
 = 0;

61 
	`ªg_h™dÀr
(33, 
kbd_h™dÀr
);

62 
	}
}

64 
	$Upd©eKeySèt
(
BYTE
 
Sˇncode
)

66 if(
Sˇncode
 & 0x80)

68 if(
Sˇncode
 == 0xB6 || Scancode == 0xAA)

70 
KSèt
.
Shi·Fœg
 = 
FALSE
;

75 if(
Sˇncode
 =0x3A && 
KSèt
.
C≠¶ockFœg
)

77 
KSèt
.
C≠¶ockFœg
 = 
FALSE
;

79 if(
Sˇncode
 == 0x3A)

80 
KSèt
.
C≠¶ockFœg
 = 
TRUE
;

81 if(
Sˇncode
 == 0x36 || Scancode == 0x2A)

83 
KSèt
.
Shi·Fœg
 = 
TRUE
;

87 if(
Sˇncode
 == 0xE0)

89 
KSèt
.
Exã¡edFœg
 = 
TRUE
;

91 if(
KSèt
.
Exã¡edFœg
 =
TRUE
 && 
Sˇncode
 != 0xE0)

93 
KSèt
.
Exã¡edFœg
 = 
FALSE
;

95 
	}
}

97 
BOOL
 
	$C⁄vîtSˇncodeToASCII
(
BYTE
 
Sˇncode
, BYTE *
Asciicode
)

99 if(
KSèt
.
Pau£Fœg
 > 0)

101 
KSèt
.
Pau£Fœg
--;

102  
FALSE
;

105 if(
KSèt
.
Exã¡edFœg
 =
TRUE
)

107 if(
Sˇncode
 & 0x80)

108  
FALSE
;

109 *
Asciicode
 = 
Sˇncode
;

110  
TRUE
;

113 if(
Sˇncode
 == 0xE1)

115 *
Asciicode
 = 0x00;

116 
KSèt
.
Pau£Fœg
 = 2;

117  
FALSE
;

119 if(
Sˇncode
 == 0xE0)

121 *
Asciicode
 = 0x00;

122  
FALSE
;

125 if(!(
Sˇncode
 & 0x80))

127 if(
KSèt
.
Shi·Fœg
 & KSèt.
C≠¶ockFœg
)

129 *
Asciicode
 = 
Kbd_M≠
[3][
Sˇncode
 & 0x7F];

131 if(
KSèt
.
Shi·Fœg
)

133 *
Asciicode
 = 
Kbd_M≠
[2][
Sˇncode
 & 0x7F];

135 if(
KSèt
.
C≠¶ockFœg
)

137 *
Asciicode
 = 
Kbd_M≠
[1][
Sˇncode
 & 0x7F];

141 *
Asciicode
 = 
Kbd_M≠
[0][
Sˇncode
];

144  
TRUE
;

146  
FALSE
;

147 
	}
}

149 
boﬁ
 
	$isFuŒ
()

151  (
buf_hód
-1Ë% 
BUFSIZ
 =
buf_èû
;

152 
	}
}

154 
boﬁ
 
	$isEm±y
()

156  
buf_hód
 =
buf_èû
;

157 
	}
}

159 
	$kbd_h™dÀr
(
öå_‰ame
 *
i‰ame
)

161 
BYTE
 
asciicode
;

162 
BYTE
 
d©a
 = 
	`öb
(0x60);

164 if(
	`C⁄vîtSˇncodeToASCII
(
d©a
, &
asciicode
))

167 #ifde‡
SCREEN_SCROLL


168 if–
KSèt
.
Exã¡edFœg
 =
TRUE
)

170 
asciicode
)

181 
	`s¸ﬁl_s¸ìn
(-1);

184 
	`s¸ﬁl_s¸ìn
(+1);

187 
	`£t_ÁŒow
();

193 if–!
	`isFuŒ
(Ë&& 
asciicode
 != 0)

195 
kbd_buf
[
buf_èû
] = 
asciicode
;

196 
buf_èû
 = (buf_èû + 1Ë% 
BUFSIZ
;

202 
	`Upd©eKeySèt
(
d©a
);

203 
	}
}

205 
	$kbd_ªad_ch¨
()

207 if–
	`isEm±y
())

210 
ªt
;

211 
ªt
 = 
kbd_buf
[
buf_hód
];

212 
buf_hód
 = (buf_hód + 1)%
BUFSIZ
;

213  
ªt
;

214 
	}
}

	@device/partition.c

	@device/pit.c

2 
	~<devi˚/pô.h
>

3 
	~<devi˚/io.h
>

4 
	~<öãºu±.h
>

6 
	$öô_pô
()

8 
öå_Àvñ
 
ﬁd_Àvñ
 = 
	`öå_dißbÀ
();

9 
	`outb
(
PIT_COMMAND
, (
PIT_COUNTER0
 | 
PIT_RW_LMBYTE
 | 
PIT_MODE2
 | 
PIT_BINARY
) );

10 
	`outb
(
PIT_CHANNEL0
, (
PIT_HZ
/
PIT_FRQ_HZ
)%0xff);

11 
	`outb
(
PIT_CHANNEL0
, (
PIT_HZ
/
PIT_FRQ_HZ
)>>8);

12 
	`öå_£t_Àvñ
 (
ﬁd_Àvñ
);

13 
	}
}

	@filesys/file.c

1 
	~<fûesys/öode.h
>

2 
	~<¥oc/¥oc.h
>

3 
	~<devi˚/c⁄sﬁe.h
>

4 
	~<mem/∑Œoc.h
>

7 
	$fûe_›í
(
öode
 *öode, 
Êags
, 
mode
)

9 
fd
;

10 
ssufûe
 **
fûe_curs‹
 = 
cur_¥o˚ss
->
fûe
;

12 
fd
 = 0; fd < 
NR_FILEDES
; fd++)

14 if(
fûe_curs‹
[
fd
] =
NULL
)

16 if–(
fûe_curs‹
[
fd
] = (
ssufûe
 *)
	`∑Œoc_gë_∑ge
()Ë=
NULL
)

22 
öode
->
¢_ªfcou¡
++;

24 
fûe_curs‹
[
fd
]->
öode
 = inode;

25 
fûe_curs‹
[
fd
]->
pos
 = 0;

26 
fûe_curs‹
[
fd
]->
Êags
 = flags;

27 
fûe_curs‹
[
fd
]->
unu£d
 = 0;

29  
fd
;

30 
	}
}

32 
	$fûe_˛o£
(
uöt32_t
 
fd
)

36 
	}
}

38 
	$fûe_£ek
(
uöt32_t
 
fd
, 
uöt16_t
 
pos
)

40 
cur_¥o˚ss
->
fûe
[
fd
]->
pos
 =Öos;

41  
pos
;

42 
	}
}

44 
	$fûe_wrôe
(
öode
 *öode, 
size_t
 
off£t
, *
buf
, size_à
Àn
)

46  
	`öode_wrôe
(
öode
, 
off£t
, 
buf
, 
Àn
);

47 
	}
}

49 
	$fûe_ªad
(
öode
 *öode, 
size_t
 
off£t
, *
buf
, size_à
Àn
)

51  
	`öode_ªad
(
öode
, 
off£t
, 
buf
, 
Àn
);

52 
	}
}

	@filesys/fs.c

1 
	~<fûesys/öode.h
>

2 
	~<fûesys/fs.h
>

3 
	~<bôm≠.h
>

4 
	~<devi˚/block.h
>

5 
	~<devi˚/©a.h
>

6 
	~<devi˚/c⁄sﬁe.h
>

7 
	~<°rög.h
>

10 
võw_bôm≠
(
bôm≠
 *
b
);

12 
	gbôm≠block
[
SSU_BLOCK_SIZE
];

13 
blk_dev
 
©a1_blk_dev
;

15 
	$öô_fûesy°em
()

17 
	`fs_mou¡
(&
fûesys
, &
©a1_blk_dev
);

18 
	`¥ötk
("mou¡ devi˚ : [%s],Çblocks[%d]\n", 
fûesys
.
fs_sb
.
sb_vﬁ«me
, fûesys.fs_sb.
sb_nblocks
);

20 
	`öô_öode_èbÀ
(&
fûesys
);

21 
	}
}

24 
	$võw_bôm≠
(
bôm≠
 *
b
)

26 
i
,
j
;

27 
˙t
 = 48;

29 
j
=0; j<
˙t
; )

31 
i
=0; i<8 && 
j
<
˙t
; i++,j++)

32 
	`¥ötk
("%d ", 
	`bôm≠_ã°
(
b
, 
j
) ? 1 : 0);

34 
	`¥ötk
(" ");

36 
i
=0; i<8 && 
j
<
˙t
; i++,j++)

37 
	`¥ötk
("%d ", 
	`bôm≠_ã°
(
b
, 
j
) ? 1 : 0);

39 
	`¥ötk
("\n");

42 
	`¥ötk
("\n");

43 
	}
}

46 
	$fs_mou¡
(
ssu_fs
 *
fs
, 
blk_dev
 *
dev
)

48 
ªsu…
 = 0;

49 
i
;

51 
su≥rblock
[
SSU_BLOCK_SIZE
];

53 
fs
->
fs_devi˚
 = 
dev
;

56 
ªsu…
 = 
	`fs_ªadblock
(
fs
, 
SSU_SUPER_BLOCK
, 
su≥rblock
);

57 if(
ªsu…
)

59 
	`¥ötk
("Read Superblock Error");

62 
fs
->
fs_sb
.
sb_magic
 = *(
uöt32_t
*)
su≥rblock
;

63 if(
fs
->
fs_sb
.
sb_magic
 !
SSU_SB_MAGIC
)

65 
fs
->
fs_sb
.
sb_magic
 = 
SSU_SB_MAGIC
;

67 if(
dev
->
ty≥
 =
BLK_DEV_HDD
)

68 
	`£t_vﬁ«me
(&
fs
->
fs_sb
, "hdd0");

70 
fs
->
fs_sb
.
sb_nblocks
 = (fs->
fs_devi˚
->
blk_cou¡
 / (
SSU_BLOCK_SIZE
 / 
dev
->
blk_size
));

74 
fs
->
fs_sb
.
sb_nblocks
 = *((
uöt32_t
*)(
su≥rblock
 + (uint32_t)));

75 
	`£t_vﬁ«me
(&
fs
->
fs_sb
, 
su≥rblock
 + (
uöt32_t
) * 2);

80 
ªsu…
 = 
	`fs_ªadblock
(
fs
, 
SSU_BITMAP_BLOCK
, 
bôm≠block
);

83 
fs
->
fs_blkm≠
 = (
bôm≠
*Ë
bôm≠block
;

84 if(
fs
->
fs_blkm≠
->
bô_˙t
 !fs->
fs_sb
.
sb_nblocks
)

86 
fs
->
fs_blkm≠
 = 
	`bôm≠_¸óã_ö_buf
(fs->
fs_sb
.
sb_nblocks
, 
bôm≠block
, 
SSU_BLOCK_SIZE
/2);

87 
i
=0; i<
SSU_DATA_BLOCK
; i++)

89 
	`bôm≠_£t
(
fs
->
fs_blkm≠
, 
i
, 
åue
);

92 
	`¥ötk
("öôülizêblock bôm≠ : %d bô\n", 
fs
->
fs_blkm≠
->
bô_˙t
);

95 
	`¥ötk
("lﬂd block bôm≠ : %d bô\n", 
fs
->
fs_blkm≠
->
bô_˙t
);

99 
fs
->
fs_öodem≠
 = (
bôm≠
*)(
bôm≠block
 + 
SSU_BLOCK_SIZE
/2);

100 if(
fs
->
fs_öodem≠
->
bô_˙t
 !
NUM_INODE
)

102 
fs
->
fs_öodem≠
 = 
	`bôm≠_¸óã_ö_buf
(
NUM_INODE
, 
bôm≠block
 + 
SSU_BLOCK_SIZE
/2, SSU_BLOCK_SIZE/2);

103 
	`¥ötk
("öôülizêöodêbôm≠ : %d bô\n", 
fs
->
fs_öodem≠
->
bô_˙t
);

106 
	`¥ötk
("lﬂd inodêbôm≠ : %d bô\n", 
fs
->
fs_öodem≠
->
bô_˙t
);

109 
	`sync_ssufs
(
fs
, 0, (*)(&fs->
fs_sb
));

110  
ªsu…
;

111 
	}
}

113 
	$fs_ªadblock
(
ssu_fs
 *
fs
, 
uöt32_t
 
blknum
, *
buf
)

115 
ªsu…
 = 0;

116 
°¨t£c
 = 
blknum
 * 
	`SECTORCOUNT
(
fs
->
fs_devi˚
);

117 
i
;

118 
i
=0; i<
	`SECTORCOUNT
(
fs
->
fs_devi˚
); i++)

119 
	`DEVOP_READ
(
fs
->
fs_devi˚
, 
°¨t£c
 + 
i
, 
buf
 + (ò* fs->fs_devi˚->
blk_size
));

121  
ªsu…
;

122 
	}
}

124 
	$fs_wrôeblock
(
ssu_fs
 *
fs
, 
uöt32_t
 
blknum
, c⁄° *
buf
)

126 
ªsu…
 = 0;

127 
°¨t£c
 = 
blknum
 * 
	`SECTORCOUNT
(
fs
->
fs_devi˚
);

128 
i
;

130 
i
=0; i<
	`SECTORCOUNT
(
fs
->
fs_devi˚
); i++)

131 
	`DEVOP_WRITE
(
fs
->
fs_devi˚
, 
°¨t£c
 + 
i
, 
buf
 + (ò* fs->fs_devi˚->
blk_size
));

133  
ªsu…
;

134 
	}
}

138 
	$bÆloc
(
bôm≠
 *
b
, *
ödex
)

140 
i
;

141 
íd
 = 
	`bôm≠_size
(
b
);

143 
i
 = 0; i <
íd
; i++)

145 if(!
	`bôm≠_ã°
(
b
, 
i
))

147 *
ödex
 = 
i
;

148 
	`bôm≠_£t
(
b
, 
i
, 
åue
);

149  
i
;

154 
	}
}

157 
	$sync_bôm≠block
(
ssu_fs
 *
fs
)

159 
ªsu…
 = 0;

161 
ªsu…
 = 
	`fs_wrôeblock
(
fs
, 
SSU_BITMAP_BLOCK
, 
bôm≠block
);

163  
ªsu…
;

164 
	}
}

167 
	$sync_su≥rblock
(
ssu_fs
 *
fs
, c⁄° * 
su≥rblock
)

169 
ªsu…
 = 0;

171 
ªsu…
 = 
	`fs_wrôeblock
(
fs
, 
SSU_SUPER_BLOCK
, 
su≥rblock
);

173  
ªsu…
;

174 
	}
}

177 
	$sync_ssufs
(
ssu_fs
 *
fs
, c⁄° * 
öodes
, c⁄° * 
su≥rblock
)

179 
ªsu…
 = 0;

181 
ªsu…
 = 
	`sync_bôm≠block
(
fs
);

182 if(
ªsu…
)

184 
	`¥ötk
("sync_bitmapblock()Érror\n");

188 
ªsu…
 = 
	`sync_su≥rblock
(
fs
, 
su≥rblock
);

189 if(
ªsu…
)

191 
	`¥ötk
("sync_superblock()Érror\n");

194 
	}
}

197 
	$£t_vﬁ«me
(
ssu_su≥rblock
 *
sb
, c⁄° *
«me
)

199 
i
;

200 
i
=0; 
«me
[i] !'\0' && i < 
VOLNAME_LEN
; i++)

201 
sb
->
sb_vﬁ«me
[
i
] = 
«me
[i];

203 
sb
->
sb_vﬁ«me
[
i
] = '\0';

204 
	}
}

	@filesys/inode.c

1 
	~<fûesys/öode.h
>

2 
	~<devi˚/©a.h
>

3 
	~<devi˚/block.h
>

4 
	~<bôm≠.h
>

5 
	~<devi˚/c⁄sﬁe.h
>

6 
	~<°rög.h
>

11 
	gtmpblock
[
SSU_BLOCK_SIZE
];

12 
	gtmpblock_ödúe˘
[
SSU_BLOCK_SIZE
];

13 
¥o˚ss
 *
cur_¥o˚ss
;

15 
	$öô_öode_èbÀ
(
ssu_fs
 *
fs
)

17 
bôm≠
 *
im≠
 = 
fs
->
fs_öodem≠
;

18 
i
;

20 
i
=0; i<
NUM_INODEBLOCK
; i++)

21 
	`fs_ªadblock
(
fs
, 
SSU_INODE_BLOCK
 + 
i
, ((*)
öode_tbl
Ë+ (ò* 
SSU_BLOCK_SIZE
));

23 if(!
	`bôm≠_ã°
(
im≠
, 
INO_ROOTDIR
))

25 
	`mem£t
(
öode_tbl
, 0, (
öode
Ë* 
NUM_INODE
);

27 
	`bôm≠_£t
(
im≠
, 0, 
åue
);

28 
	`bôm≠_£t
(
im≠
, 1, 
åue
);

30 
öode_tbl
[0].
¢_öo
 = 0;

31 
öode_tbl
[0].
¢_size
 = 0;

32 
öode_tbl
[0].
¢_ty≥
 = 
SSU_TYPE_DIR
;

33 
öode_tbl
[0].
¢_∆ök
 = 0;

34 
öode_tbl
[0].
¢_ªfcou¡
 = 0;

35 
öode_tbl
[0].
¢_fs
 = 
fs
;

39 
	`make_dú
(
öode_tbl
, ".");

40 
	`sync_öode
(
fs
, 
öode_tbl
 + 
INO_ROOTDIR
);

41 
	`sync_bôm≠block
(
fs
);

44 
cur_¥o˚ss
->
roŸdú
 = 
öode_tbl
 + 
INO_ROOTDIR
;

45 
cur_¥o˚ss
->
cwd
 = cur_¥o˚ss->
roŸdú
;

46 
	}
}

48 
öode
* 
	$öode_¸óã
(
ssu_fs
 *
fs
, 
uöt16_t
 
ty≥
)

50 
öode
 *
√w_öode
;

51 
bôm≠
 *
im≠
 = 
fs
->
fs_öodem≠
;

52 
idx
;

54 
idx
 = 0; idx <
NUM_INODE
; idx++)

55 if(!
	`bôm≠_ã°
(
im≠
, 
idx
))

58 if(
idx
 >
NUM_INODE
)

59  
NULL
;

61 
√w_öode
 = 
öode_tbl
 + 
idx
;

62 
√w_öode
->
¢_öo
 = 
idx
;

63 
√w_öode
->
¢_size
 = 0;

64 
√w_öode
->
¢_ty≥
 = 
ty≥
;

65 
√w_öode
->
¢_∆ök
 = 0;

66 
√w_öode
->
¢_ªfcou¡
 = 0;

67 
√w_öode
->
¢_fs
 = 
fs
;

68 
√w_öode
->
˙t_d©a_block
 = 0;

70 
	`bôm≠_£t
(
im≠
, 
idx
, 
åue
);

72 
	`sync_öode
(
fs
, 
√w_öode
);

73 
	`sync_bôm≠block
(
fs
);

75  
√w_öode
;

76 
	}
}

78 
	$öode_wrôe
(
öode
 *
ö
, 
uöt32_t
 
off£t
, * 
buf
, 
Àn
)

82 
ªsu…
=0;

83 
ssu_fs
 * 
fs
 = 
ö
->
¢_fs
;

84 
uöt32_t
 
blkoff
 = 
off£t
 / 
SSU_BLOCK_SIZE
;

85 
uöt32_t
 
ªs_off
 = 
off£t
 % 
SSU_BLOCK_SIZE
;

87 if(
off£t
 > 
ö
->
¢_size
)

90 
	`mem£t
(
tmpblock
, 0, 
SSU_BLOCK_SIZE
);

91 if(
ªs_off
 !0 || 
blkoff
 < 
ö
->
¢_∆ök
)

93 
	`fs_ªadblock
(
fs
, 
ö
->
¢_dúe˘block
[
blkoff
], 
tmpblock
);

97 
	`bÆloc
(
fs
->
fs_blkm≠
, &(
ö
->
¢_dúe˘block
[
blkoff
]));

98 
ö
->
¢_∆ök
++;

99 
	`sync_bôm≠block
(
fs
);

102 
	`mem˝y
(
tmpblock
 + 
ªs_off
, 
buf
, 
Àn
);

104 
	`fs_wrôeblock
(
fs
, 
ö
->
¢_dúe˘block
[
blkoff
], 
tmpblock
);

105 if(
ö
->
¢_size
 < 
off£t
+
Àn
)

106 
ö
->
¢_size
 = 
off£t
+
Àn
;

107 
	`sync_öode
(
fs
, 
ö
);

109  
ªsu…
;

111 
	}
}

113 
	$öode_ªad
(
öode
 * 
ö
, 
uöt32_t
 
off£t
, * 
buf
, 
Àn
)

117 
ªsu…
=0;

118 
ssu_fs
 * 
fs
 = 
ö
->
¢_fs
;

119 
uöt32_t
 
blkoff
 = 
off£t
 / 
SSU_BLOCK_SIZE
;

120 
uöt32_t
 
ªs_off
 = 
off£t
 % 
SSU_BLOCK_SIZE
;

122 if(
off£t
 > 
ö
->
¢_size
)

125 
	`mem£t
(
tmpblock
, 0, 
SSU_BLOCK_SIZE
);

126 
	`fs_ªadblock
(
fs
, 
ö
->
¢_dúe˘block
[
blkoff
], 
tmpblock
);

128 
	`mem˝y
(
buf
, 
tmpblock
 + 
ªs_off
, 
Àn
);

129  
ªsu…
;

132 
	}
}

134 
	$lbn_to_pbn
(
öode
 * 
ö
, 
uöt32_t
 
lbn
 )

136 
ssu_fs
 * 
fs
 = 
ö
->
¢_fs
;

137 
pbn
=0;

138 i‡(
lbn
<=1)

142 i‡(
lbn
>=2)

148  
pbn
;

149 
	}
}

151 
öode
 *
	$öode_›í
(c⁄° *
∑th«me
)

153 
öode
 *
öode_cur
;

154 
öode
 *
√w_ö
;

155 
dúíåy
 
buf_dú
;

156 
‚ame_buf
[
FILENAME_LEN
];

157 
ndú
;

158 
i
;

160 
öode_cur
 = 
cur_¥o˚ss
->
cwd
;

161 
i
=0; 
∑th«me
[i] != '\0'; i++)

162 
‚ame_buf
[
i
] = 
∑th«me
[i];

163 
‚ame_buf
[
i
] = '\0';

165 
ndú
 = 
	`num_dúíåy
(
öode_cur
);

166 
i
=0; i<
ndú
; i++)

168 
	`öode_ªad
(
öode_cur
, 
i
*(
dúíåy
), (*)&
buf_dú
, (direntry));

169 if(
	`°∫cmp
(
buf_dú
.
de_«me
, 
‚ame_buf
,
FILENAME_LEN
Ë=0Ë &(
öode_tbl
[buf_dú.
de_öo
]);

172 
√w_ö
 = 
	`öode_¸óã
(
cur_¥o˚ss
->
cwd
->
¢_fs
,
SSU_TYPE_FILE
);

173 
buf_dú
.
de_öo
 = 
√w_ö
->
¢_öo
;

174 
	`°æ˝y
(
buf_dú
.
de_«me
, 
‚ame_buf
, 
FILENAME_LEN
);

175 
	`öode_wrôe
(
öode_cur
, 
	`num_dúíåy
(öode_cur)*(
buf_dú
), (*)&buf_dir, (buf_dir));

177  
√w_ö
;

178 
	}
}

181 
	$sync_öode
(
ssu_fs
 *
fs
, 
öode
* inode)

183 
ªsu…
 = 0;

184 
off£t
 = 
öode
->
¢_öo
 / 
INODE_PER_BLOCK
;

186 
ªsu…
 = 
	`fs_wrôeblock
(
fs
, 
SSU_INODE_BLOCK
 + 
off£t
, (*)(
öode_tbl
 + off£t*
INODE_PER_BLOCK
));

187  
ªsu…
;

188 
	}
}

191 
	$make_dú
(
öode
 *
cwd
, *
«me
)

193 
dúíåy
 
√wde
, 
cde
, 
pde
, 
tmp
;

194 
öode
 * 
√wö
;

195 
ssu_fs
 *
fs
 = 
cwd
->
¢_fs
;

196 
ndú
, 
i
;

197 
Àn
 = 
	`°∫Àn
(
«me
, 
FILENAME_LEN
);

199 if(
Àn
 > 
FILENAME_LEN
 ||Üen <= 0)

201 
	`¥ötk
("Unvalid filenameÜength.\n");

205 if(
cwd
->
¢_öo
 >
INO_ROOTDIR
)

207 
ndú
 = 
	`num_dúíåy
(
cwd
);

208 
i
=0; i<
ndú
; i++)

210 
	`öode_ªad
(
cwd
, 
i
*(
dúíåy
), (*)&
tmp
, (direntry));

211 if–
	`°∫cmp
(
«me
, 
tmp
.
de_«me
, 
Àn
) == 0 &&Åmp.de_name[len] == 0)

213 
	`¥ötk
("AlreadyÉxist filename.\n");

219 
√wö
 = 
	`öode_¸óã
(
fs
, 
SSU_TYPE_DIR
);

221 
√wde
.
de_öo
 = 
√wö
->
¢_öo
;

222 
	`°æ˝y
(
√wde
.
de_«me
, 
«me
, 
Àn
+1);

225 if(
cwd
->
¢_öo
 >
INO_ROOTDIR
)

226 
	`öode_wrôe
(
cwd
, cwd->
¢_size
, (*)&
√wde
, (
dúíåy
));

228 
cwd
 = 
√wö
;

230 
cde
.
de_öo
 = 
√wde
.de_ino;

231 
	`°æ˝y
(
cde
.
de_«me
, ".", 2);

233 
pde
.
de_öo
 = 
cwd
->
¢_öo
;

234 
	`°æ˝y
(
pde
.
de_«me
, "..", 3);

236 
	`öode_wrôe
(
√wö
,Çewö->
¢_size
, (*)&
pde
, (
dúíåy
));

237 
	`öode_wrôe
(
√wö
,Çewö->
¢_size
, (*)&
cde
, (
dúíåy
));

240 
	}
}

242 
	$num_dúíåy
(
öode
 *
ö
)

244 if(
ö
->
¢_size
 % (
dúíåy
Ë!0 || in->
¢_ty≥
 !
SSU_TYPE_DIR
)

247  
ö
->
¢_size
 / (
dúíåy
);

248 
	}
}

251 
	$li°_£gmít
(
öode
 *
cwd
)

253 
i
;

254 
ndú
 = 
	`num_dúíåy
(
cwd
);

255 
öode
 *
ö
;

256 
dúíåy
 
de
;

258 
	`¥ötk
("name | size |Åype | blocks | ino\n");

259 
i
=0; i<
ndú
; i++)

261 
	`öode_ªad
(
cwd
, 
i
*(
dúíåy
), (*)&
de
, (direntry));

262 
ö
 = &
öode_tbl
[
de
.
de_öo
];

264 
	`¥ötk
("%†| %d | %¯| %d | %d\n", 
de
.
de_«me
, 
ö
->
¢_size
,

265 (
ö
->
¢_ty≥
 =
SSU_TYPE_DIR
Ë? 'd' : 'n', in->
¢_∆ök
, in->
¢_öo
);

267 
	}
}

269 
	$ch™ge_dú
(
öode
 *
cwd
, *
∑th
)

271 
i
;

272 
ndú
 = 
	`num_dúíåy
(
cwd
);

273 
öode
 *
ö
;

274 
dúíåy
 
de
;

275 
Àn
 = 
	`°∫Àn
(
∑th
, 
FILENAME_LEN
);

277 if(
∑th
 == 0)

279 
cur_¥o˚ss
->
cwd
 = cur_¥o˚ss->
roŸdú
;

283 
i
=0; i<
ndú
; i++)

285 
	`öode_ªad
(
cwd
, 
i
*(
dúíåy
), (*)&
de
, (direntry));

287 if–
	`°∫cmp
(
∑th
, 
de
.
de_«me
, 
Àn
) == 0 && de.de_name[len] == 0)

289 
ö
 = &
öode_tbl
[
de
.
de_öo
];

290 if(
ö
->
¢_ty≥
 !
SSU_TYPE_DIR
)

292 
	`¥ötk
("Notá Directory.\n");

295 
cur_¥o˚ss
->
cwd
 = 
ö
;

299 
	`¥ötk
("Not found directory\n");

301 
	}
}

303 
	$gë_curde
(
öode
 *
cwd
, 
dúíåy
 * 
de
)

305 
öode
 *
pwd
;

306 
i
, 
ndú
;

309 
	`öode_ªad
(
cwd
, 0, (*)
de
, (
dúíåy
));

310 
pwd
 = &
öode_tbl
[
de
->
de_öo
];

311 
ndú
 = 
	`num_dúíåy
(
pwd
);

312 
i
=2; i<
ndú
; i++)

314 
	`öode_ªad
(
pwd
, 
i
*(
dúíåy
), (*)
de
, (direntry));

315 if(
de
->
de_öo
 =
cwd
->
¢_öo
)

319 
	}
}

	@include/bitmap.h

1 #i‚de‡
__BITMAP_H__


2 
	#__BITMAP_H__


	)

4 
	~<ty≥.h
>

10 
bôm≠
 *
bôm≠_¸óã_ö_buf
 (
size_t
 
bô_˙t
, *, size_à
byã_˙t
);

11 
size_t
 
bôm≠_buf_size
 (size_à
bô_˙t
);

12 
bôm≠_de°roy
 (
bôm≠
 *);

15 
size_t
 
bôm≠_size
 (c⁄° 
bôm≠
 *);

18 
bôm≠_£t
 (
bôm≠
 *, 
size_t
 
idx
, 
boﬁ
);

19 
bôm≠_m¨k
 (
bôm≠
 *, 
size_t
 
idx
);

20 
bôm≠_ª£t
 (
bôm≠
 *, 
size_t
 
idx
);

21 
bôm≠_Êù
 (
bôm≠
 *, 
size_t
 
idx
);

22 
boﬁ
 
bôm≠_ã°
 (c⁄° 
bôm≠
 *, 
size_t
 
idx
);

25 
bôm≠_£t_Æl
 (
bôm≠
 *, 
boﬁ
);

26 
bôm≠_£t_mu…ùÀ
 (
bôm≠
 *, 
size_t
 
°¨t
, size_à
˙t
, 
boﬁ
);

27 
size_t
 
bôm≠_cou¡
 (c⁄° 
bôm≠
 *, size_à
°¨t
, size_à
˙t
, 
boﬁ
);

28 
boﬁ
 
bôm≠_c⁄èös
 (c⁄° 
bôm≠
 *, 
size_t
 
°¨t
, size_à
˙t
, bool);

29 
boﬁ
 
bôm≠_™y
 (c⁄° 
bôm≠
 *, 
size_t
 
°¨t
, size_à
˙t
);

30 
boﬁ
 
bôm≠_n⁄e
 (c⁄° 
bôm≠
 *, 
size_t
 
°¨t
, size_à
˙t
);

31 
boﬁ
 
bôm≠_Æl
 (c⁄° 
bôm≠
 *, 
size_t
 
°¨t
, size_à
˙t
);

34 
	#BITMAP_ERROR
 
SIZE_MAX


	)

35 
size_t
 
bôm≠_sˇn
 (c⁄° 
bôm≠
 *, size_à
°¨t
, size_à
˙t
, 
boﬁ
);

36 
size_t
 
bôm≠_sˇn_™d_Êù
 (
bôm≠
 *, size_à
°¨t
, size_à
˙t
, 
boﬁ
);

46 
	tñem_ty≥
;

47 
	sbôm≠


49 
size_t
 
	mbô_˙t
;

50 
ñem_ty≥
 *
	mbôs
;

54 #ifde‡
FILESYS


55 
	gfûe
;

56 
size_t
 
bôm≠_fûe_size
 (c⁄° 
bôm≠
 *);

57 
boﬁ
 
bôm≠_ªad
 (
bôm≠
 *, 
fûe
 *);

58 
boﬁ
 
bôm≠_wrôe
 (c⁄° 
bôm≠
 *, 
fûe
 *);

62 
bôm≠_dump
 (c⁄° 
bôm≠
 *);

	@include/ctype.h

1 #i‚de‡
__LIB_CTYPE_H


2 
	#__LIB_CTYPE_H


	)

4 
ölöe
 
	$i¶owî
 (
c
Ë{  c >'a' && c <'z'; 
	}
}

5 
ölöe
 
	$isuµî
 (
c
Ë{  c >'A' && c <'Z'; 
	}
}

6 
ölöe
 
	$ißÕha
 (
c
Ë{  
	`i¶owî
 (cË|| 
	`isuµî
 (c); 
	}
}

7 
ölöe
 
	$isdigô
 (
c
Ë{  c >'0' && c <'9'; 
	}
}

8 
ölöe
 
	$iß um
 (
c
Ë{  
	`ißÕha
 (cË|| 
	`isdigô
 (c); 
	}
}

9 
ölöe
 
	$isxdigô
 (
c
) {

10  
	`isdigô
 (
c
) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');

11 
	}
}

12 
ölöe
 
	$is•a˚
 (
c
) {

13  (
c
 == ' ' || c == '\f' || c == '\n'

14 || 
c
 == '\r' || c == '\t' || c == '\v');

15 
	}
}

16 
ölöe
 
	$isbœnk
 (
c
Ë{  c =' ' || c ='\t'; 
	}
}

17 
ölöe
 
	$isgøph
 (
c
Ë{  c > 32 && c < 127; 
	}
}

18 
ölöe
 
	$i•röt
 (
c
Ë{  c >32 && c < 127; 
	}
}

19 
ölöe
 
	$is˙ål
 (
c
Ë{  (¯>0 && c < 32Ë|| c =127; 
	}
}

20 
ölöe
 
	$ißscii
 (
c
Ë{  c >0 && c < 128; 
	}
}

21 
ölöe
 
	$i•un˘
 (
c
) {

22  
	`i•röt
 (
c
Ë&& !
	`iß um
 (cË&& !
	`is•a˚
 (c);

23 
	}
}

25 
ölöe
 
	$tﬁowî
 (
c
Ë{  
	`isuµî
 (cË? c - 'A' + 'a' : c; 
	}
}

26 
ölöe
 
	$touµî
 (
c
Ë{  
	`i¶owî
 (cË? c - 'a' + 'A' : c; 
	}
}

	@include/debug.h

1 #i‚de‡
__LIB_DEBUG_H


2 
	#__LIB_DEBUG_H


	)

7 
	#UNUSED
 
	`__©åibuã__
 ((
unu£d
))

	)

8 
	#NO_RETURN
 
	`__©åibuã__
 ((
n‹ëu∫
))

	)

9 
	#NO_INLINE
 
	`__©åibuã__
 ((
noölöe
))

	)

10 
	#PRINTF_FORMAT
(
FMT
, 
FIRST
Ë
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, FMT, FIRST)))

	)

14 
	#PANIC
(...Ë
	`debug_∑nic
 (
__FILE__
, 
__LINE__
, 
__func__
, 
__VA_ARGS__
)

	)

16 
	$debug_∑nic
 (c⁄° *
fûe
, 
löe
, c⁄° *
fun˘i⁄
,

17 c⁄° *
mesßge
, ...Ë
	$PRINTF_FORMAT
 (4, 5Ë
NO_RETURN
;

18 
	`debug_backåa˚
 ();

19 
	`debug_backåa˚_Æl
 ();

27 #unde‡
ASSERT


28 #unde‡
NOT_REACHED


30 #i‚de‡
NDEBUG


31 
	#ASSERT
(
CONDITION
) \

32 i‡(
CONDITION
Ë{ 
	}
} { \

33 
	`PANIC
 ("assertion `%s' failed.", #CONDITION); \

34 }

	)

35 
	#NOT_REACHED
(Ë
	`PANIC
 ("execuãdá¿uƒóchabÀ sèãmít");

	)

37 
	#ASSERT
(
CONDITION
Ë((Ë0)

	)

38 
	#NOT_REACHED
(Ë;;)

	)

	@include/device/ata.h

1 #i‚def 
__ATA_H__


2 
	#__ATA_H__


	)

4 
	~<synch.h
>

6 
	#ATA_REG_DATA
(
ba£
Ë(ba£ + 0x00)

	)

7 
	#ATA_REG_ERR
(
ba£
Ë(ba£ + 0x01)

	)

8 
	#ATA_REG_NSECT
(
ba£
Ë(ba£ + 0x02)

	)

9 
	#ATA_REG_LBAL
(
ba£
Ë(ba£ + 0x03)

	)

10 
	#ATA_REG_LBAM
(
ba£
Ë(ba£ + 0x04)

	)

11 
	#ATA_REG_LBAH
(
ba£
Ë(ba£ + 0x05)

	)

12 
	#ATA_REG_DEVICE
(
ba£
Ë(ba£ + 0x06)

	)

13 
	#ATA_REG_STATUS
(
ba£
Ë(ba£ + 0x07)

	)

14 
	#ATA_REG_CMD
(
ba£
Ë(ba£ + 0x07)

	)

15 
	#ATA_ALT_ST_REG
(
ba£
Ë(ba£ + 0x206)

	)

16 
	#ATA_DEV_CTRL_REG
(
ba£
Ë(ba£ + 0x206)

	)

18 
	#ATA_MASTER
 0x01

	)

19 
	#ATA_SLAVE
 0x02

	)

21 
	#ATA_SR_BSY
 0x80

	)

22 
	#ATA_SR_DRDY
 0x40

	)

23 
	#ATA_SR_DF
 0x20

	)

24 
	#ATA_SR_DSC
 0x10

	)

25 
	#ATA_SR_DRQ
 0x08

	)

26 
	#ATA_SR_CORR
 0x04

	)

27 
	#ATA_SR_IDX
 0x02

	)

28 
	#ATA_SR_ERR
 0x01

	)

30 
	#ATA_DRHD_DEF
 0xa0

	)

31 
	#ATA_DRHD_MST
 (0x00 | 
ATA_DRHD_DEF
)

	)

32 
	#ATA_DRHD_SLV
 (0x10 | 
ATA_DRHD_DEF
)

	)

33 
	#ATA_DRHD_LBA
 (0x40 | 
ATA_DRHD_DEF
)

	)

35 
	#ATA_CMD_READ_PIO
 0x20

	)

36 
	#ATA_CMD_READ_PIO_EXT
 0x24

	)

37 
	#ATA_CMD_READ_DMA
 0xC8

	)

38 
	#ATA_CMD_READ_DMA_EXT
 0x25

	)

39 
	#ATA_CMD_WRITE_PIO
 0x30

	)

40 
	#ATA_CMD_WRITE_PIO_EXT
 0x34

	)

41 
	#ATA_CMD_WRITE_DMA
 0xCA

	)

42 
	#ATA_CMD_WRITE_DMA_EXT
 0x35

	)

43 
	#ATA_CMD_CACHE_FLUSH
 0xE7

	)

44 
	#ATA_CMD_CACHE_FLUSH_EXT
 0xEA

	)

45 
	#ATA_CMD_PACKET
 0xA0

	)

46 
	#ATA_CMD_IDENTIFY_PACKET
 0xA1

	)

47 
	#ATA_CMD_IDENTIFY
 0xEC

	)

49 
	#ATA_WAIT_BUSY
 0x01

	)

50 
	#ATA_WAIT_IDLE
 0x02

	)

52 
	#ATA_SECOR_SIZE
 512

	)

55 
	#ATA_DEV_NUM
 2

	)

57 
	s©a_devi˚


59 
uöt8_t
 
	mty≥
;

60 
uöt16_t
 
	mp‹t_addr
;

61 
uöt8_t
 
	múq
;

62 
£m≠h‹e
 
	m£ma
;

65 
	s©a_öãrÁ˚


67 
©a_devi˚
 
	mnodes
[
ATA_DEV_NUM
];

70 
©a_öãrÁ˚
 
	g©a
;

71 
blk_dev
 
	g©a0_blk_dev
;

72 
blk_dev
 
	g©a1_blk_dev
;

75 
öô_©a
();

	@include/device/block.h

1 #i‚de‡
__BLOCK_H__


2 
	#__BLOCK_H__


	)

4 
	~<°ddef.h
>

5 
	~<öây≥s.h
>

8 
	#BLK_SEC_SIZE
 512

	)

10 
	#BLK_DEV_ROM
 0

	)

11 
	#BLK_DEV_HDD
 1

	)

12 
	#BLK_DEV_SSD
 2

	)

13 
	#BLK_DEV_USB
 3

	)

14 
	#BLK_DEV_CDR
 4

	)

15 
	#BLK_DEV_OTH
 5

	)

18 
uöt32_t
 
	tblk_£c_t
;

21 
uöt32_t
 
	tblk_˙t_t
;

24 
uöt32_t
 
	tblk_size_t
;

27 
uöt32_t
 
	tblk_dev_t
;

30 
	sblk_dev


32 
blk_dev_t
 
	mty≥
;

33 
blk_˙t_t
 
	mblk_cou¡
;

34 
blk_size_t
 
	mblk_size
;

35 c⁄° 
blk_dev_›s
 *
	m›s
;

36 *
	mdevi˚_öfo
;

40 
blk_dev_ªad
 (
blk_dev
 *, 
blk_£c_t
, *);

41 
blk_dev_wrôe
 (
blk_dev
 *, 
blk_£c_t
, const *);

43 
	sblk_dev_›s


45 (*
	mªad
Ë(*
	mblk_dev
, 
	mblk_£c_t
, *
	mbuf
);

46 (*
	mwrôe
Ë(*
	mblk_dev
, 
	mblk_£c_t
, c⁄° *
	mbuf
);

49 
blk_dev
 
	g©a0_blk_dev
;

50 
blk_dev
 
	g©a1_blk_dev
;

53 
blk_dev_ªgi°î
 (
blk_dev
 *, 
blk_dev_t
,

54 c⁄° *
dev
, c⁄° *
£rül
, 
blk_˙t_t
 
cou¡
,

55 
blk_size_t
 
size
, c⁄° 
blk_dev_›s
 *, *
devi˚_öfo
);

	@include/device/console.h

1 #i‚de‡
__CONSOLE_H__


2 
	#__CONSOLE_H__


	)

4 #¥agm®
∑ck
(
push
, 1)

6 
	skChSåu˘


8 
	mbCh
;

9 
	mbAâ
;

10 } 
	tCHAR
;

12 
	gGlob_x
;

13 
	gGlob_y
;

15 #¥agm®
∑ck
(
p›
)

17 
	#SCREEN_SCROLL


	)

18 
	#SERIAL_STDOUT


	)

20 
öô_c⁄sﬁe
();

22 
PrötCh¨ToS¸ìn
(
x
, 
y
, c⁄° *
pSåög
);

23 
PrötCh¨
(
x
, 
y
, c⁄° 
Såög
);

25 
˛rS¸ìn
();

26 
s¸ﬁl
();

27 
¥ötk
(c⁄° *
fmt
, ...);

29 #ifde‡
SCREEN_SCROLL


30 
ª‰eshS¸ìn
();

31 
s¸ﬁl_s¸ìn
(
off£t
);

32 
£t_ÁŒow
();

33 
£t_curs‹
();

	@include/device/device.h

1 #i‚def 
__DEVICE_H__


2 
	#__DEVICE_H__


	)

4 
dev_shutdown
();

	@include/device/io.h

1 #i‚def 
__IO_H__


2 
	#__IO_H__


	)

4 
	~<°ddef.h
>

5 
	~<°döt.h
>

7 
outb
(
p‹t
, 
d©a
);

8 
öb
(
p‹t
);

9 
oué
(
p‹t
, 
d©a
);

10 
öl
(
p‹t
);

11 
iowaô
();

13 
ªad_¸0
();

14 
wrôe_¸0
(
d©a
);

15 
ªad_¸3
();

16 
wrôe_¸3
(
d©a
);

17 
ªad_¸4
();

18 
wrôe_¸4
(
d©a
);

20 
dev_shutdown
();

22 
ölöe
 

23 
	$ösw
 (
uöt16_t
 
p‹t
, *
addr
, 
size_t
 
˙t
)

25 
asm
 volatile ("push %%es \n\t"

29 "p› %%e†" : "+D" (
addr
), "+c" (
˙t
Ë: "d" (
p‹t
) : "memory");

30 
	}
}

32 
ölöe
 

33 
	$outsw
 (
uöt16_t
 
p‹t
, c⁄° *
addr
, 
size_t
 
˙t
)

35 
asm
 vﬁ©ûê("ª∞outsw" : "+S" (
addr
), "+c" (
˙t
Ë: "d" (
p‹t
));

36 
	}
}

	@include/device/io2.h

1 #i‚def 
__IO_H__


2 
	#__IO_H__


	)

4 
	~<°ddef.h
>

5 
	~<°döt.h
>

7 
outb
(
p‹t
, 
d©a
);

8 
öb
(
p‹t
);

9 
oué
(
p‹t
, 
d©a
);

10 
öl
(
p‹t
);

11 
iowaô
();

13 
ªad_¸0
();

14 
wrôe_¸0
(
d©a
);

15 
ªad_¸3
();

16 
wrôe_¸3
(
d©a
);

17 
ªad_¸4
();

18 
wrôe_¸4
(
d©a
);

20 
dev_shutdown
();

23 
ölöe
 
uöt16_t


24 
	$öw
 (
uöt16_t
 
p‹t
)

26 
uöt16_t
 
d©a
;

27 
asm
 vﬁ©ûe("öw %w1, %w0" : "˜"(
d©a
Ë: "d"(
p‹t
));

28  
d©a
;

29 
	}
}

31 
ölöe
 

32 
	$ösw
 (
uöt16_t
 
p‹t
, *
addr
, 
size_t
 
˙t
)

34 
i
;

35 * 
buf
 = 
addr
;

36 
uöt16_t
 
d©a
;

37 
i
 = 0; i < 
˙t
; i++)

39 
d©a
 = 
	`öw
(
p‹t
);

40 *(
buf
+
i
*2+1Ë(Ë((
d©a
)>>8);

41 *(
buf
+
i
*2Ë(Ë(
d©a
);

44 
	}
}

46 
ölöe
 

47 
	$outsw
 (
uöt16_t
 
p‹t
, c⁄° *
addr
, 
size_t
 
˙t
)

49 
asm
 vﬁ©ûê("ª∞outsw" : "+S" (
addr
), "+c" (
˙t
Ë: "d" (
p‹t
));

50 
	}
}

	@include/device/kbd.h

1 #i‚de‡
__KDB_H__


2 
	#__KDB_H__


	)

4 
	~<ty≥.h
>

5 
	~<öãºu±.h
>

7 
	#KBDMAPSIZE
 86

	)

9 
	#KEY_ESC
 0x1B

	)

10 
	#KEY_RSHIFT
 0x02

	)

11 
	#KEY_PRTSCN
 0x03

	)

12 
	#KEY_LALT
 0x04

	)

13 
	#KEY_SPACE
 0x05

	)

14 
	#KEY_CAPS
 0x06

	)

15 
	#KEY_F1
 0X07

	)

16 
	#KEY_F2
 0x08

	)

17 
	#KEY_F3
 0x09

	)

18 
	#KEY_F4
 0x0A

	)

19 
	#KEY_F5
 0x0B

	)

20 
	#KEY_F6
 0x0C

	)

21 
	#KEY_F7
 0x0D

	)

22 
	#KEY_F8
 0x0E

	)

23 
	#KEY_F9
 0x0F

	)

24 
	#KEY_F10
 0x10

	)

25 
	#KEY_F11
 0x11

	)

26 
	#KEY_F12
 0x12

	)

27 
	#KEY_BSPACE
 0x13

	)

28 
	#KEY_TAB
 0x14

	)

30 
	sKey_Sètus_Såu˘
 {

31 
BOOL
 
	mShi·Fœg
;

32 
BOOL
 
	mC≠¶ockFœg
;

33 
BOOL
 
	mNumlockFLag
;

34 
BOOL
 
	mS¸ﬁŒockFœg
;

36 
BOOL
 
	mExã¡edFœg
;

37 
	mPau£Fœg
;

38 } 
	tKey_Sètus
;

40 
Upd©eKeySèt
(
BYTE
);

41 
BOOL
 
C⁄vîtSˇncodeToASCII
(
BYTE
, BYTE *);

42 
öô_kbd
();

43 
kbd_h™dÀr
(
öå_‰ame
 *
i‰ame
);

45 
kbd_ªad_ch¨
();

	@include/device/partition.h

1 #i‚de‡
DEVICES_PARTITION_H


2 
	#DEVICES_PARTITION_H


	)

4 
	gblk_dev
;

6 
∑πôi⁄_sˇn
 (
blk_dev
 *);

	@include/device/pit.h

1 #i‚def 
__PIT_H__


2 
	#__PIT_H__


	)

4 
	#PIT_CHANNEL0
 0x40

	)

5 
	#PIT_CHANNEL1
 0x41

	)

6 
	#PIT_CHANNEL2
 0x42

	)

7 
	#PIT_COMMAND
 0x43

	)

9 
	#PIT_COUNTER0
 0x00

	)

10 
	#PIT_COUNTER1
 0x40

	)

11 
	#PIT_COUNTER2
 0x80

	)

12 
	#PIT_READBACK
 0xA0

	)

14 
	#PIT_RW_COUNTER_LATCH
 0x00

	)

15 
	#PIT_RW_LBYTE
 0x10

	)

16 
	#PIT_RW_MBYTE
 0x20

	)

17 
	#PIT_RW_LMBYTE
 0x30

	)

19 
	#PIT_MODE0
 
Ox00


	)

20 
	#PIT_MODE1
 0x02

	)

21 
	#PIT_MODE2
 0x04

	)

22 
	#PIT_MODE3
 0x06

	)

23 
	#PIT_MODE4
 0x08

	)

24 
	#PIT_MODE5
 0x0A

	)

26 
	#PIT_BINARY
 0x00

	)

27 
	#PIT_BCD
 0x01

	)

29 
	#PIT_HZ
 1193181

	)

30 
	#PIT_FRQ_HZ
 1000

	)

32 
öô_pô
();

	@include/do_syscall.h

1 #i‚def 
__DO_SYSCALL_H__


2 
	#__DO_SYSCALL_H__


	)

4 
pid_t
 
do_f‹k
(
¥oc_func
 
func
, * 
aux1
);

5 
do_exô
(
°©us
);

6 
pid_t
 
do_waô
(*
°©us
);

7 
do_ssuªad
(
ty≥
, * 
buf
, 
Àn
);

8 
do_shutdown
();

9 
do_›í
(c⁄° *
∑th«me
, 
Êags
);

10 
do_ªad
(
fd
, *
buf
, 
Àn
);

11 
do_wrôe
(
fd
, c⁄° *
buf
, 
Àn
);

12 
do_l£ek
(
fd
, 
off£t
, 
whí˚
);

	@include/filesys/file.h

1 #i‚de‡
__SSU_FILE_H__


2 
	#__SSU_FILE_H__


	)

4 
	~<fûesys/öode.h
>

6 
	#NR_FILEDES
 5

	)

8 
	#O_RDONLY
 1

	)

9 
	#O_WRONLY
 2

	)

10 
	#O_RDWR
 3

	)

12 
	#SEEK_SET
 0

	)

13 
	#SEEK_CUR
 1

	)

14 
	#SEEK_END
 -1

	)

16 
	sssufûe
 {

17 
öode
 *
	möode
;

18 
uöt16_t
 
	mpos
;

19 
uöt8_t
 
	mÊags
;

20 
uöt8_t
 
	munu£d
;

23 
fûe_£ek
(
uöt32_t
 
fd
, 
uöt16_t
 
pos
);

24 
fûe_›í
(
öode
 *öode, 
Êags
, 
mode
);

25 
fûe_˛o£
(
uöt32_t
 
fd
);

26 
fûe_ªad
(
öode
 *
fûe
, 
size_t
 
off£t
, *
buf
, size_à
Àn
);

27 
fûe_wrôe
(
öode
 *
fûe
, 
size_t
 
off£t
, *
buf
, size_à
Àn
);

	@include/filesys/fs.h

1 #i‚def 
__SSU_FS_H__


2 
	#__SSU_FS_H__


	)

4 
	~<ty≥.h
>

6 
	#SSU_SB_MAGIC
 0x19930921

	)

7 
	#SSU_BLOCK_SIZE
 4096

	)

8 
	#UNVALID_BLOCK
 6

	)

9 
	#SSU_BOOT_BLOCK
 0

	)

10 
	#SSU_RESERVED_BLOCK
 1

	)

12 
	#SSU_SUPER_BLOCK
 2

	)

13 
	#SSU_BITMAP_BLOCK
 3

	)

14 
	#SSU_INODE_BLOCK
 4

	)

15 
	#SSU_DATA_BLOCK
 8

	)

17 
	#VOLNAME_LEN
 20

	)

18 
	#NUM_INODEBLOCK
 4

	)

20 
	#SECTORCOUNT
(
dev
Ë(
SSU_BLOCK_SIZE
 / dev->
blk_size
)

	)

22 
	#DEVOP_READ
(
dev
, 
£c
, 
buf
Ë(dev->
›s
->
	`ªad
(dev->
devi˚_öfo
, sec, buf))

	)

23 
	#DEVOP_WRITE
(
dev
, 
£c
, 
buf
Ë(dev->
›s
->
	`wrôe
(dev->
devi˚_öfo
, sec, buf))

	)

27 
	sssu_su≥rblock
{

28 
uöt32_t
 
	msb_magic
;

29 
uöt32_t
 
	msb_nblocks
;

30 
	msb_vﬁ«me
[
VOLNAME_LEN
];

31 
uöt32_t
 
	m∑ddög
;

35 
	sssu_fs
{

36 
ssu_su≥rblock
 
	mfs_sb
;

37 
blk_dev
 *
	mfs_devi˚
;

38 
bôm≠
 *
	mfs_blkm≠
;

39 
bôm≠
 *
	mfs_öodem≠
;

42 
öô_fûesy°em
();

43 
fs_mou¡
(
ssu_fs
 *
fs
, 
blk_dev
 *
dev
);

44 
sync_su≥rblock
(
ssu_fs
 *
fs
, c⁄° * 
su≥rblock
);

45 
sync_ssufs
(
ssu_fs
 *
fs
, c⁄° * 
öodes
, c⁄° * 
su≥rblock
);

46 
sync_bôm≠block
(
ssu_fs
 *
fs
);

47 
võw_bôm≠
(
bôm≠
 *
b
);

48 
£t_vﬁ«me
(
ssu_su≥rblock
 *
sb
, c⁄° *
«me
);

50 
fs_ªadblock
(
ssu_fs
 *
fs
, 
uöt32_t
 
blknum
, *
buf
);

51 
fs_wrôeblock
(
ssu_fs
 *
fs
, 
uöt32_t
 
blknum
, c⁄° *
buf
);

52 
bÆloc
(
bôm≠
 *
b
, *
ödex
);

54 
ssu_fs
 
	gfûesys
;

	@include/filesys/inode.h

1 #i‚def 
__INODE_H__


2 
	#__INODE_H__


	)

4 
	~<synch.h
>

5 
	~<fûesys/fs.h
>

6 
	~<¥oc/¥oc.h
>

8 
	#INO_ROOTDIR
 2

	)

9 
	#NUM_DIRECT
 2

	)

10 
	#NUM_INDIRECT
 8

	)

11 
	#NUM_INODE
 256

	)

12 
	#FILENAME_LEN
 60

	)

13 
	#INODE_PER_BLOCK
 64

	)

15 
	#SSU_TYPE_INVALID
 0

	)

16 
	#SSU_TYPE_FILE
 1

	)

17 
	#SSU_TYPE_DIR
 2

	)

21 
	söode


23 
uöt32_t
 
	m¢_öo
;

24 
uöt32_t
 
	m¢_size
;

25 
uöt16_t
 
	m¢_ty≥
;

26 
uöt16_t
 
	m¢_∆ök
;

27 
uöt32_t
 
	m¢_ªfcou¡
;

28 
uöt32_t
 
	m¢_dúe˘block
[
NUM_DIRECT
];

29 
uöt32_t
 
	m¢_ödúe˘block
[
NUM_INDIRECT
];

30 
ssu_fs
 * 
	m¢_fs
;

31 
uöt32_t
 
	m˙t_d©a_block
;

39 
	sdúíåy
 {

40 
uöt32_t
 
	mde_öo
;

41 
	mde_«me
[
FILENAME_LEN
];

44 
öode
 
	göode_tbl
[
NUM_INODE
];

46 
öô_öode_èbÀ
(
ssu_fs
 *
fs
);

47 
öode
* 
öode_¸óã
(
ssu_fs
 *
fs
, 
uöt16_t
 
ty≥
);

48 
öode_wrôe
(
öode
 * 
ö
, 
uöt32_t
 
off£t
, * 
buf
, 
Àn
);

49 
öode_ªad
(
öode
 * 
ö
, 
uöt32_t
 
off£t
, * 
buf
, 
Àn
);

50 
sync_öode
(
ssu_fs
 *
fs
, 
öode
* inode);

51 
˛ór_öode
(
öode
* 
ö
);

52 
öode
 *
öode_›í
(c⁄° *
∑th«me
);

54 
make_dú
(
öode
 *
cwd
, *
«me
);

55 
num_dúíåy
(
öode
 *
ö
);

57 
lbn_to_pbn
(
öode
 * 
ö
, 
uöt32_t
 
lbn
 );

61 
›í_«mei
(c⁄° *
∑th
, 
Êag
, 
mode
, 
öode
* 
ªt
);

62 
∑th_lookup
(c⁄° *
∑th
, 
öode
* 
ªt
);

64 
li°_£gmít
(
öode
 *
cwd
);

65 
ch™ge_dú
(
öode
 *
cwd
, *
∑th
);

67 
gë_curde
(
öode
 *
cwd
, 
dúíåy
 * 
de
);

	@include/interrupt.h

1 #i‚de‡
__INTERRUPT_H__


2 
	#__INTERRUPT_H__


	)

4 
	#HLT
(Ë
__asm__
 
	`__vﬁ©ûe
("h…");

	)

12 
	~<ty≥.h
>

15 
	eöå_Àvñ


17 
	mINTR_OFF
,

18 
	mINTR_ON


21 
öå_Àvñ
 
öå_gë_Àvñ
 ();

22 
öå_Àvñ
 
öå_£t_Àvñ
 (intr_level);

23 
öå_Àvñ
 
öå_íabÀ
 ();

24 
öå_Àvñ
 
öå_dißbÀ
 ();

26 #¥agm®
∑ck
(
push
, 1)

29 
	söå_‰ame


33 
uöt32_t
 
	medi
;

34 
uöt32_t
 
	mesi
;

35 
uöt32_t
 
	mebp
;

36 
uöt32_t
 
	me•_dummy
;

37 
uöt32_t
 
	mebx
;

38 
uöt32_t
 
	medx
;

39 
uöt32_t
 
	mecx
;

40 
uöt32_t
 
	móx
;

41 
uöt16_t
 
	mgs
, :16;

42 
uöt16_t
 
	mfs
, :16;

43 
uöt16_t
 
	mes
, :16;

44 
uöt16_t
 
	mds
, :16;

47 
uöt32_t
 
	mvec_no
;

52 
uöt32_t
 
	mîr‹_code
;

56 *
	m‰ame_poöãr
;

60 (*
	meù
) ();

61 
uöt16_t
 
	mcs
, :16;

62 
uöt32_t
 
	meÊags
;

63 *
	me•
;

64 
uöt16_t
 
	mss
, :16;

67 #¥agm®
∑ck
(
p›
)

69 
	töå_h™dÀr_func
 (
	töå_‰ame
 *);

70 
boﬁ
 
öå_c⁄ãxt
 ();

71 
do_sched_⁄_ªtu∫
();

75 
öô_öå
();

76 
ªg_h™dÀr
(
idx
, 
öå_h™dÀr_func
 *
h™dÀr
);

77 
gë_ticks
();

79 #i‚de‡
__ASSEMBLER__


	@include/intr-stubs.h

1 #i‚de‡
_INTR_STUBS_H_


2 
	#_INTR_STUBS_H_


	)

4 
	#INTR_MAX
 256

	)

17 
	töå_°ub_func
 ();

18 
öå_°ub_func
 *
öå_°ubs
[
INTR_MAX
];

21 
öå_exô
 ();

	@include/inttypes.h

1 #i‚de‡
__LIB_INTTYPES_H


2 
	#__LIB_INTTYPES_H


	)

4 
	~<°döt.h
>

6 
	#PRId8
 "hhd"

	)

7 
	#PRIi8
 "hhi"

	)

8 
	#PRIo8
 "hho"

	)

9 
	#PRIu8
 "hhu"

	)

10 
	#PRIx8
 "hhx"

	)

11 
	#PRIX8
 "hhX"

	)

13 
	#PRId16
 "hd"

	)

14 
	#PRIi16
 "hi"

	)

15 
	#PRIo16
 "ho"

	)

16 
	#PRIu16
 "hu"

	)

17 
	#PRIx16
 "hx"

	)

18 
	#PRIX16
 "hX"

	)

20 
	#PRId32
 "d"

	)

21 
	#PRIi32
 "i"

	)

22 
	#PRIo32
 "o"

	)

23 
	#PRIu32
 "u"

	)

24 
	#PRIx32
 "x"

	)

25 
	#PRIX32
 "X"

	)

27 
	#PRId64
 "Œd"

	)

28 
	#PRIi64
 "Œi"

	)

29 
	#PRIo64
 "Œo"

	)

30 
	#PRIu64
 "Œu"

	)

31 
	#PRIx64
 "Œx"

	)

32 
	#PRIX64
 "ŒX"

	)

34 
	#PRIdMAX
 "jd"

	)

35 
	#PRIiMAX
 "ji"

	)

36 
	#PRIoMAX
 "jo"

	)

37 
	#PRIuMAX
 "ju"

	)

38 
	#PRIxMAX
 "jx"

	)

39 
	#PRIXMAX
 "jX"

	)

41 
	#PRIdPTR
 "td"

	)

42 
	#PRIiPTR
 "ti"

	)

43 
	#PRIoPTR
 "to"

	)

44 
	#PRIuPTR
 "tu"

	)

45 
	#PRIxPTR
 "tx"

	)

46 
	#PRIXPTR
 "tX"

	)

	@include/limits.h

1 #i‚de‡
__LIMITS_H__


2 
	#__LIMITS_H__


	)

4 
	#CHAR_BIT
 8

	)

6 
	#SCHAR_MAX
 127

	)

7 
	#SCHAR_MIN
 (-
SCHAR_MAX
 - 1)

	)

8 
	#UCHAR_MAX
 255

	)

10 #ifde‡
__CHAR_UNSIGNED__


11 
	#CHAR_MIN
 0

	)

12 
	#CHAR_MAX
 
UCHAR_MAX


	)

14 
	#CHAR_MIN
 
SCHAR_MIN


	)

15 
	#CHAR_MAX
 
SCHAR_MAX


	)

18 
	#SHRT_MAX
 32767

	)

19 
	#SHRT_MIN
 (-
SHRT_MAX
 - 1)

	)

20 
	#USHRT_MAX
 65535

	)

22 
	#INT_MAX
 2147483647

	)

23 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

24 
	#UINT_MAX
 4294967295U

	)

26 
	#LONG_MAX
 2147483647L

	)

27 
	#LONG_MIN
 (-
LONG_MAX
 - 1)

	)

28 
	#ULONG_MAX
 4294967295UL

	)

30 
	#LLONG_MAX
 9223372036854775807LL

	)

31 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1)

	)

32 
	#ULLONG_MAX
 18446744073709551615ULL

	)

	@include/list.h

1 #i‚de‡
__LIST_H__


2 
	#__LIST_H__


	)

85 
	~<ssulib.h
>

86 
	~<ty≥.h
>

89 
	sli°_ñem


91 
li°_ñem
 *
	m¥ev
;

92 
li°_ñem
 *
	m√xt
;

96 
	sli°


98 
li°_ñem
 
	mhód
;

99 
li°_ñem
 
	mèû
;

107 
	#li°_íåy
(
LIST_ELEM
, 
STRUCT
, 
MEMBER
) \

108 ((
STRUCT
 *Ë((
uöt8_t
 *Ë&(
LIST_ELEM
)->
√xt
 \

109 - 
	`off£tof
 (
STRUCT
, 
MEMBER
.
√xt
)))

	)

121 
	#LIST_INITIALIZER
(
NAME
Ë{ { 
NULL
, &(NAME).
èû
 }, \

122 { &(
NAME
).
hód
, 
NULL
 } }

	)

124 
li°_öô
 (
li°
 *);

127 
li°_ñem
 *
li°_begö
 (
li°
 *);

128 
li°_ñem
 *
li°_√xt
 (list_elem *);

129 
li°_ñem
 *
li°_íd
 (
li°
 *);

131 
li°_ñem
 *
li°_rbegö
 (
li°
 *);

132 
li°_ñem
 *
li°_¥ev
 (list_elem *);

133 
li°_ñem
 *
li°_ªnd
 (
li°
 *);

135 
li°_ñem
 *
li°_hód
 (
li°
 *);

136 
li°_ñem
 *
li°_èû
 (
li°
 *);

139 
li°_ö£π
 (
li°_ñem
 *, list_elem *);

140 
li°_•li˚
 (
li°_ñem
 *
bef‹e
,

141 
li°_ñem
 *
fú°
, li°_ñem *
œ°
);

142 
li°_push_‰⁄t
 (
li°
 *, 
li°_ñem
 *);

143 
li°_push_back
 (
li°
 *, 
li°_ñem
 *);

146 
li°_ñem
 *
li°_ªmove
 (list_elem *);

147 
li°_ñem
 *
li°_p›_‰⁄t
 (
li°
 *);

148 
li°_ñem
 *
li°_p›_back
 (
li°
 *);

151 
li°_ñem
 *
li°_‰⁄t
 (
li°
 *);

152 
li°_ñem
 *
li°_back
 (
li°
 *);

155 
size_t
 
li°_size
 (
li°
 *);

156 
boﬁ
 
li°_em±y
 (
li°
 *);

159 
li°_ªvî£
 (
li°
 *);

164 
boﬁ
 
	tli°_Àss_func
 (c⁄° 
	tli°_ñem
 *
	ta
,

165 c⁄° 
	tli°_ñem
 *
	tb
,

166 *
	taux
);

169 
li°_s‹t
 (
li°
 *,

170 
li°_Àss_func
 *, *
aux
);

171 
li°_ö£π_‹dîed
 (
li°
 *, 
li°_ñem
 *,

172 
li°_Àss_func
 *, *
aux
);

173 
li°_unique
 (
li°
 *, li° *
du∂iˇãs
,

174 
li°_Àss_func
 *, *
aux
);

177 
li°_ñem
 *
li°_max
 (
li°
 *, 
li°_Àss_func
 *, *
aux
);

178 
li°_ñem
 *
li°_mö
 (
li°
 *, 
li°_Àss_func
 *, *
aux
);

	@include/loader.h

1 #i‚de‡
THREADS_LOADER_H


2 
	#THREADS_LOADER_H


	)

5 
	#LOADER_BASE
 0x7c00

	)

6 
	#LOADER_END
 0x7e00

	)

9 
	#LOADER_KERN_BASE
 0x20000

	)

13 
	#LOADER_PHYS_BASE
 0xc0000000

	)

16 
	#LOADER_SIG
 (
LOADER_END
 - 
LOADER_SIG_LEN
Ë

	)

17 
	#LOADER_PARTS
 (
LOADER_SIG
 - 
LOADER_PARTS_LEN
Ë

	)

18 
	#LOADER_ARGS
 (
LOADER_PARTS
 - 
LOADER_ARGS_LEN
Ë

	)

19 
	#LOADER_ARG_CNT
 (
LOADER_ARGS
 - 
LOADER_ARG_CNT_LEN
Ë

	)

22 
	#LOADER_SIG_LEN
 2

	)

23 
	#LOADER_PARTS_LEN
 64

	)

24 
	#LOADER_ARGS_LEN
 128

	)

25 
	#LOADER_ARG_CNT_LEN
 4

	)

29 
	#SEL_NULL
 0x00

	)

30 
	#SEL_KCSEG
 0x08

	)

31 
	#SEL_KDSEG
 0x10

	)

33 #i‚de‡
__ASSEMBLER__


34 
	~<°döt.h
>

37 
uöt32_t
 
öô_øm_∑ges
;

	@include/mem/malloc.h

1 #i‚def 
__MALLOC_H__


2 
	#__MALLOC_H__


	)

5 * 
mÆloc
(
size
);

6 
‰ì
(* 
buf
);

	@include/mem/mm.h

1 #i‚def 
__MEM_H__


2 
	#__MEM_H__


	)

4 
mem_size
();

5 
dëe˘_mem
();

6 * 
mem£t
(* 
d°_
, 
vÆue
, 
size
);

	@include/mem/paging.h

1 #i‚de‡
__PAGING_H__


2 
	#__PAGING_H__


	)

4 
	~<ty≥.h
>

5 
	~<¥oc/¥oc.h
>

7 
	#CR0_FLAG_PG
 0x80000000

8 
	#CR0_FLAG_PE
 0x00000001

9 

	)

10 
	#PAGE_FLAG_PRESENT
 0x01

11 
	#PAGE_FLAG_RW
 0x02

12 
	#PAGE_FLAG_USER
 0x04

13 
	#PAGE_FLAG_WRITE
 0x08

14 
	#PAGE_FLAG_CACHE
 0x10

15 
	#PAGE_FLAG_ACCESS
 0x20

16 
	#PAGE_FLAG_AVAIL
 0x40

17 
	#PAGE_FLAG_DIRTY
 0x40

18 
	#PAGE_FLAG_SIZE
 0x80

19 
	#PAGE_FLAG_PTA
 0x80

20 
	#PAGE_FLAG_GLOB
 0x100

21 
	#PAGE_ADDR_AVAIL
 0x200

22 
	#PAGE_ADDR_BASE
 0x1000

23 

	)

24 
	#PAGE_MASK_BASE
 0xFFFFF000

25 
	#PAGE_MASK_PDE
 0xFFC00000

26 
	#PAGE_MASK_PTE
 0x003FF000

27 
	#PAGE_OFFSET_PDE
 22

28 
	#PAGE_OFFSET_PTE
 12

29 

	)

30 
	#PAGE_SIZE
 4096

31 
	#PAGE_TBL_SIZE
 4096

32 
	#PAGE_DIR_SIZE
 4096

33 

	)

34 
	#KERNEL_ADDR
 0x00100000

	)

35 
	#KERNEL_HEAP
 0x00400000

	)

37 
ölöe
 
uöt32_t
 
	$pg_no
(c⁄° 
uöt32_t
 *
∑ge
){

38  (
uöt32_t
)
∑ge
 >> 
PAGE_OFFSET_PTE
;

39 
	}
}

41 
öô_∑gög
();

42 
uöt32_t
* 
pd_¸óã
 (
pid_t
 
pid
);

43 
uöt32_t
 
pde_idx_addr
(uöt32_t* 
addr
);

44 
uöt32_t
 
±e_idx_addr
(uöt32_t* 
addr
);

	@include/mem/palloc.h

1 #i‚de‡
__PALLOC_H__


2 
	#__PALLOC_H__


	)

4 
	~<ssulib.h
>

6 
öô_∑Œoc
 ();

7 
uöt32_t
 *
∑Œoc_gë_∑ge
 ();

8 
uöt32_t
 *
∑Œoc_gë_mu…ùÀ
 (
size_t
 
∑ge_˙t
);

9 
∑Œoc_‰ì_∑ge
 (*);

10 
∑Œoc_‰ì_mu…ùÀ
 (*, 
size_t
 
∑ge_˙t
);

	@include/packed.h

1 #i‚de‡
__LIB_PACKED_H


2 
	#__LIB_PACKED_H


	)

8 
	#PACKED
 
	`__©åibuã__
 ((
∑cked
))

	)

	@include/proc/proc.h

1 #i‚def 
__PROC_H__


2 
	#__PROC_H__


	)

4 
	~<li°.h
>

5 
	~<fûesys/öode.h
>

6 
	~<fûesys/fûe.h
>

8 
	tpid_t
;

10 
	ep_°©e
 {

11 
	mPROC_UNUSED
,

12 
	mPROC_RUN
,

13 
	mPROC_STOP
,

14 
	mPROC_ZOMBIE
,

15 
	mPROC_BLOCK
,

18 #¥agm®
∑ck
(
push
, 1)

20 
	s¥oc_›ti⁄


22 
	m¥i‹ôy
;

25 
	s¥o˚ss


27 
pid_t
 
	mpid
;

28 *
	m°ack
;

29 *
	mpd
;

30 
p_°©e
 
	m°©e
;

31 
	mtime_¶ìp
;

33 
	m¥i‹ôy
;

34 
	mtime_¶i˚
;

36 
li°_ñem
 
	mñem_Æl
;

37 
li°_ñem
 
	mñem_°©
;

39 
	mtime_u£d
;

40 
	mtime_sched
;

41 
¥o˚ss
* 
	m∑ª¡
;

42 
	msim∂e_lock
;

43 
	mchûd_pid
;

44 
	mexô_°©us
;

46 
öode
 * 
	mroŸdú
;

47 
öode
 * 
	mcwd
;

49 
ssufûe
 *
	mfûe
[
NR_FILEDES
];

52 #¥agm®
∑ck
(
p›
)

54 
¥o˚ss
 *
cur_¥o˚ss
;

56 
	t¥oc_func
(* 
	taux
);

57 
¥oc_func
 
	g¥öt_pid
;

58 
¥oc_func
 
	gidÀ
;

60 
scheduÀ
();

62 
öô_¥oc
();

63 
¥oc_‰ì
();

65 
pid_t
 
¥oc_¸óã
(
¥oc_func
 
func
, 
¥oc_›ti⁄
 *
›t
, * 
aux
);

66 
¥oc_wake
();

67 
¥oc_¶ìp
(
ticks
);

68 
¥oc_block
();

69 
¥oc_unblock
(
¥o˚ss
* 
¥oc
);

71 
¥oc_¥öt_d©a
();

	@include/proc/sched.h

1 #i‚def 
__SCHED_H__


2 
	#__SCHED_H__


	)

4 
	~<li°.h
>

5 
	~<¥oc/¥oc.h
>

7 
scheduÀ
();

	@include/proc/switch.h

1 #i‚de‡
_SWITCH_H_


2 
	#_SWITCH_H_


	)

4 
	~<¥oc/¥oc.h
>

5 
	~<ty≥.h
>

7 
swôch_¥o˚ss
(
¥o˚ss
 *
cur
, ¥o˚s†*
√xt
);

	@include/round.h

1 #i‚de‡
__LIB_ROUND_H


2 
	#__LIB_ROUND_H


	)

6 
	#ROUND_UP
(
X
, 
STEP
Ë(((XË+ (STEPË- 1Ë/ (STEPË* (STEP))

	)

10 
	#DIV_ROUND_UP
(
X
, 
STEP
Ë(((XË+ (STEPË- 1Ë/ (STEP))

	)

14 
	#ROUND_DOWN
(
X
, 
STEP
Ë((XË/ (STEPË* (STEP))

	)

	@include/ssulib.h

1 #i‚de‡
__SSULIB_H__


2 
	#__SSULIB_H__


	)

4 
	~<ty≥.h
>

5 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *Ë0)->MEMBER)

	)

7 
	#BUFSIZ
 128

	)

9 
mem˝y
(* 
‰om
, * 
to
, 
uöt32_t
 
Àn
);

10 
°∫cmp
(* 
b1
, * 
b2
, 
Àn
);

11 
boﬁ
 
gëkbd
(*
buf
, 
Àn
);

12 
gëTokí
(* 
buf
, 
tok
[][
BUFSIZ
], 
max
);

13 
gíîic_ªad
(
fd
, *
buf
, 
size_t
 
Àn
);

15 
gíîic_wrôe
(
fd
, *
buf
, 
size_t
 
Àn
);

16 
gíîic_˛o£
(
fd
);

	@include/stdarg.h

1 #i‚de‡
__STDARG_H__


2 
	#__STDARG_H__


	)

4 *
	tva_li°
;

6 
	#_ADDRESSOF
(
v
Ë–&(vË)

	)

7 
	#_INTSIZEOF
(
n
Ë–(“Ë+ (Ë- 1Ë& ~((Ë- 1Ë)

	)

9 
	#va_°¨t
(
≠
,
v
Ë–≠ = (
va_li°
)
	`_ADDRESSOF
(vË+ 
	`_INTSIZEOF
(vË)

	)

10 
	#va_¨g
(
≠
,
t
Ë–*— *)(◊∞+
	`_INTSIZEOF
—)Ë- _INTSIZEOF—)Ë)

	)

11 
	#va_íd
(
≠
Ë–≠ = (
va_li°
)0 )

	)

13 
°æí
(c⁄° *
°rög
);

14 *
numbî
(* 
°r
, 
num
, 
ba£
, 
size
, 
¥ecisi⁄
, 
ty≥
);

15 
skù_©oi
(c⁄° **
s
);

16 
v•rötk
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

	@include/stdbool.h

1 #i‚de‡
__LIB_STDBOOL_H


2 
	#__LIB_STDBOOL_H


	)

5 
	#åue
 1

	)

6 
	#Ál£
 0

	)

7 
	#__boﬁ_åue_Ál£_¨e_deföed
 1

	)

	@include/stddef.h

1 #i‚de‡
__LIB_STDDEF_H


2 
	#__LIB_STDDEF_H


	)

5 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *Ë0)->MEMBER)

	)

10 
__PTRDIFF_TYPE__
 
	t±rdiff_t
;

11 
__SIZE_TYPE__
 
	tsize_t
;

	@include/stdint.h

1 #i‚de‡
__LIB_STDINT_H


2 
	#__LIB_STDINT_H


	)

4 sig√d 
	töt8_t
;

5 
	#INT8_MAX
 127

	)

6 
	#INT8_MIN
 (-
INT8_MAX
 - 1)

	)

8 sig√d 
	töt16_t
;

9 
	#INT16_MAX
 32767

	)

10 
	#INT16_MIN
 (-
INT16_MAX
 - 1)

	)

12 sig√d 
	töt32_t
;

13 
	#INT32_MAX
 2147483647

	)

14 
	#INT32_MIN
 (-
INT32_MAX
 - 1)

	)

16 sig√d 
	töt64_t
;

17 
	#INT64_MAX
 9223372036854775807LL

	)

18 
	#INT64_MIN
 (-
INT64_MAX
 - 1)

	)

20 
	tuöt8_t
;

21 
	#UINT8_MAX
 255

	)

23 
	tuöt16_t
;

24 
	#UINT16_MAX
 65535

	)

26 
	tuöt32_t
;

27 
	#UINT32_MAX
 4294967295U

	)

29 
	tuöt64_t
;

30 
	#UINT64_MAX
 18446744073709551615ULL

	)

32 
öt32_t
 
	töçå_t
;

33 
	#INTPTR_MIN
 
INT32_MIN


	)

34 
	#INTPTR_MAX
 
INT32_MAX


	)

36 
uöt32_t
 
	tuöçå_t
;

37 
	#UINTPTR_MAX
 
UINT32_MAX


	)

39 
öt64_t
 
	tötmax_t
;

40 
	#INTMAX_MIN
 
INT64_MIN


	)

41 
	#INTMAX_MAX
 
INT64_MAX


	)

43 
	tuötmax_t
;

44 
	#UINTMAX_MAX
 
UINT64_MAX


	)

46 
	#PTRDIFF_MIN
 
INT32_MIN


	)

47 
	#PTRDIFF_MAX
 
INT32_MAX


	)

49 
	#SIZE_MAX
 
UINT32_MAX


	)

	@include/stdio.h

1 #i‚de‡
__LIB_STDIO_H


2 
	#__LIB_STDIO_H


	)

4 
	~<debug.h
>

5 
	~<°d¨g.h
>

6 
	~<ty≥.h
>

7 
	~<°ddef.h
>

8 
	~<°döt.h
>

15 
	#STDIN_FILENO
 0

	)

16 
	#STDOUT_FILENO
 1

	)

19 
	$¥ötf
 (c⁄° *, ...Ë
	`PRINTF_FORMAT
 (1, 2);

20 
	$¢¥ötf
 (*, 
size_t
, c⁄° *, ...Ë
	`PRINTF_FORMAT
 (3, 4);

21 
	$v¥ötf
 (c⁄° *, 
va_li°
Ë
	`PRINTF_FORMAT
 (1, 0);

22 
	$v¢¥ötf
 (*, 
size_t
, c⁄° *, 
va_li°
Ë
	`PRINTF_FORMAT
 (3, 0);

23 
	`putch¨
 ();

24 
	`puts
 (const *);

27 
	`hex_dump
 (
uöçå_t
 
ofs
, c⁄° *, 
size_t
 
size
, 
boﬁ
 
ascii
);

28 
	`¥öt_hum™_ªadabÀ_size
 (
uöt64_t
 
sz
);

31 
	`__v¥ötf
 (c⁄° *
f‹m©
, 
va_li°
 
¨gs
,

32 (*
ouçut
Ë(, *), *
aux
);

33 
	`__¥ötf
 (c⁄° *
f‹m©
,

34 (*
ouçut
Ë(, *), *
aux
, ...);

37 
	#•rötf
 
d⁄t_u£_•rötf_u£_¢¥ötf


	)

38 
	#v•rötf
 
d⁄t_u£_v•rötf_u£_v¢¥ötf


	)

	@include/stdlib.h

1 #i‚de‡
__LIB_STDLIB_H


2 
	#__LIB_STDLIB_H


	)

4 
	~<°ddef.h
>

7 
©oi
 (const *);

8 
qs‹t
 (*
¨øy
, 
size_t
 
˙t
, size_à
size
,

9 (*
com∑ª
) (const *, const *));

10 *
	`b£¨ch
 (c⁄° *
key
, c⁄° *
¨øy
, 
size_t
 
˙t
,

11 
size_t
 
size
, (*
com∑ª
) (const *, const *));

14 
	`s‹t
 (*
¨øy
, 
size_t
 
˙t
, size_à
size
,

15 (*
com∑ª
Ë(c⁄° *, c⁄° *, *
aux
),

16 *
aux
);

17 *
	`bö¨y_£¨ch
 (c⁄° *
key
, c⁄° *
¨øy
, 
size_t
 
˙t
,

18 
size_t
 
size
,

19 (*
com∑ª
Ë(c⁄° *, c⁄° *, *
aux
),

20 *
aux
);

	@include/string.h

1 #i‚de‡
__LIB_STRING_H


2 
	#__LIB_STRING_H


	)

4 
	~<°ddef.h
>

8 *
memmove
 (*, c⁄° *, 
size_t
);

9 *
°∫ˇt
 (*, c⁄° *, 
size_t
);

10 
memcmp
 (c⁄° *, c⁄° *, 
size_t
);

11 
°rcmp
 (const *, const *);

12 *
memchr
 (c⁄° *, , 
size_t
);

13 *
°rchr
 (const *, );

14 
size_t
 
°rc•n
 (const *, const *);

15 *
°Ωbrk
 (const *, const *);

16 *
°ºchr
 (const *, );

17 
size_t
 
°r•n
 (const *, const *);

18 *
°r°r
 (const *, const *);

19 *
mem£t
 (*, , 
size_t
);

23 
size_t
 
°æ˝y
 (*, const *, size_t);

24 
size_t
 
°æˇt
 (*, const *, size_t);

25 *
°πok_r
 (*, const *, **);

26 
size_t
 
°∫Àn
 (const *, size_t);

29 
	#°r˝y
 
d⁄t_u£_°r˝y_u£_°æ˝y


	)

30 
	#°∫˝y
 
d⁄t_u£_°∫˝y_u£_°æ˝y


	)

31 
	#°rˇt
 
d⁄t_u£_°rˇt_u£_°æˇt


	)

32 
	#°∫ˇt
 
d⁄t_u£_°∫ˇt_u£_°æˇt


	)

33 
	#°πok
 
d⁄t_u£_°πok_u£_°πok_r


	)

	@include/synch.h

1 #i‚de‡
__SYNCH_H__


2 
	#__SYNCH_H__


	)

4 
	~<li°.h
>

5 
	~<ty≥.h
>

9 
	s£m≠h‹e


11 
	mvÆue
;

12 
li°
 
	mwaôîs
;

15 
£ma_öô
 (
£m≠h‹e
 *, 
vÆue
);

16 
£ma_down
 (
£m≠h‹e
 *);

17 
boﬁ
 
£ma_åy_down
 (
£m≠h‹e
 *);

18 
£ma_up
 (
£m≠h‹e
 *);

19 
£ma_£lf_ã°
 ();

22 
	slock


24 
¥o˚ss
 *
	mhﬁdî
;

25 
£m≠h‹e
 
	m£m≠h‹e
;

28 
lock_öô
 (
lock
 *);

29 
lock_acquúe
 (
lock
 *);

30 
boﬁ
 
lock_åy_acquúe
 (
lock
 *);

31 
lock_ªÀa£
 (
lock
 *);

32 
boﬁ
 
lock_hñd_by_cuºít_¥o˚ss
 (c⁄° 
lock
 *);

35 
	sc⁄dôi⁄


37 
li°
 
	mwaôîs
;

40 
c⁄d_öô
 (
c⁄dôi⁄
 *);

41 
c⁄d_waô
 (
c⁄dôi⁄
 *, 
lock
 *);

42 
c⁄d_sig«l
 (
c⁄dôi⁄
 *, 
lock
 *);

43 
c⁄d_brﬂdˇ°
 (
c⁄dôi⁄
 *, 
lock
 *);

50 
	#b¨rõr
(Ë
asm
 vﬁ©ûê("" : : : "mem‹y")

	)

	@include/syscall.h

1 #i‚de‡ 
__SYSCALL_H__


2 
	#__SYSCALL_H__


	)

4 
	eSYS_LIST
 {

5 
	mSYS_FORK
 = 0,

6 
	mSYS_EXIT
,

7 
	mSYS_WAIT
,

8 
	mSYS_SSUREAD
,

9 
	mSYS_SHUTDOWN
,

10 
	mSYS_OPEN
,

11 
	mSYS_READ
,

12 
	mSYS_WRITE
,

13 
	mSYS_NUM
,

16 
	~<¥oc/¥oc.h
>

17 
öô_sysˇŒ
();

19 
exô
(
°©us
);

20 
pid_t
 
f‹k
(
¥oc_func
 
func
, * 
aux1
);

21 
pid_t
 
waô
(*
°©us
);

22 
ssuªad
();

23 
shutdown
();

24 
›í
(c⁄° *
∑th«me
, 
Êags
);

25 
ªad
(
fd
, *
buf
, 
size_t
 
Àn
);

26 
wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
Àn
);

30 
sysˇŒ_tbl
[
SYS_NUM
][2];

	@include/type.h

1 #i‚de‡
__TYPE_H__


2 
	#__TYPE_H__


	)

4 
	tBYTE
;

5 #i‚de‡
BOOL


6 
	tBOOL
;

8 
	tboﬁ
;

9 
	tsize_t
;

10 
	tqw‹d
;

12 
	#TRUE
 1

	)

13 
	#FALSE
 0

	)

15 #i‚de‡
NULL


16 
	#NULL
 0

	)

18 #i‚de‡
åue


19 
	#åue
 1

	)

21 #i‚de‡
Ál£


22 
	#Ál£
 0

	)

29 sig√d 
	töt8_t
;

30 
	#INT8_MAX
 127

	)

31 
	#INT8_MIN
 (-
INT8_MAX
 - 1)

	)

33 sig√d 
	töt16_t
;

34 
	#INT16_MAX
 32767

	)

35 
	#INT16_MIN
 (-
INT16_MAX
 - 1)

	)

37 sig√d 
	töt32_t
;

38 
	#INT32_MAX
 2147483647

	)

39 
	#INT32_MIN
 (-
INT32_MAX
 - 1)

	)

41 sig√d 
	töt64_t
;

42 
	#INT64_MAX
 9223372036854775807LL

	)

43 
	#INT64_MIN
 (-
INT64_MAX
 - 1)

	)

45 
	tuöt8_t
;

46 
	#UINT8_MAX
 255

	)

48 
	tuöt16_t
;

49 
	#UINT16_MAX
 65535

	)

51 
	tuöt32_t
;

52 
	#UINT32_MAX
 4294967295U

	)

54 
	tuöt64_t
;

55 
	#UINT64_MAX
 18446744073709551615ULL

	)

57 
öt32_t
 
	töçå_t
;

58 
	#INTPTR_MIN
 
INT32_MIN


	)

59 
	#INTPTR_MAX
 
INT32_MAX


	)

61 
uöt32_t
 
	tuöçå_t
;

62 
	#UINTPTR_MAX
 
UINT32_MAX


	)

64 
öt64_t
 
	tötmax_t
;

65 
	#INTMAX_MIN
 
INT64_MIN


	)

66 
	#INTMAX_MAX
 
INT64_MAX


	)

68 
	tuötmax_t
;

69 
	#UINTMAX_MAX
 
UINT64_MAX


	)

71 
	#PTRDIFF_MIN
 
INT32_MIN


	)

72 
	#PTRDIFF_MAX
 
INT32_MAX


	)

74 
	#SIZE_MAX
 
UINT32_MAX


	)

	@include/vaddr.h

1 #i‚de‡
THREADS_VADDR_H


2 
	#THREADS_VADDR_H


	)

4 
	~<debug.h
>

5 
	~<°döt.h
>

6 
	~<°dboﬁ.h
>

8 
	~<lﬂdî.h
>

15 
	#BITMASK
(
SHIFT
, 
CNT
Ë(((1u»<< (CNT)Ë- 1Ë<< (SHIFT))

	)

18 
	#PGSHIFT
 0

	)

19 
	#PGBITS
 12

	)

20 
	#PGSIZE
 (1 << 
PGBITS
Ë

	)

21 
	#PGMASK
 
	`BITMASK
(
PGSHIFT
, 
PGBITS
Ë

	)

24 
ölöe
 
	$pg_ofs
 (c⁄° *
va
) {

25  (
uöçå_t
Ë
va
 & 
PGMASK
;

26 
	}
}

29 
ölöe
 
uöçå_t
 
	$pg_no
 (c⁄° *
va
) {

30  (
uöçå_t
Ë
va
 >> 
PGBITS
;

31 
	}
}

34 
ölöe
 *
	$pg_round_up
 (c⁄° *
va
) {

35  (*Ë(((
uöçå_t
Ë
va
 + 
PGSIZE
 - 1Ë& ~
PGMASK
);

36 
	}
}

39 
ölöe
 *
	$pg_round_down
 (c⁄° *
va
) {

40  (*Ë((
uöçå_t
Ë
va
 & ~
PGMASK
);

41 
	}
}

53 
	#PHYS_BASE
 ((*Ë
LOADER_PHYS_BASE
)

	)

56 
ölöe
 
boﬁ


57 
	$is_u£r_vaddr
 (c⁄° *
vaddr
)

59  
vaddr
 < 
PHYS_BASE
;

60 
	}
}

63 
ölöe
 
boﬁ


64 
	$is_kî√l_vaddr
 (c⁄° *
vaddr
)

66  
vaddr
 >
PHYS_BASE
;

67 
	}
}

71 
ölöe
 *

72 
	$±ov
 (
uöçå_t
 
∑ddr
)

74 
	`ASSERT
 ((*Ë
∑ddr
 < 
PHYS_BASE
);

76  (*Ë(
∑ddr
 + 
PHYS_BASE
);

77 
	}
}

81 
ölöe
 
uöçå_t


82 
	$vt›
 (c⁄° *
vaddr
)

84 
	`ASSERT
 (
	`is_kî√l_vaddr
 (
vaddr
));

86  (
uöçå_t
Ë
vaddr
 - (uöçå_tË
PHYS_BASE
;

87 
	}
}

	@list.c

1 
	~<li°.h
>

3 #i‚de‡
ASSERT


4 
	#ASSERT
(
COND
Ë;

	)

37 
boﬁ
 
is_s‹ãd
 (
li°_ñem
 *
a
, li°_ñem *
b
,

38 
li°_Àss_func
 *
Àss
, *
aux
);

41 
ölöe
 
boﬁ


42 
	$is_hód
 (
li°_ñem
 *
ñem
)

44  
ñem
 !
NULL
 &&ÉÀm->
¥ev
 =NULL &&ÉÀm->
√xt
 != NULL;

45 
	}
}

49 
ölöe
 
boﬁ


50 
	$is_öãri‹
 (
li°_ñem
 *
ñem
)

52  
ñem
 !
NULL
 &&ÉÀm->
¥ev
 !NULL &&ÉÀm->
√xt
 != NULL;

53 
	}
}

56 
ölöe
 
boﬁ


57 
	$is_èû
 (
li°_ñem
 *
ñem
)

59  
ñem
 !
NULL
 &&ÉÀm->
¥ev
 !NULL &&ÉÀm->
√xt
 == NULL;

60 
	}
}

64 
	$li°_öô
 (
li°
 *list)

66 
	`ASSERT
 (
li°
 !
NULL
);

67 
li°
->
hód
.
¥ev
 = 
NULL
;

68 
li°
->
hód
.
√xt
 = &li°->
èû
;

69 
li°
->
èû
.
¥ev
 = &li°->
hód
;

70 
li°
->
èû
.
√xt
 = 
NULL
;

71 
	}
}

74 
li°_ñem
 *

75 
	$li°_begö
 (
li°
 *list)

77 
	`ASSERT
 (
li°
 !
NULL
);

78  
li°
->
hód
.
√xt
;

79 
	}
}

84 
li°_ñem
 *

85 
	$li°_√xt
 (
li°_ñem
 *
ñem
)

87 
	`ASSERT
 (
	`is_hód
 (
ñem
Ë|| 
	`is_öãri‹
 (elem));

88  
ñem
->
√xt
;

89 
	}
}

96 
li°_ñem
 *

97 
	$li°_íd
 (
li°
 *list)

99 
	`ASSERT
 (
li°
 !
NULL
);

100  &
li°
->
èû
;

101 
	}
}

105 
li°_ñem
 *

106 
	$li°_rbegö
 (
li°
 *list)

108 
	`ASSERT
 (
li°
 !
NULL
);

109  
li°
->
èû
.
¥ev
;

110 
	}
}

115 
li°_ñem
 *

116 
	$li°_¥ev
 (
li°_ñem
 *
ñem
)

118 
	`ASSERT
 (
	`is_öãri‹
 (
ñem
Ë|| 
	`is_èû
 (elem));

119  
ñem
->
¥ev
;

120 
	}
}

135 
li°_ñem
 *

136 
	$li°_ªnd
 (
li°
 *list)

138 
	`ASSERT
 (
li°
 !
NULL
);

139  &
li°
->
hód
;

140 
	}
}

153 
li°_ñem
 *

154 
	$li°_hód
 (
li°
 *list)

156 
	`ASSERT
 (
li°
 !
NULL
);

157  &
li°
->
hód
;

158 
	}
}

161 
li°_ñem
 *

162 
	$li°_èû
 (
li°
 *list)

164 
	`ASSERT
 (
li°
 !
NULL
);

165  &
li°
->
èû
;

166 
	}
}

172 
	$li°_ö£π
 (
li°_ñem
 *
bef‹e
, li°_ñem *
ñem
)

174 
	`ASSERT
 (
	`is_öãri‹
 (
bef‹e
Ë|| 
	`is_èû
 (before));

175 
	`ASSERT
 (
ñem
 !
NULL
);

177 if(
ñem
->
¥ev
 !
NULL
)

178 
ñem
->
¥ev
->
√xt
 =Élem->next;

179 if(
ñem
->
√xt
 !
NULL
)

180 
ñem
->
√xt
->
¥ev
 =Élem->prev;

182 
ñem
->
¥ev
 = 
bef‹e
->prev;

183 
ñem
->
√xt
 = 
bef‹e
;

184 
bef‹e
->
¥ev
->
√xt
 = 
ñem
;

185 
bef‹e
->
¥ev
 = 
ñem
;

186 
	}
}

192 
	$li°_•li˚
 (
li°_ñem
 *
bef‹e
,

193 
li°_ñem
 *
fú°
, li°_ñem *
œ°
)

195 
	`ASSERT
 (
	`is_öãri‹
 (
bef‹e
Ë|| 
	`is_èû
 (before));

196 i‡(
fú°
 =
œ°
)

198 
œ°
 = 
	`li°_¥ev
 (last);

200 
	`ASSERT
 (
	`is_öãri‹
 (
fú°
));

201 
	`ASSERT
 (
	`is_öãri‹
 (
œ°
));

204 
fú°
->
¥ev
->
√xt
 = 
œ°
->next;

205 
œ°
->
√xt
->
¥ev
 = 
fú°
->prev;

208 
fú°
->
¥ev
 = 
bef‹e
->prev;

209 
œ°
->
√xt
 = 
bef‹e
;

210 
bef‹e
->
¥ev
->
√xt
 = 
fú°
;

211 
bef‹e
->
¥ev
 = 
œ°
;

212 
	}
}

217 
	$li°_push_‰⁄t
 (
li°
 *li°, 
li°_ñem
 *
ñem
)

219 
	`li°_ö£π
 (
	`li°_begö
 (
li°
), 
ñem
);

220 
	}
}

225 
	$li°_push_back
 (
li°
 *li°, 
li°_ñem
 *
ñem
)

227 
	`li°_ö£π
 (
	`li°_íd
 (
li°
), 
ñem
);

228 
	}
}

256 
li°_ñem
 *

257 
	$li°_ªmove
 (
li°_ñem
 *
ñem
)

259 
	`ASSERT
 (
	`is_öãri‹
 (
ñem
));

260 
ñem
->
¥ev
->
√xt
 =Élem->next;

261 
ñem
->
√xt
->
¥ev
 =Élem->prev;

262  
ñem
->
√xt
;

263 
	}
}

267 
li°_ñem
 *

268 
	$li°_p›_‰⁄t
 (
li°
 *list)

270 
li°_ñem
 *
‰⁄t
 = 
	`li°_‰⁄t
 (
li°
);

271 
	`li°_ªmove
 (
‰⁄t
);

272  
‰⁄t
;

273 
	}
}

277 
li°_ñem
 *

278 
	$li°_p›_back
 (
li°
 *list)

280 
li°_ñem
 *
back
 = 
	`li°_back
 (
li°
);

281 
	`li°_ªmove
 (
back
);

282  
back
;

283 
	}
}

287 
li°_ñem
 *

288 
	$li°_‰⁄t
 (
li°
 *list)

290 
	`ASSERT
 (!
	`li°_em±y
 (
li°
));

291  
li°
->
hód
.
√xt
;

292 
	}
}

296 
li°_ñem
 *

297 
	$li°_back
 (
li°
 *list)

299 
	`ASSERT
 (!
	`li°_em±y
 (
li°
));

300  
li°
->
èû
.
¥ev
;

301 
	}
}

305 
size_t


306 
	$li°_size
 (
li°
 *list)

308 
li°_ñem
 *
e
;

309 
size_t
 
˙t
 = 0;

311 
e
 = 
	`li°_begö
 (
li°
);É !
	`li°_íd
 (li°);É = 
	`li°_√xt
 (e))

312 
˙t
++;

313  
˙t
;

314 
	}
}

317 
boﬁ


318 
	$li°_em±y
 (
li°
 *list)

320  
	`li°_begö
 (
li°
Ë=
	`li°_íd
 (list);

321 
	}
}

325 
	$sw≠
 (
li°_ñem
 **
a
, li°_ñem **
b
)

327 
li°_ñem
 *
t
 = *
a
;

328 *
a
 = *
b
;

329 *
b
 = 
t
;

330 
	}
}

334 
	$li°_ªvî£
 (
li°
 *list)

336 i‡(!
	`li°_em±y
 (
li°
))

338 
li°_ñem
 *
e
;

340 
e
 = 
	`li°_begö
 (
li°
);É !
	`li°_íd
 (li°);É =É->
¥ev
)

341 
	`sw≠
 (&
e
->
¥ev
, &e->
√xt
);

342 
	`sw≠
 (&
li°
->
hód
.
√xt
, &li°->
èû
.
¥ev
);

343 
	`sw≠
 (&
li°
->
hód
.
√xt
->
¥ev
, &li°->
èû
.prev->next);

345 
	}
}

349 
boﬁ


350 
	$is_s‹ãd
 (
li°_ñem
 *
a
, li°_ñem *
b
,

351 
li°_Àss_func
 *
Àss
, *
aux
)

353 i‡(
a
 !
b
)

354 (
a
 = 
	`li°_√xt
 (a)Ë!
b
)

355 i‡(
	`Àss
 (
a
, 
	`li°_¥ev
 (a), 
aux
))

356  
Ál£
;

357  
åue
;

358 
	}
}

365 
li°_ñem
 *

366 
	$föd_íd_of_run
 (
li°_ñem
 *
a
, li°_ñem *
b
,

367 
li°_Àss_func
 *
Àss
, *
aux
)

369 
	`ASSERT
 (
a
 !
NULL
);

370 
	`ASSERT
 (
b
 !
NULL
);

371 
	`ASSERT
 (
Àss
 !
NULL
);

372 
	`ASSERT
 (
a
 !
b
);

376 
a
 = 
	`li°_√xt
 (a);

378 
a
 !
b
 && !
	`Àss
 (a, 
	`li°_¥ev
 (a), 
aux
));

379  
a
;

380 
	}
}

388 
	$ö∂a˚_mîge
 (
li°_ñem
 *
a0
, li°_ñem *
a1b0
,

389 
li°_ñem
 *
b1
,

390 
li°_Àss_func
 *
Àss
, *
aux
)

392 
	`ASSERT
 (
a0
 !
NULL
);

393 
	`ASSERT
 (
a1b0
 !
NULL
);

394 
	`ASSERT
 (
b1
 !
NULL
);

395 
	`ASSERT
 (
Àss
 !
NULL
);

396 
	`ASSERT
 (
	`is_s‹ãd
 (
a0
, 
a1b0
, 
Àss
, 
aux
));

397 
	`ASSERT
 (
	`is_s‹ãd
 (
a1b0
, 
b1
, 
Àss
, 
aux
));

399 
a0
 !
a1b0
 &&á1b0 !
b1
)

400 i‡(!
	`Àss
 (
a1b0
, 
a0
, 
aux
))

401 
a0
 = 
	`li°_√xt
 (a0);

404 
a1b0
 = 
	`li°_√xt
 (a1b0);

405 
	`li°_•li˚
 (
a0
, 
	`li°_¥ev
 (
a1b0
),á1b0);

407 
	}
}

413 
	$li°_s‹t
 (
li°
 *li°, 
li°_Àss_func
 *
Àss
, *
aux
)

415 
size_t
 
ouçut_run_˙t
;

417 
	`ASSERT
 (
li°
 !
NULL
);

418 
	`ASSERT
 (
Àss
 !
NULL
);

424 
li°_ñem
 *
a0
;

425 
li°_ñem
 *
a1b0
;

426 
li°_ñem
 *
b1
;

428 
ouçut_run_˙t
 = 0;

429 
a0
 = 
	`li°_begö
 (
li°
);á0 !
	`li°_íd
 (li°);á0 = 
b1
)

432 
ouçut_run_˙t
++;

436 
a1b0
 = 
	`föd_íd_of_run
 (
a0
, 
	`li°_íd
 (
li°
), 
Àss
, 
aux
);

437 i‡(
a1b0
 =
	`li°_íd
 (
li°
))

439 
b1
 = 
	`föd_íd_of_run
 (
a1b0
, 
	`li°_íd
 (
li°
), 
Àss
, 
aux
);

442 
	`ö∂a˚_mîge
 (
a0
, 
a1b0
, 
b1
, 
Àss
, 
aux
);

445 
ouçut_run_˙t
 > 1);

447 
	`ASSERT
 (
	`is_s‹ãd
 (
	`li°_begö
 (
li°
), 
	`li°_íd
 (li°), 
Àss
, 
aux
));

448 
	}
}

454 
	$li°_ö£π_‹dîed
 (
li°
 *li°, 
li°_ñem
 *
ñem
,

455 
li°_Àss_func
 *
Àss
, *
aux
)

457 
li°_ñem
 *
e
;

459 
	`ASSERT
 (
li°
 !
NULL
);

460 
	`ASSERT
 (
ñem
 !
NULL
);

461 
	`ASSERT
 (
Àss
 !
NULL
);

463 
e
 = 
	`li°_begö
 (
li°
);É !
	`li°_íd
 (li°);É = 
	`li°_√xt
 (e))

464 i‡(
	`Àss
 (
ñem
, 
e
, 
aux
))

466  
	`li°_ö£π
 (
e
, 
ñem
);

467 
	}
}

474 
	$li°_unique
 (
li°
 *li°, li° *
du∂iˇãs
,

475 
li°_Àss_func
 *
Àss
, *
aux
)

477 
li°_ñem
 *
ñem
, *
√xt
;

479 
	`ASSERT
 (
li°
 !
NULL
);

480 
	`ASSERT
 (
Àss
 !
NULL
);

481 i‡(
	`li°_em±y
 (
li°
))

484 
ñem
 = 
	`li°_begö
 (
li°
);

485 (
√xt
 = 
	`li°_√xt
 (
ñem
)Ë!
	`li°_íd
 (
li°
))

486 i‡(!
	`Àss
 (
ñem
, 
√xt
, 
aux
) && !less (next,Élem,áux))

488 
	`li°_ªmove
 (
√xt
);

489 i‡(
du∂iˇãs
 !
NULL
)

490 
	`li°_push_back
 (
du∂iˇãs
, 
√xt
);

493 
ñem
 = 
√xt
;

494 
	}
}

500 
li°_ñem
 *

501 
	$li°_max
 (
li°
 *li°, 
li°_Àss_func
 *
Àss
, *
aux
)

503 
li°_ñem
 *
max
 = 
	`li°_begö
 (
li°
);

504 i‡(
max
 !
	`li°_íd
 (
li°
))

506 
li°_ñem
 *
e
;

508 
e
 = 
	`li°_√xt
 (
max
);É !
	`li°_íd
 (
li°
);É =Üist_next (e))

509 i‡(
	`Àss
 (
max
, 
e
, 
aux
))

510 
max
 = 
e
;

512  
max
;

513 
	}
}

519 
li°_ñem
 *

520 
	$li°_mö
 (
li°
 *li°, 
li°_Àss_func
 *
Àss
, *
aux
)

522 
li°_ñem
 *
mö
 = 
	`li°_begö
 (
li°
);

523 i‡(
mö
 !
	`li°_íd
 (
li°
))

525 
li°_ñem
 *
e
;

527 
e
 = 
	`li°_√xt
 (
mö
);É !
	`li°_íd
 (
li°
);É =Üist_next (e))

528 i‡(
	`Àss
 (
e
, 
mö
, 
aux
))

529 
mö
 = 
e
;

531  
mö
;

532 
	}
}

	@mem/malloc.c

	@mem/mm.c

1 
	~<mem/mm.h
>

3 
gëMemSize
();

4 
nGëMemSize
();

6 
	gMEM_SIZE
;

8 
	$dëe˘_mem
()

10 
MEM_SIZE
 = 
	`nGëMemSize
();

12 
	}
}

14 
	$nGëMemSize
()

16 *
pAddr
 = (*)0x20000;

17 
tmp
;

19 
pAddr
 += (4*1024*1024);

20 
tmp
 = *
pAddr
;

21 *
pAddr
 = 0x12345678;

22 if(*
pAddr
 != 0x12345678) {

23 
pAddr
 -= (4*1024*1024);

25 
pAddr
 += (4*1024);

26 
tmp
 = *
pAddr
;

27 *
pAddr
 = 0x87654321;

28 if(*
pAddr
 != 0x87654321)

30 *
pAddr
 = 
tmp
;

34 *
pAddr
 = 
tmp
;

37  ()
pAddr
;

38 
	}
}

40 
	$mem_size
()

42  
MEM_SIZE
;

43 
	}
}

	@mem/paging.c

1 
	~<devi˚/io.h
>

2 
	~<mem/mm.h
>

3 
	~<mem/∑gög.h
>

4 
	~<devi˚/c⁄sﬁe.h
>

5 
	~<¥oc/¥oc.h
>

6 
	~<öãºu±.h
>

7 
	~<mem/∑Œoc.h
>

8 
	~<ssulib.h
>

10 
uöt32_t
 *
	gPID0_PAGE_DIR
;

12 
öå_h™dÀr_func
 
	gpf_h™dÀr
;

14 
uöt32_t
 
	$sˇÀ_up
(
uöt32_t
 
ba£
, uöt32_à
size
)

16 
uöt32_t
 
mask
 = ~(
size
-1);

17 if(
ba£
 & 
mask
 != 0)

18 
ba£
 = ba£ & 
mask
 + 
size
;

19  
ba£
;

20 
	}
}

22 
uöt32_t
 
	$sˇÀ_down
(
uöt32_t
 
ba£
, uöt32_à
size
)

24 
uöt32_t
 
mask
 = ~(
size
-1);

25 if(
ba£
 & 
mask
 != 0)

26 
ba£
 = ba£ & 
mask
 - 
size
;

27  
ba£
;

28 
	}
}

30 
	$öô_∑gög
()

32 
uöt32_t
 *
∑ge_dú
 = 
	`∑Œoc_gë_∑ge
();

33 
uöt32_t
 *
∑ge_tbl
 = 
	`∑Œoc_gë_∑ge
();

34 
PID0_PAGE_DIR
 = 
∑ge_dú
;

36 
NUM_PT
, 
NUM_PE
;

37 
uöt32_t
 
¸0_∑gög_£t
;

38 
i
;

40 
NUM_PE
 = 
	`mem_size
(Ë/ 
PAGE_SIZE
;

41 
NUM_PT
 = 
NUM_PE
 / 1024;

43 
	`¥ötk
("-PE=%d, PT=%d\n", 
NUM_PE
, 
NUM_PT
);

44 
	`¥ötk
("-∑gêdú=%xÖagêtbl=%x\n", 
∑ge_dú
, 
∑ge_tbl
);

46 
∑ge_dú
[0] = (
uöt32_t
)
∑ge_tbl
 | 
PAGE_FLAG_RW
 | 
PAGE_FLAG_PRESENT
;

49 
NUM_PE
 = 
KERNEL_HEAP
 / 
PAGE_SIZE
;

50  
i
 = 0; i < 
NUM_PE
; i++ ) {

51 
∑ge_tbl
[
i
] = (
PAGE_SIZE
 * i)

52 | 
PAGE_FLAG_RW


53 | 
PAGE_FLAG_PRESENT
;

57 
¸0_∑gög_£t
 = 
	`ªad_¸0
(Ë| 
CR0_FLAG_PG
;

59 
	`wrôe_¸3
–()
∑ge_dú
 );

60 
	`wrôe_¸0
–
¸0_∑gög_£t
 );

62 
	`ªg_h™dÀr
(14, 
pf_h™dÀr
);

63 
	}
}

65 
	$mem˝y_h¨d
(* 
‰om
, * 
to
, 
uöt32_t
 
Àn
)

67 
	`wrôe_¸0
–
	`ªad_¸0
(Ë& ~
CR0_FLAG_PG
);

69 
	`mem˝y
(
‰om
, 
to
, 
Àn
);

71 
	`wrôe_¸0
–
	`ªad_¸0
(Ë| 
CR0_FLAG_PG
);

72 
	}
}

74 
uöt32_t
* 
	$gë_cur_pd
()

76  (
uöt32_t
*)
	`ªad_¸3
();

77 
	}
}

79 
uöt32_t
 
	$pde_idx_addr
(
uöt32_t
* 
addr
)

81 
uöt32_t
 
ªt
 = ((uöt32_t)
addr
 & 
PAGE_MASK_PDE
Ë>> 
PAGE_OFFSET_PDE
;

82  
ªt
;

83 
	}
}

85 
uöt32_t
 
	$±e_idx_addr
(
uöt32_t
* 
addr
)

87 
uöt32_t
 
ªt
 = ((uöt32_t)
addr
 & 
PAGE_MASK_PTE
Ë>> 
PAGE_OFFSET_PTE
;

88  
ªt
;

89 
	}
}

91 
uöt32_t
* 
	$±_pde
(
uöt32_t
 
pde
)

93 
uöt32_t
 * 
ªt
 = (uöt32_t*)(
pde
 & 
PAGE_MASK_BASE
);

94  
ªt
;

95 
	}
}

97 
uöt32_t
* 
	$±_addr
(
uöt32_t
* 
addr
)

99 
uöt32_t
 
idx
 = 
	`pde_idx_addr
(
addr
);

100 
uöt32_t
* 
pd
 = 
	`gë_cur_pd
();

101  
	`±_pde
(
pd
[
idx
]);

102 
	}
}

104 
uöt32_t
* 
	$pg_addr
(
uöt32_t
* 
addr
)

106 
uöt32_t
 *
±
 = 
	`±_addr
(
addr
);

107 
uöt32_t
 
idx
 = 
	`±e_idx_addr
(
addr
);

108 
uöt32_t
 *
ªt
 = (uöt32_t*)(
±
[
idx
] & 
PAGE_MASK_BASE
);

109  
ªt
;

110 
	}
}

112 
uöt32_t
 
	$±_c›y
(
uöt32_t
 *
pd
, uöt32_à*
de°_pd
, uöt32_à
idx
, uöt32_t* 
°¨t
, uöt32_t* 
íd
, 
boﬁ
 
sh¨e
)

114 
uöt32_t
 *
±
 = 
	`±_pde
(
pd
[
idx
]);

115 
uöt32_t
 *
√w_±
;

116 
uöt32_t
 *
±e_s
 = 
°¨t
;

117 
uöt32_t
 *
±e_e
 = 
íd
;

118 
uöt32_t
 
s
, 
e
, 
i
;

119 
uöt32_t
 
size


120 
PAGE_SIZE
;

122 
√w_±
 = 
	`∑Œoc_gë_∑ge
();

123 
de°_pd
[
idx
] = (
uöt32_t
)
√w_±
 | (
pd
[idx] & ~
PAGE_MASK_BASE
 & ~
PAGE_FLAG_ACCESS
);

125 if(
°¨t
 =
íd
)

128 
±e_s
 = (
uöt32_t
*)
	`sˇÀ_down
((uöt32_tÌã_s, 
size
);

129 
±e_e
 = (
uöt32_t
*)
	`sˇÀ_up
((uöt32_tÌã_e, 
size
);

131 
s
 = 
	`±e_idx_addr
(
±e_s
);

132 
e
 = 
	`±e_idx_addr
(
±e_e
);

134 if(
e
 =0 && 
°¨t
 !
íd
)

135 
e
 = 
PAGE_TBL_SIZE
/(
uöt32_t
);

137 
i
 = 
s
; i<
e
; i++)

139 if(
±
[
i
] & 
PAGE_FLAG_PRESENT
)

141 if(!
sh¨e
)

143 
uöt32_t
* 
pg
 = 
	`∑Œoc_gë_∑ge
();

144 
√w_±
[
i
] = (
uöt32_t
)
pg
 | (
±
[i] & ~
PAGE_MASK_BASE
 & ~
PAGE_FLAG_ACCESS
);

145 
	`mem˝y_h¨d
((*)(
±
[
i
] & 
PAGE_MASK_BASE
), (*)
pg
, 
PAGE_SIZE
);

148 
√w_±
[
i
] = 
±
[i];

151  
de°_pd
[
idx
];

152 
	}
}

154 
	$pd_c›y
(
uöt32_t
* 
‰om
, uöt32_t* 
to
, uöt32_t* 
°¨t
, uöt32_t* 
íd
, 
boﬁ
 
sh¨e
)

156 
uöt32_t
 *
pde_s
 = 
°¨t
;

157 
uöt32_t
 *
pde_e
 = 
íd
;

158 
uöt32_t
 
s
, 
e
, 
i
;

159 
uöt32_t
 
size


160 
PAGE_SIZE


161 * 
PAGE_TBL_SIZE
/(
uöt32_t
);

163 
pde_s
 = (
uöt32_t
*)
	`sˇÀ_down
((uöt32_tÌde_s, 
size
);

164 
pde_e
 = (
uöt32_t
*)
	`sˇÀ_up
((uöt32_tÌde_e, 
size
);

166 
s
 = 
	`pde_idx_addr
(
pde_s
);

167 
e
 = 
	`pde_idx_addr
(
pde_e
);

169 
i
 = 
s
; i<
e
; i++)

171 if(
‰om
[
i
] & 
PAGE_FLAG_PRESENT
)

172 
	`±_c›y
(
‰om
, 
to
, 
i
, 
°¨t
, 
íd
, 
sh¨e
);

174 
	}
}

176 
uöt32_t
* 
	$pd_¸óã
 (
pid_t
 
pid
)

178 
uöt32_t
 *
pd
 = 
	`∑Œoc_gë_∑ge
();

179 
	`pd_c›y
(
PID0_PAGE_DIR
, 
pd
, (
uöt32_t
*)0, (uöt32_t*)
KERNEL_HEAP
, 
åue
);

180  
pd
;

181 
	}
}

183 
	$pf_h™dÀr
(
öå_‰ame
 *
i‰ame
)

185 *
Áu…_addr
;

187 
	`asm
 ("mov»%%¸2, %0" : "Ù" (
Áu…_addr
));

189 
	`¥ötk
("PagêÁu… : %X\n",
Áu…_addr
);

192 
	}
}

	@mem/palloc.c

1 
	~<mem/∑Œoc.h
>

2 
	~<bôm≠.h
>

3 
	~<ty≥.h
>

4 
	~<round.h
>

5 
	~<mem/mm.h
>

6 
	~<synch.h
>

7 
	~<devi˚/c⁄sﬁe.h
>

8 
	~<mem/∑gög.h
>

19 
	spoﬁ


21 
lock
 
	mlock
;

22 
bôm≠
 *
	mu£d_m≠
;

23 
uöt32_t
 *
	mba£
;

26 
poﬁ
 
	gmem_poﬁ
;

28 
öô_poﬁ
 (
poﬁ
 *, *
ba£
, 
size_t
 
∑ge_˙t
,

29 c⁄° *
«me
);

33 
	$öô_∑Œoc
 ()

36 
uöt32_t
 *
‰ì_°¨t
 = (uöt32_t*)
KERNEL_ADDR
;

37 
uöt32_t
 *
‰ì_íd
 = (uöt32_t*)
	`mem_size
();

38 
size_t
 
‰ì_∑ges
 = (()
‰ì_íd
 - ()
‰ì_°¨t
Ë/ 
PAGE_SIZE
;

40 
	`öô_poﬁ
 (&
mem_poﬁ
, 
‰ì_°¨t
, 
‰ì_∑ges
, "memoryÖool");

41 
	}
}

45 
uöt32_t
 *

46 
	$∑Œoc_gë_mu…ùÀ
 (
size_t
 
∑ge_˙t
)

48 
poﬁ
 *poﬁ = &
mem_poﬁ
;

49 *
∑ges
;

50 
size_t
 
∑ge_idx
;

52 i‡(
∑ge_˙t
 == 0)

53  
NULL
;

55 
	`lock_acquúe
 (&
poﬁ
->
lock
);

56 
∑ge_idx
 = 
	`bôm≠_sˇn_™d_Êù
 (
poﬁ
->
u£d_m≠
, 0, 
∑ge_˙t
, 
Ál£
);

57 
	`lock_ªÀa£
 (&
poﬁ
->
lock
);

59 i‡(
∑ge_idx
 !
BITMAP_ERROR
)

60 
∑ges
 = 
poﬁ
->
ba£
 + 
PAGE_SIZE
 * 
∑ge_idx
/(
uöt32_t
);

62 
∑ges
 = 
NULL
;

64 i‡(
∑ges
 !
NULL
)

66 
	`mem£t
 (
∑ges
, 0, 
PAGE_SIZE
 * 
∑ge_˙t
);

69  (
uöt32_t
*)
∑ges
;

70 
	}
}

74 
uöt32_t
 *

75 
	$∑Œoc_gë_∑ge
 ()

77  
	`∑Œoc_gë_mu…ùÀ
 (1);

78 
	}
}

82 
	$∑Œoc_‰ì_mu…ùÀ
 (*
∑ges
, 
size_t
 
∑ge_˙t
)

84 
poﬁ
 *pool;

85 
size_t
 
∑ge_idx
;

87 i‡(
∑ges
 =
NULL
 || 
∑ge_˙t
 == 0)

90 
poﬁ
 = &
mem_poﬁ
;

92 
∑ge_idx
 = 
	`pg_no
 (
∑ges
Ë-Ög_nÿ(
poﬁ
->
ba£
);

94 
	`bôm≠_£t_mu…ùÀ
 (
poﬁ
->
u£d_m≠
, 
∑ge_idx
, 
∑ge_˙t
, 
Ál£
);

95 
	}
}

99 
	$∑Œoc_‰ì_∑ge
 (*
∑ge
)

101 
	`∑Œoc_‰ì_mu…ùÀ
 (
∑ge
, 1);

102 
	}
}

107 
	$öô_poﬁ
 (
poﬁ
 *
p
, *
ba£
, 
size_t
 
∑ge_˙t
, c⁄° *
«me
)

112 
size_t
 
bm_∑ges
 = 
	`DIV_ROUND_UP
 (
	`bôm≠_buf_size
 (
∑ge_˙t
), 
PAGE_SIZE
);

113 i‡(
bm_∑ges
 > 
∑ge_˙t
)

114 
	`¥ötk
("NŸÉnough mem‹y i¿%†f‹ bôm≠.", 
«me
);

115 
∑ge_˙t
 -
bm_∑ges
;

117 
	`¥ötk
 ("%uÖage†avaûabÀ i¿%s.\n", 
∑ge_˙t
, 
«me
);

120 
	`lock_öô
 (&
p
->
lock
);

121 
p
->
u£d_m≠
 = 
	`bôm≠_¸óã_ö_buf
 (
∑ge_˙t
, 
ba£
, 
bm_∑ges
 * 
PAGE_SIZE
);

122 
p
->
ba£
 = ba£ + 
bm_∑ges
 * 
PAGE_SIZE
;

123 
	}
}

	@proc/proc.c

1 
	~<li°.h
>

2 
	~<¥oc/sched.h
>

3 
	~<mem/mÆloc.h
>

4 
	~<¥oc/¥oc.h
>

5 
	~<ssulib.h
>

6 
	~<°rög.h
>

7 
	~<öãºu±.h
>

8 
	~<¥oc/sched.h
>

9 
	~<devi˚/c⁄sﬁe.h
>

10 
	~<devi˚/io.h
>

11 
	~<sysˇŒ.h
>

12 
	~<mem/∑gög.h
>

13 
	~<mem/∑Œoc.h
>

14 
	~<fûesys/fs.h
>

15 
	~<fûesys/fûe.h
>

17 
	#STACK_SIZE
 512

	)

18 
	#PROC_NUM_MAX
 16

	)

20 
li°
 
	gp_li°
;

21 
li°
 
	gr_li°
;

22 
li°
 
	gs_li°
;

23 
li°
 
	gd_li°
;

25 
¥o˚ss
 
	g¥ocs
[
PROC_NUM_MAX
];

26 
¥o˚ss
 *
	gcur_¥o˚ss
;

27 
	gpid_num_max
;

30 
uöt32_t
 
	g¥o˚ss_°ack_ofs
;

33 
	glock_pid_sim∂e
;

34 
	gœãly_pid
;

36 
boﬁ
 
m‹e_¥io
(c⁄° 
li°_ñem
 *
a
, c⁄° li°_ñem *
b
,*
aux
);

37 
boﬁ
 
Àss_time_¶ìp
(c⁄° 
li°_ñem
 *
a
, c⁄° li°_ñem *
b
,*
aux
);

38 
pid_t
 
gëVÆidPid
(*
idx
);

40 
¥oc_°¨t
();

41 
¥oc_íd
();

43 
	$öô_¥oc
()

45 
¥o˚ss_°ack_ofs
 = 
	`off£tof
 (
¥o˚ss
, 
°ack
);

47 
lock_pid_sim∂e
 = 0;

48 
œãly_pid
 = -1;

50 
	`li°_öô
(&
p_li°
);

51 
	`li°_öô
(&
r_li°
);

52 
	`li°_öô
(&
s_li°
);

53 
	`li°_öô
(&
d_li°
);

55 
i
;

56 
i
 = 0; i < 
PROC_NUM_MAX
; i++)

58 
	`mem£t
 (&
¥ocs
[
i
], 0, 77);

59 
¥ocs
[
i
].
pid
 = i;

60 
¥ocs
[
i
].
°©e
 = 
PROC_UNUSED
;

61 
¥ocs
[
i
].
∑ª¡
 = 
NULL
;

64 
pid_t
 
pid
 = 
	`gëVÆidPid
(&
i
);

65 
cur_¥o˚ss
 = &
¥ocs
[
i
];

67 
cur_¥o˚ss
->
pid
 =Öid;

68 
cur_¥o˚ss
->
∑ª¡
 = 
NULL
;

69 
cur_¥o˚ss
->
°©e
 = 
PROC_RUN
;

70 
cur_¥o˚ss
->
¥i‹ôy
 = 0;

71 
cur_¥o˚ss
->
°ack
 = 0;

72 
cur_¥o˚ss
->
pd
 = (*)
	`ªad_¸3
();

74 
	`li°_push_back
(&
p_li°
, &
cur_¥o˚ss
->
ñem_Æl
);

75 
	`li°_push_back
(&
r_li°
, &
cur_¥o˚ss
->
ñem_°©
);

76 
	}
}

78 
pid_t
 
	$gëVÆidPid
(*
idx
) {

80 
pid_t
 
pid
 = -1;

81 
i
;

83 
lock_pid_sim∂e
)

86 
lock_pid_sim∂e
++;

89 
i
 = 0; i < 
PROC_NUM_MAX
; i++)

91 
tmp
 = 
i
 + 
œãly_pid
 + 1;

92 if(
¥ocs
[
tmp
 % 
PROC_NUM_MAX
].
°©e
 =
PROC_UNUSED
) {

93 
pid
 = 
œãly_pid
 + 1;

94 *
idx
 = 
tmp
 % 
PROC_NUM_MAX
;

99 if(
pid
 != -1)

101 
œãly_pid
 = 
pid
;

104 
lock_pid_sim∂e
 = 0;

106  
pid
;

107 
	}
}

109 
pid_t
 
	$¥oc_¸óã
(
¥oc_func
 
func
, 
¥oc_›ti⁄
 *
›t
, * 
aux
)

111 
¥o˚ss
 *
p
;

112 
idx
;

114 
öå_Àvñ
 
ﬁd_Àvñ
 = 
	`öå_dißbÀ
();

116 
pid_t
 
pid
 = 
	`gëVÆidPid
(&
idx
);

117 
p
 = &
¥ocs
[
idx
];

119 
p
->
pid
 =Öid;

120 
p
->
°©e
 = 
PROC_RUN
;

122 if(
›t
 !
NULL
)

123 
p
->
¥i‹ôy
 = 
›t
->priority;

125 
p
->
¥i‹ôy
 = ()0;

127 
p
->
time_u£d
 = 0;

128 
p
->
time_sched
= 0;

129 
p
->
∑ª¡
 = 
cur_¥o˚ss
;

130 
p
->
sim∂e_lock
 = 0;

131 
p
->
chûd_pid
 = -1;

132 
p
->
pd
 = 
	`pd_¸óã
(
pid
);

134 
i
;

135 
i
=0;i<
NR_FILEDES
;i++)

136 
p
->
fûe
[
i
] = 
NULL
;

139 *
t›
 = (*)
	`∑Œoc_gë_∑ge
();

140 
°ack
 = ()
t›
;

141 
t›
 = (*)
°ack
 + 
STACK_SIZE
 - 1;

143 *(--
t›
Ë()
aux
;

144 *(--
t›
Ë()
¥oc_íd
;

145 *(--
t›
Ë()
func
;

146 *(--
t›
Ë()
¥oc_°¨t
;

149 *(--
t›
Ë()((*)
°ack
 + 
STACK_SIZE
 - 1);

150 *(--
t›
) = 1;

151 *(--
t›
) = 2;

152 *(--
t›
) = 3;

153 *(--
t›
) = 4;

154 *(--
t›
) = 5;

155 *(--
t›
) = 6;

157 
p
->
°ack
 = 
t›
;

158 
p
->
ñem_Æl
.
¥ev
 = 
NULL
;

159 
p
->
ñem_Æl
.
√xt
 = 
NULL
;

160 
p
->
ñem_°©
.
¥ev
 = 
NULL
;

161 
p
->
ñem_°©
.
√xt
 = 
NULL
;

164 
p
->
roŸdú
 =Ö->
∑ª¡
->rootdir;

165 
p
->
cwd
 =Ö->
∑ª¡
->cwd;

167 
	`li°_push_back
(&
p_li°
, &
p
->
ñem_Æl
);

168 
	`li°_push_back
(&
r_li°
, &
p
->
ñem_°©
);

170 
	`öå_£t_Àvñ
 (
ﬁd_Àvñ
);

171  
p
->
pid
;

172 
	}
}

174 * 
	$gëEIP
()

176  
	`__buûtö_ªtu∫_addªss
(0);

177 
	}
}

179 
	$¥oc_°¨t
()

181 
	`öå_íabÀ
 ();

183 
	}
}

185 
	$¥oc_‰ì
()

187 
uöt32_t
 
±
 = *(uöt32_t*)
cur_¥o˚ss
->
pd
;

188 
cur_¥o˚ss
->
∑ª¡
->
chûd_pid
 = cur_¥o˚ss->
pid
;

189 
cur_¥o˚ss
->
∑ª¡
->
sim∂e_lock
 = 0;

191 
	`li°_ªmove
(&
cur_¥o˚ss
->
ñem_°©
);

193 
cur_¥o˚ss
->
°©e
 = 
PROC_ZOMBIE
;

194 
	`li°_push_back
(&
d_li°
, &
cur_¥o˚ss
->
ñem_°©
);

196 
	}
}

198 
	$¥oc_íd
()

200 
	`¥oc_‰ì
();

201 
	`scheduÀ
();

202 
	`¥ötk
("neverÑeach\n");

204 
	}
}

206 
	$¥oc_wake
()

208 
¥o˚ss
* 
p
;

209 
t
 = 
	`gë_ticks
();

211 !
	`li°_em±y
(&
s_li°
))

213 
p
 = 
	`li°_íåy
(
	`li°_‰⁄t
(&
s_li°
), 
¥o˚ss
, 
ñem_°©
);

214 if(
p
->
time_¶ìp
 > 
t
)

217 
p
->
°©e
 = 
PROC_RUN
;

218 
	`li°_ªmove
(&
p
->
ñem_°©
);

220 
	}
}

222 
	$¥oc_¶ìp
(
ticks
)

224 
cur_ticks
 = 
	`gë_ticks
();

225 
cur_¥o˚ss
->
time_¶ìp
 = 
ticks
 + 
cur_ticks
;

226 
cur_¥o˚ss
->
°©e
 = 
PROC_STOP
;

227 
	`li°_ö£π_‹dîed
(&
s_li°
, &
cur_¥o˚ss
->
ñem_°©
,

228 
Àss_time_¶ìp
, 
NULL
);

229 
	`scheduÀ
();

230 
	}
}

232 
	$¥oc_block
()

234 
cur_¥o˚ss
->
°©e
 = 
PROC_BLOCK
;

235 
	`scheduÀ
();

236 
	}
}

238 
	$¥oc_unblock
(
¥o˚ss
* 
¥oc
)

240 
öå_Àvñ
 
ﬁd_Àvñ
;

242 
ﬁd_Àvñ
 = 
	`öå_dißbÀ
();

244 
	`li°_push_back
(&
r_li°
, &
¥oc
->
ñem_°©
);

245 
¥oc
->
°©e
 = 
PROC_RUN
;

247 
	`öå_£t_Àvñ
(
ﬁd_Àvñ
);

248 
	}
}

250 
boﬁ
 
	$Àss_time_¶ìp
(c⁄° 
li°_ñem
 *
a
, c⁄° li°_ñem *
b
,*
aux
)

252 
¥o˚ss
 *
p1
 = 
	`li°_íåy
(
a
, ¥o˚ss, 
ñem_°©
);

253 
¥o˚ss
 *
p2
 = 
	`li°_íåy
(
b
, ¥o˚ss, 
ñem_°©
);

255  
p1
->
time_¶ìp
 < 
p2
->time_sleep;

256 
	}
}

258 
boﬁ
 
	$m‹e_¥io
(c⁄° 
li°_ñem
 *
a
, c⁄° li°_ñem *
b
,*
aux
)

260 
¥o˚ss
 *
p1
 = 
	`li°_íåy
(
a
, ¥o˚ss, 
ñem_°©
);

261 
¥o˚ss
 *
p2
 = 
	`li°_íåy
(
b
, ¥o˚ss, 
ñem_°©
);

262  
p1
->
¥i‹ôy
 > 
p2
->priority;

263 
	}
}

266 
	$kî√l1_¥oc
(* 
aux
)

268 
cur_¥o˚ss
 -> 
¥i‹ôy
 = 200;

271 
	`scheduÀ
();

273 
	}
}

275 
	$kî√l2_¥oc
(* 
aux
)

277 
cur_¥o˚ss
 -> 
¥i‹ôy
 = 200;

280 
	`scheduÀ
();

282 
	}
}

284 
	$ps_¥oc
(* 
aux
)

286 
i
;

287 
i
 = 0; i<
PROC_NUM_MAX
; i++)

289 
¥o˚ss
 *
p
 = &
¥ocs
[
i
];

291 if(
p
->
°©e
 =
PROC_UNUSED
)

294 
	`¥ötk
("pid %dÖpid ", 
p
->
pid
);

296 if(
p
->
∑ª¡
 !
NULL
)

297 
	`¥ötk
("%d", 
p
->
∑ª¡
->
pid
);

299 
	`¥ötk
("non");

301 
	`¥ötk
(" state %dÖrio %d usingÅime %d schedÅime %d\n",

302 
p
->
°©e
,Ö->
¥i‹ôy
,Ö->
time_u£d
,Ö->
time_sched
);

305 
	`exô
(1);

306 
	}
}

308 c⁄° * 
VERSION
;

309 c⁄° * 
AUTHOR
;

310 c⁄° * 
MODIFIER
;

311 
	$u«me_¥oc
(* 
aux
)

313 
	`¥ötk
("SSUOS %s\nmadêby %s\nmodefõd by %s\n", 
VERSION
, 
AUTHOR
, 
MODIFIER
);

315 
	}
}

317 
	$¥öt_pid
(* 
aux
) {

320 
	`¥ötk
("pid = %d ", 
cur_¥o˚ss
->
pid
);

321 
	`¥ötk
("¥iÿ%d ", 
cur_¥o˚ss
->
¥i‹ôy
);

322 
	`¥ötk
("timê%d ", 
cur_¥o˚ss
->
time_¶i˚
);

323 
	`¥ötk
("tick†%d ", 
	`gë_ticks
());

324 
	`¥ötk
("ö %s\n", 
aux
);

326 
	#SLEEP_FREQ
 100

	)

327 
	`¥oc_¶ìp
(
cur_¥o˚ss
->
pid
 * cur_¥o˚ss->pid * 
SLEEP_FREQ
);

329 
	}
}

331 
	$›í_¥oc
(*
aux
)

333 * 
«me
 = (*)
aux
;

334 
	`›í
(
«me
,0);

335 
	}
}

337 
	$wrôe_¥oc
(*
aux
)

339 *
«me
 = (*)
aux
;

340 
fd
;

341 
fd
 = 
	`›í
(
«me
,
O_WRONLY
);

342 
tmp
[8300];

343 
	`mem£t
(
tmp
, 'a', 8300);

344 
	`mem˝y
(
tmp
+8200, "Hello , ssuos world", 19);

345 *(
tmp
+8200+19) = 0;

346 
	`wrôe
(
fd
,
tmp
,8300);

347 
	}
}

349 
	$ls_¥oc
(*
aux
)

351 
	`li°_£gmít
(
cur_¥o˚ss
->
cwd
);

352 
	}
}

354 
	$ˇt_¥oc
(*
aux
)

365 
	}
}

370 * 
	mcmd
;

371 
	mty≥
;

372 * 
	mfunc
;

373 } 
	tCmdLi°
;

375 
	$shñl_¥oc
(* 
aux
)

378 
CmdLi°
 
cmdli°
[] = {

379 {"shutdown", 0, 
shutdown
}

382 ,{"wrôe", 1, 
wrôe_¥oc
}

383 ,{"ls", 1, 
ls_¥oc
}

384 ,{"touch",1,
›í_¥oc
}

385 ,{"ˇt",1,
ˇt_¥oc
}

387 
	#CMDNUM
 5

	)

388 
	#TOKNUM
 3

	)

389 
buf
[
BUFSIZ
];

390 
tokí
[
TOKNUM
][
BUFSIZ
];

391 
tokí_num
;

392 
dúíåy
 
cwde
;

393 
fd
;

396 
¥oc_func
 *
func
;

397 
i
,
j
, 
Àn
;

399 if(
cur_¥o˚ss
->
cwd
 =cur_¥o˚ss->
roŸdú
)

400 
	`¥ötk
("~");

402 
	`¥ötk
("%s", 
cwde
.
de_«me
);

404 
	`¥ötk
("> ");

406 
i
=0;i<
BUFSIZ
;i++)

408 
buf
[
i
] = 0;

409 
j
=0;j<
TOKNUM
;j++)

410 
tokí
[
j
][
i
] = 0;

413 
	`gëkbd
(
buf
,
BUFSIZ
))

418 
i
=0;
buf
[i] != '\n'; i++);

419 
i
--; 
buf
[i] == ' '; i--)

420 
buf
[
i
] = 0;

422 
tokí_num
 = 
	`gëTokí
(
buf
,
tokí
,
TOKNUM
);

425 if–
	`°rcmp
(
tokí
[0], "exit") == 0)

428 if–
	`°∫cmp
(
tokí
[0], "li°", 
BUFSIZ
) == 0)

430 
i
 = 0; i < 
CMDNUM
; i++)

431 
	`¥ötk
("%s\n", 
cmdli°
[
i
].
cmd
);

435 if–
	`°∫cmp
(
tokí
[0], "cd", 
BUFSIZ
) == 0)

437 if(
	`ch™ge_dú
(
cur_¥o˚ss
->
cwd
, 
tokí
[1]) == 0)

439 
	`gë_curde
(
cur_¥o˚ss
->
cwd
, &
cwde
);

444 
i
 = 0; i < 
CMDNUM
; i++)

446 if–
	`°∫cmp
(
cmdli°
[
i
].
cmd
, 
tokí
[0], 
BUFSIZ
) == 0)

450 if(
i
 =
CMDNUM
)

452 
	`¥ötk
("Unknow¿comm™d %s\n", 
buf
);

456 if(
cmdli°
[
i
].
ty≥
 == 0)

458 (*
func
)(*);

459 
func
 = 
cmdli°
[
i
].func;

460 
	`func
((*)0x9);

462 if(
cmdli°
[
i
].
ty≥
 == 1)

464 
cur_¥o˚ss
->
sim∂e_lock
 = 1;

465 
pid
 = 
	`f‹k
(
cmdli°
[
i
].
func
, 
tokí
[1]);

467 
cur_¥o˚ss
->
sim∂e_lock
)

472 
	`¥ötk
("UnknownÅype\n");

476 
	}
}

478 
	$logö_¥oc
(* 
aux
)

480 
i
,
fd
;

481 
id
[30];

482 
∑ssw‹d
[30];

483 
buf
[30];

484 
buf2
[] = "ssuos:oslab";

486 
cur_¥o˚ss
 -> 
¥i‹ôy
 = 100;

490 
i
=0;i<30;i++) {

491 
id
[
i
] = 0;

492 
∑ssw‹d
[
i
] = 0;

494 
	`¥ötk
("id : ");

495 
	`gëkbd
(
id
,
BUFSIZ
));

497 
	`¥ötk
("password : ");

498 
	`gëkbd
(
∑ssw‹d
,
BUFSIZ
));

500 if(
id
[6] !0 || 
	`°∫cmp
(id,
buf2
,5Ë!0Ë{
	`¥ötk
("%s\n",id); ;}

501 if(
∑ssw‹d
[6] !0 || 
	`°∫cmp
’assw‹d,
buf2
+6,5Ë!0Ë{
	`¥ötk
("%s\n",password); ;}

502 
	`shñl_¥oc
(
NULL
);

505 
	}
}

507 
	$idÀ
(* 
aux
)

509 
	`¥oc_¸óã
(
kî√l1_¥oc
, 
NULL
, NULL);

510 
	`¥oc_¸óã
(
kî√l2_¥oc
, 
NULL
, NULL);

511 
	`¥oc_¸óã
(
logö_¥oc
, 
NULL
, NULL );

514 if(
cur_¥o˚ss
->
pid
 != 0) {

515 
	`¥ötk
("îr‹ : idÀÖro˚ss'†pid !0\n", 
cur_¥o˚ss
->
pid
);

519  !
	`li°_em±y
(&
d_li°
) )

521 
li°_ñem
 *
e
 = 
	`li°_p›_‰⁄t
(&
d_li°
);

522 
¥o˚ss
 *
p
 = 
	`li°_íåy
(
e
, ¥o˚ss, 
ñem_°©
);

523 
p
->
°©e
 = 
PROC_UNUSED
;

524 
	`li°_ªmove
–&
p
->
ñem_Æl
);

527 
	`scheduÀ
();

529 
	}
}

531 
	$¥oc_¥öt_d©a
()

533 
a
, 
b
, 
c
, 
d
, 
bp
, 
si
, 
di
, 
•
;

536 
__asm__
 
	`__vﬁ©ûe
("mov %%óx ,%0": "=m"(
a
));

538 
__asm__
 
	`__vﬁ©ûe
("mov %ebx ,%eax");

539 
__asm__
 
	`__vﬁ©ûe
("mov %%óx ,%0": "=m"(
b
));

541 
__asm__
 
	`__vﬁ©ûe
("mov %ecx ,%eax");

542 
__asm__
 
	`__vﬁ©ûe
("mov %%óx ,%0": "=m"(
c
));

544 
__asm__
 
	`__vﬁ©ûe
("mov %edx ,%eax");

545 
__asm__
 
	`__vﬁ©ûe
("mov %%óx ,%0": "=m"(
d
));

548 
__asm__
 
	`__vﬁ©ûe
("mov %ebp ,%eax");

549 
__asm__
 
	`__vﬁ©ûe
("mov %%óx ,%0": "=m"(
bp
));

551 
__asm__
 
	`__vﬁ©ûe
("mov %esi ,%eax");

552 
__asm__
 
	`__vﬁ©ûe
("mov %%óx ,%0": "=m"(
si
));

554 
__asm__
 
	`__vﬁ©ûe
("mov %edi ,%eax");

555 
__asm__
 
	`__vﬁ©ûe
("mov %%óx ,%0": "=m"(
di
));

557 
__asm__
 
	`__vﬁ©ûe
("mov %esp ,%eax");

558 
__asm__
 
	`__vﬁ©ûe
("mov %%óx ,%0": "=m"(
•
));

560 
	`¥ötk
( "\neax %oÉbx %oÉcx %oÉdx %o"\

562 , 
a
, 
b
, 
c
, 
d
, 
bp
, 
si
, 
di
, 
•
);

563 
	}
}

565 
	$hexDump
 (*
addr
, 
Àn
) {

566 
i
;

567 
buff
[17];

568 *
pc
 = (*)
addr
;

570 i‡(
Àn
 == 0) {

571 
	`¥ötk
(" ZERO LENGTH\n");

574 i‡(
Àn
 < 0) {

575 
	`¥ötk
(" NEGATIVE LENGTH: %i\n",
Àn
);

580 
i
 = 0; i < 
Àn
; i++) {

583 i‡((
i
 % 16) == 0) {

585 i‡(
i
 != 0)

586 
	`¥ötk
 (" %s\n", 
buff
);

589 
	`¥ötk
 (" %04x ", 
i
);

593 
	`¥ötk
 (" %02x", 
pc
[
i
]);

596 i‡((
pc
[
i
] < 0x20) || (pc[i] > 0x7e))

597 
buff
[
i
 % 16] = '.';

599 
buff
[
i
 % 16] = 
pc
[i];

600 
buff
[(
i
 % 16) + 1] = '\0';

604 (
i
 % 16) != 0) {

605 
	`¥ötk
 (" ");

606 
i
++;

610 
	`¥ötk
 (" %s\n", 
buff
);

611 
	}
}

	@proc/sched.c

1 
	~<li°.h
>

2 
	~<¥oc/sched.h
>

3 
	~<mem/mÆloc.h
>

4 
	~<¥oc/¥oc.h
>

5 
	~<¥oc/swôch.h
>

7 
li°
 
r_li°
;

9 
boﬁ
 
m‹e_¥io
(c⁄° 
li°_ñem
 *
a
, c⁄° li°_ñem *
b
,*
aux
);

11 
¥o˚ss
* 
	$gë_√xt_¥oc
() {

13 
li°_ñem
 *
e
;

15 if(
cur_¥o˚ss
->
°©e
 =
PROC_RUN
)

17 
	`li°_ªmove
(&
cur_¥o˚ss
->
ñem_°©
);

18 
	`li°_push_back
(&
r_li°
, &
cur_¥o˚ss
->
ñem_°©
);

21 
e
 = 
	`li°_begö
 (&
r_li°
);É !
	`li°_íd
 (&r_list);

22 
e
 = 
	`li°_√xt
 (e))

24 
¥o˚ss
* 
p
 = 
	`li°_íåy
(
	`li°_‰⁄t
(&
r_li°
), ¥o˚ss, 
ñem_°©
);

25 if(
p
->
°©e
 =
PROC_RUN
)

26  
p
;

28  
cur_¥o˚ss
;

29 
	}
}

31 
	$scheduÀ
()

33 
¥o˚ss
 *
cur
;

34 
¥o˚ss
 *
√xt
;

36 
	`¥oc_wake
();

38 
√xt
 = 
	`gë_√xt_¥oc
();

39 
cur
 = 
cur_¥o˚ss
;

40 
cur_¥o˚ss
 = 
√xt
;

41 
cur_¥o˚ss
->
time_sched
++;

42 
cur_¥o˚ss
->
time_¶i˚
 = 0;

44 
	`swôch_¥o˚ss
(
cur
, 
√xt
);

45 
	}
}

	@ssulib.c

1 
	~<ssulib.h
>

2 
	~<devi˚/c⁄sﬁe.h
>

3 
	~<devi˚/io.h
>

4 
	~<sysˇŒ.h
>

5 
	~<fûesys/fûe.h
>

28 
	$°∫cmp
(* 
b1
, * 
b2
, 
Àn
)

30 
i
;

32 
i
 = 0; i < 
Àn
; i++)

34 
c
 = 
b1
[
i
] - 
b2
[i];

35 if(
c
)

36  
c
;

37 if(
b1
[
i
] == 0)

41 
	}
}

43 
boﬁ
 
	$gëkbd
(*
buf
, 
Àn
)

45 
ch
;

46 
off£t
 = 0;

48 
Àn
--;

50 ; 
off£t
 < 
Àn
 && 
buf
[offset] != 0; offset++)

51 if(
buf
[
off£t
] == '\n')

53 ;
off£t
>=0;offset--)

54 
buf
[
off£t
] = 0;

55 
off£t
++;

59  (
ch
 = 
	`ssuªad
()) >= 0)

61 if(
ch
 ='\b' && 
off£t
 == 0)

63 
	`£t_curs‹
();

66 
	`¥ötk
("%c",
ch
);

67 
	`£t_curs‹
();

68 i‡(
ch
 == '\b')

70 
buf
[
off£t
-1] = 0;

71 
off£t
--;

73 i‡(
ch
 == '\n')

75 
buf
[
off£t
] = 
ch
;

76  
FALSE
;

80 
buf
[
off£t
] = 
ch
;

81 
off£t
++;

83 if(
off£t
 =
Àn
) offset--;

114  
TRUE
;

115 
	}
}

118 
	$gëTokí
(* 
buf
, 
tokí
[][
BUFSIZ
], 
max_tok
)

120 
num_tok
 = 0;

121 
off_tok
 = 0;

122 
num_tok
 < 
max_tok
 && *
buf
 != '\n')

124 if(*
buf
 == ' ')

126 
tokí
[
num_tok
][
off_tok
] = 0;

127 *
buf
 == ' ') buf++;

128 
off_tok
 = 0;

129 
num_tok
++;

133 
tokí
[
num_tok
][
off_tok
] = *
buf
;

134 
off_tok
++;

135 
buf
++;

138 
tokí
[
num_tok
][
off_tok
] = 0;

139 
num_tok
++;

142  
num_tok
;

143 
	}
}

145 
	$gíîic_ªad
(
fd
, *
buf
, 
size_t
 
Àn
)

147 
ssufûe
 *
curs‹
;

148 
uöt16_t
 *
pos
 = &(
cur_¥o˚ss
->
fûe
[
fd
]->pos);

150 if–(
curs‹
 = 
cur_¥o˚ss
->
fûe
[
fd
]Ë=
NULL
)

153 i‡(~
curs‹
->
Êags
 & 
O_RDONLY
)

156 i‡(*
pos
 + 
Àn
 > 
curs‹
->
öode
->
¢_size
)

157 
Àn
 = 
curs‹
->
öode
->
¢_size
 - *
pos
;

159 
	`fûe_ªad
(
cur_¥o˚ss
->
fûe
[
fd
]->
öode
,*
pos
,
buf
,
Àn
);

160 *
pos
 +
Àn
;

161  
Àn
;

162 
	}
}

164 
	$gíîic_wrôe
(
fd
, *
buf
, 
size_t
 
Àn
)

166 
ssufûe
 *
curs‹
;

167 
uöt16_t
 *
pos
 = &(
cur_¥o˚ss
->
fûe
[
fd
]->pos);

169 if–(
curs‹
 = 
cur_¥o˚ss
->
fûe
[
fd
]Ë=
NULL
)

172 i‡(~
curs‹
->
Êags
 & 
O_WRONLY
)

175 
	`fûe_wrôe
(
cur_¥o˚ss
->
fûe
[
fd
]->
öode
,*
pos
,
buf
,
Àn
);

176 *
pos
 +
Àn
;

177  
Àn
;

178 
	}
}

	@stdio.c

1 
	~<°dio.h
>

2 
	~<˘y≥.h
>

3 
	~<öây≥s.h
>

4 
	~<round.h
>

5 
	~<°döt.h
>

6 
	~<°rög.h
>

9 
	sv¢¥ötf_aux


11 *
	mp
;

12 
	mÀngth
;

13 
	mmax_Àngth
;

16 
v¢¥ötf_hñ≥r
 (, *);

26 
	$v¢¥ötf
 (*
buf„r
, 
size_t
 
buf_size
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

29 
v¢¥ötf_aux
 
aux
;

30 
aux
.
p
 = 
buf„r
;

31 
aux
.
Àngth
 = 0;

32 
aux
.
max_Àngth
 = 
buf_size
 > 0 ? buf_size - 1 : 0;

35 
	`__v¥ötf
 (
f‹m©
, 
¨gs
, 
v¢¥ötf_hñ≥r
, &
aux
);

38 i‡(
buf_size
 > 0)

39 *
aux
.
p
 = '\0';

41  
aux
.
Àngth
;

42 
	}
}

46 
	$v¢¥ötf_hñ≥r
 (
ch
, *
aux_
)

48 
v¢¥ötf_aux
 *
aux
 = 
aux_
;

50 i‡(
aux
->
Àngth
++ <áux->
max_Àngth
)

51 *
aux
->
p
++ = 
ch
;

52 
	}
}

62 
	$¢¥ötf
 (*
buf„r
, 
size_t
 
buf_size
, c⁄° *
f‹m©
, ...)

64 
va_li°
 
¨gs
;

65 
ªtvÆ
;

67 
	`va_°¨t
 (
¨gs
, 
f‹m©
);

68 
ªtvÆ
 = 
	`v¢¥ötf
 (
buf„r
, 
buf_size
, 
f‹m©
, 
¨gs
);

69 
	`va_íd
 (
¨gs
);

71  
ªtvÆ
;

72 
	}
}

79 
	$¥ötf
 (c⁄° *
f‹m©
, ...)

82 
ªtvÆ
;

88  
ªtvÆ
;

89 
	}
}

94 
	s¥ötf_c⁄vîsi⁄


99 
	mMINUS
 = 1 << 0,

100 
	mPLUS
 = 1 << 1,

101 
	mSPACE
 = 1 << 2,

102 
	mPOUND
 = 1 << 3,

103 
	mZERO
 = 1 << 4,

104 
	mGROUP
 = 1 << 5

106 
	mÊags
;

109 
	mwidth
;

113 
	m¥ecisi⁄
;

118 
	mCHAR
 = 1,

119 
	mSHORT
 = 2,

120 
	mINT
 = 3,

121 
	mINTMAX
 = 4,

122 
	mLONG
 = 5,

123 
	mLONGLONG
 = 6,

124 
	mPTRDIFFT
 = 7,

125 
	mSIZET
 = 8

127 
	mty≥
;

130 
	söãgî_ba£


132 
	mba£
;

133 c⁄° *
	mdigôs
;

134 
	mx
;

135 
	mgroup
;

138 c⁄° 
öãgî_ba£
 
	gba£_d
 = {10, "0123456789", 0, 3};

139 c⁄° 
öãgî_ba£
 
	gba£_o
 = {8, "01234567", 0, 3};

140 c⁄° 
öãgî_ba£
 
	gba£_x
 = {16, "0123456789abcdef", 'x', 4};

141 c⁄° 
öãgî_ba£
 
	gba£_X
 = {16, "0123456789ABCDEF", 'X', 4};

143 c⁄° *
∑r£_c⁄vîsi⁄
 (c⁄° *
f‹m©
,

144 
¥ötf_c⁄vîsi⁄
 *,

145 
va_li°
 *);

146 
f‹m©_öãgî
 (
vÆue
, 
boﬁ
 
is_sig√d
, boﬁ 
√g©ive
,

147 c⁄° 
öãgî_ba£
 *,

148 c⁄° 
¥ötf_c⁄vîsi⁄
 *,

149 (*
ouçut
Ë(, *), *
aux
);

150 
	`ouçut_dup
 (
ch
, 
size_t
 
˙t
,

151 (*
ouçut
Ë(, *), *
aux
);

152 
	`f‹m©_°rög
 (c⁄° *
°rög
, 
Àngth
,

153 
¥ötf_c⁄vîsi⁄
 *,

154 (*
ouçut
Ë(, *), *
aux
);

157 
	$__v¥ötf
 (c⁄° *
f‹m©
, 
va_li°
 
¨gs
,

158 (*
ouçut
Ë(, *), *
aux
)

160 ; *
f‹m©
 != '\0'; format++)

162 
¥ötf_c⁄vîsi⁄
 
c
;

165 i‡(*
f‹m©
 != '%')

167 
	`ouçut
 (*
f‹m©
, 
aux
);

170 
f‹m©
++;

173 i‡(*
f‹m©
 == '%')

175 
	`ouçut
 ('%', 
aux
);

180 
f‹m©
 = 
	`∑r£_c⁄vîsi⁄
 (f‹m©, &
c
, &
¨gs
);

183 *
f‹m©
)

189 
ötmax_t
 
vÆue
;

191 
c
.
ty≥
)

193 
CHAR
:

194 
vÆue
 = (sig√d Ë
	`va_¨g
 (
¨gs
, );

196 
SHORT
:

197 
vÆue
 = (Ë
	`va_¨g
 (
¨gs
, );

199 
INT
:

200 
vÆue
 = 
	`va_¨g
 (
¨gs
, );

202 
INTMAX
:

203 
vÆue
 = 
	`va_¨g
 (
¨gs
, 
ötmax_t
);

205 
LONG
:

206 
vÆue
 = 
	`va_¨g
 (
¨gs
, );

208 
LONGLONG
:

209 
vÆue
 = 
	`va_¨g
 (
¨gs
, );

211 
PTRDIFFT
:

212 
vÆue
 = 
	`va_¨g
 (
¨gs
, 
±rdiff_t
);

214 
SIZET
:

215 
vÆue
 = 
	`va_¨g
 (
¨gs
, 
size_t
);

216 i‡(
vÆue
 > 
SIZE_MAX
 / 2)

217 
vÆue
 = vÆuê- 
SIZE_MAX
 - 1;

223 
	`f‹m©_öãgî
 (
vÆue
 < 0 ? -value : value,

224 
åue
, 
vÆue
 < 0, &
ba£_d
, &
c
, 
ouçut
, 
aux
);

234 
uötmax_t
 
vÆue
;

235 c⁄° 
öãgî_ba£
 *
b
;

237 
c
.
ty≥
)

239 
CHAR
:

240 
vÆue
 = (Ë
	`va_¨g
 (
¨gs
, );

242 
SHORT
:

243 
vÆue
 = (Ë
	`va_¨g
 (
¨gs
, );

245 
INT
:

246 
vÆue
 = 
	`va_¨g
 (
¨gs
, );

248 
INTMAX
:

249 
vÆue
 = 
	`va_¨g
 (
¨gs
, 
uötmax_t
);

251 
LONG
:

252 
vÆue
 = 
	`va_¨g
 (
¨gs
, );

254 
LONGLONG
:

255 
vÆue
 = 
	`va_¨g
 (
¨gs
, );

257 
PTRDIFFT
:

258 
vÆue
 = 
	`va_¨g
 (
¨gs
, 
±rdiff_t
);

259 #i‡
UINTMAX_MAX
 !
PTRDIFF_MAX


260 
vÆue
 &((
uötmax_t
Ë
PTRDIFF_MAX
 << 1) | 1;

263 
SIZET
:

264 
vÆue
 = 
	`va_¨g
 (
¨gs
, 
size_t
);

270 *
f‹m©
)

272 'o': 
b
 = &
ba£_o
; ;

273 'u': 
b
 = &
ba£_d
; ;

274 'x': 
b
 = &
ba£_x
; ;

275 'X': 
b
 = &
ba£_X
; ;

280 
	`f‹m©_öãgî
 (
vÆue
, 
Ál£
, fÆ£, 
b
, &
c
, 
ouçut
, 
aux
);

287 
ch
 = 
	`va_¨g
 (
¨gs
, );

288 
	`f‹m©_°rög
 (&
ch
, 1, &
c
, 
ouçut
, 
aux
);

295 c⁄° *
s
 = 
	`va_¨g
 (
¨gs
, *);

296 i‡(
s
 =
NULL
)

297 
s
 = "(null)";

302 
	`f‹m©_°rög
 (
s
, 
	`°∫Àn
 (s, 
c
.
¥ecisi⁄
), &c, 
ouçut
, 
aux
);

310 *
p
 = 
	`va_¨g
 (
¨gs
, *);

312 
c
.
Êags
 = 
POUND
;

313 
	`f‹m©_öãgî
 ((
uöçå_t
Ë
p
, 
Ál£
, false,

314 &
ba£_x
, &
c
, 
ouçut
, 
aux
);

326 
	`__¥ötf
 ("<<nÿ%%%¯ö kî√l>>", 
ouçut
, 
aux
, *
f‹m©
);

330 
	`__¥ötf
 ("<<nÿ%%%¯c⁄vîsi⁄>>", 
ouçut
, 
aux
, *
f‹m©
);

334 
	}
}

341 
	$∑r£_c⁄vîsi⁄
 (c⁄° *
f‹m©
, 
¥ötf_c⁄vîsi⁄
 *
c
,

342 
va_li°
 *
¨gs
)

345 
c
->
Êags
 = 0;

348 *
f‹m©
++)

351 
c
->
Êags
 |
MINUS
;

354 
c
->
Êags
 |
PLUS
;

357 
c
->
Êags
 |
SPACE
;

360 
c
->
Êags
 |
POUND
;

363 
c
->
Êags
 |
ZERO
;

366 
c
->
Êags
 |
GROUP
;

369 
f‹m©
--;

370 
nŸ_a_Êag
;

373 
nŸ_a_Êag
:

374 i‡(
c
->
Êags
 & 
MINUS
)

375 
c
->
Êags
 &~
ZERO
;

376 i‡(
c
->
Êags
 & 
PLUS
)

377 
c
->
Êags
 &~
SPACE
;

380 
c
->
width
 = 0;

381 i‡(*
f‹m©
 == '*')

383 
f‹m©
++;

384 
c
->
width
 = 
	`va_¨g
 (*
¨gs
, );

388 ; 
	`isdigô
 (*
f‹m©
); format++)

389 
c
->
width
 = c->width * 10 + *
f‹m©
 - '0';

391 i‡(
c
->
width
 < 0)

393 
c
->
width
 = -c->width;

394 
c
->
Êags
 |
MINUS
;

398 
c
->
¥ecisi⁄
 = -1;

399 i‡(*
f‹m©
 == '.')

401 
f‹m©
++;

402 i‡(*
f‹m©
 == '*')

404 
f‹m©
++;

405 
c
->
¥ecisi⁄
 = 
	`va_¨g
 (*
¨gs
, );

409 
c
->
¥ecisi⁄
 = 0;

410 ; 
	`isdigô
 (*
f‹m©
); format++)

411 
c
->
¥ecisi⁄
 = c->¥ecisi⁄ * 10 + *
f‹m©
 - '0';

413 i‡(
c
->
¥ecisi⁄
 < 0)

414 
c
->
¥ecisi⁄
 = -1;

416 i‡(
c
->
¥ecisi⁄
 >= 0)

417 
c
->
Êags
 &~
ZERO
;

420 
c
->
ty≥
 = 
INT
;

421 *
f‹m©
++)

424 i‡(*
f‹m©
 == 'h')

426 
f‹m©
++;

427 
c
->
ty≥
 = 
CHAR
;

430 
c
->
ty≥
 = 
SHORT
;

434 
c
->
ty≥
 = 
INTMAX
;

438 i‡(*
f‹m©
 == 'l')

440 
f‹m©
++;

441 
c
->
ty≥
 = 
LONGLONG
;

444 
c
->
ty≥
 = 
LONG
;

448 
c
->
ty≥
 = 
PTRDIFFT
;

452 
c
->
ty≥
 = 
SIZET
;

456 
f‹m©
--;

460  
f‹m©
;

461 
	}
}

471 
	$f‹m©_öãgî
 (
vÆue
, 
boﬁ
 
is_sig√d
, boﬁ 
√g©ive
,

472 c⁄° 
öãgî_ba£
 *
b
,

473 c⁄° 
¥ötf_c⁄vîsi⁄
 *
c
,

474 (*
ouçut
Ë(, *), *
aux
)

476 
buf
[64], *
˝
;

477 
x
;

478 
sign
;

479 
¥ecisi⁄
;

480 
∑d_˙t
;

481 
digô_˙t
;

486 
sign
 = 0;

487 i‡(
is_sig√d
)

489 i‡(
c
->
Êags
 & 
PLUS
)

490 
sign
 = 
√g©ive
 ? '-' : '+';

491 i‡(
c
->
Êags
 & 
SPACE
)

492 
sign
 = 
√g©ive
 ? '-' : ' ';

493 i‡(
√g©ive
)

494 
sign
 = '-';

500 
x
 = (
c
->
Êags
 & 
POUND
Ë&& 
vÆue
 ? 
b
->x : 0;

505 
˝
 = 
buf
;

506 
digô_˙t
 = 0;

507 
vÆue
 > 0)

509 i‡((
c
->
Êags
 & 
GROUP
Ë&& 
digô_˙t
 > 0 && digô_˙à% 
b
->
group
 == 0)

510 *
˝
++ = ',';

511 *
˝
++ = 
b
->
digôs
[
vÆue
 % b->
ba£
];

512 
vÆue
 /
b
->
ba£
;

513 
digô_˙t
++;

521 
¥ecisi⁄
 = 
c
->precision < 0 ? 1 : c->precision;

522 
˝
 - 
buf
 < 
¥ecisi⁄
 && cp < buf +  buf - 1)

523 *
˝
++ = '0';

524 i‡((
c
->
Êags
 & 
POUND
Ë&& 
b
->
ba£
 =8 && (
˝
 =
buf
 || cp[-1] != '0'))

525 *
˝
++ = '0';

528 
∑d_˙t
 = 
c
->
width
 - (
˝
 - 
buf
Ë- (
x
 ? 2 : 0Ë- (
sign
 != 0);

529 i‡(
∑d_˙t
 < 0)

530 
∑d_˙t
 = 0;

533 i‡((
c
->
Êags
 & (
MINUS
 | 
ZERO
)) == 0)

534 
	`ouçut_dup
 (' ', 
∑d_˙t
, 
ouçut
, 
aux
);

535 i‡(
sign
)

536 
	`ouçut
 (
sign
, 
aux
);

537 i‡(
x
)

539 
	`ouçut
 ('0', 
aux
);

540 
	`ouçut
 (
x
, 
aux
);

542 i‡(
c
->
Êags
 & 
ZERO
)

543 
	`ouçut_dup
 ('0', 
∑d_˙t
, 
ouçut
, 
aux
);

544 
˝
 > 
buf
)

545 
	`ouçut
 (*--
˝
, 
aux
);

546 i‡(
c
->
Êags
 & 
MINUS
)

547 
	`ouçut_dup
 (' ', 
∑d_˙t
, 
ouçut
, 
aux
);

548 
	}
}

552 
	$ouçut_dup
 (
ch
, 
size_t
 
˙t
, (*
ouçut
Ë(, *), *
aux
)

554 
˙t
-- > 0)

555 
	`ouçut
 (
ch
, 
aux
);

556 
	}
}

562 
	$f‹m©_°rög
 (c⁄° *
°rög
, 
Àngth
,

563 
¥ötf_c⁄vîsi⁄
 *
c
,

564 (*
ouçut
Ë(, *), *
aux
)

566 
i
;

567 i‡(
c
->
width
 > 
Àngth
 && (c->
Êags
 & 
MINUS
) == 0)

568 
	`ouçut_dup
 (' ', 
c
->
width
 - 
Àngth
, 
ouçut
, 
aux
);

569 
i
 = 0; i < 
Àngth
; i++)

570 
	`ouçut
 (
°rög
[
i
], 
aux
);

571 i‡(
c
->
width
 > 
Àngth
 && (c->
Êags
 & 
MINUS
) != 0)

572 
	`ouçut_dup
 (' ', 
c
->
width
 - 
Àngth
, 
ouçut
, 
aux
);

573 
	}
}

578 
	$__¥ötf
 (c⁄° *
f‹m©
,

579 (*
ouçut
Ë(, *), *
aux
, ...)

581 
va_li°
 
¨gs
;

583 
	`va_°¨t
 (
¨gs
, 
aux
);

584 
	`__v¥ötf
 (
f‹m©
, 
¨gs
, 
ouçut
, 
aux
);

585 
	`va_íd
 (
¨gs
);

586 
	}
}

594 
	$hex_dump
 (
uöçå_t
 
ofs
, c⁄° *
buf_
, 
size_t
 
size
, 
boﬁ
 
ascii
)

596 c⁄° 
uöt8_t
 *
buf
 = 
buf_
;

597 c⁄° 
size_t
 
≥r_löe
 = 16;

599 
size
 > 0)

601 
size_t
 
°¨t
, 
íd
, 
n
;

602 
size_t
 
i
;

605 
°¨t
 = 
ofs
 % 
≥r_löe
;

606 
íd
 = 
≥r_löe
;

607 i‡(
íd
 - 
°¨t
 > 
size
)

608 
íd
 = 
°¨t
 + 
size
;

609 
n
 = 
íd
 - 
°¨t
;

612 
	`¥ötf
 ("%08jx ", (
uötmax_t
Ë
	`ROUND_DOWN
 (
ofs
, 
≥r_löe
));

613 
i
 = 0; i < 
°¨t
; i++)

614 
	`¥ötf
 (" ");

615 ; 
i
 < 
íd
; i++)

616 
	`¥ötf
 ("%02hhx%c",

617 
buf
[
i
 - 
°¨t
], i =
≥r_löe
 / 2 - 1? '-' : ' ');

618 i‡(
ascii
)

620 ; 
i
 < 
≥r_löe
; i++)

621 
	`¥ötf
 (" ");

622 
	`¥ötf
 ("|");

623 
i
 = 0; i < 
°¨t
; i++)

624 
	`¥ötf
 (" ");

625 ; 
i
 < 
íd
; i++)

626 
	`¥ötf
 ("%c",

627 
	`i•röt
 (
buf
[
i
 - 
°¨t
]) ? buf[i - start] : '.');

628 ; 
i
 < 
≥r_löe
; i++)

629 
	`¥ötf
 (" ");

630 
	`¥ötf
 ("|");

632 
	`¥ötf
 ("\n");

634 
ofs
 +
n
;

635 
buf
 +
n
;

636 
size
 -
n
;

638 
	}
}

643 
	$¥öt_hum™_ªadabÀ_size
 (
uöt64_t
 
size
)

645 i‡(
size
 == 1)

646 
	`¥ötf
 ("1 byte");

649 c⁄° *
Á˘‹s
[] = {"byãs", "kB", "MB", "GB", "TB", 
NULL
};

650 c⁄° **
Â
;

652 
Â
 = 
Á˘‹s
; 
size
 >1024 && fp[1] !
NULL
; fp++)

653 
size
 /= 1024;

654 
	`¥ötf
 ("%"
PRIu64
" %s", 
size
, *
Â
);

656 
	}
}

	@string.c

1 
	~<°rög.h
>

2 
	~<°d¨g.h
>

3 
	~<debug.h
>

4 
	~<ty≥.h
>

8 
	$mem˝y
 (*
d°_
, c⁄° *
§c_
, 
size_t
 
size
)

10 *
d°
 = 
d°_
;

11 c⁄° *
§c
 = 
§c_
;

16 
size
-- > 0)

17 *
d°
++ = *
§c
++;

19  
d°_
;

20 
	}
}

25 
	$memmove
 (*
d°_
, c⁄° *
§c_
, 
size_t
 
size
)

27 *
d°
 = 
d°_
;

28 c⁄° *
§c
 = 
§c_
;

33 i‡(
d°
 < 
§c
)

35 
size
-- > 0)

36 *
d°
++ = *
§c
++;

40 
d°
 +
size
;

41 
§c
 +
size
;

42 
size
-- > 0)

43 *--
d°
 = *--
§c
;

46  
d°
;

47 
	}
}

54 
	$memcmp
 (c⁄° *
a_
, c⁄° *
b_
, 
size_t
 
size
)

56 c⁄° *
a
 = 
a_
;

57 c⁄° *
b
 = 
b_
;

62 ; 
size
-- > 0; 
a
++, 
b
++)

63 i‡(*
a
 !*
b
)

64  *
a
 > *
b
 ? +1 : -1;

66 
	}
}

74 
	$°rcmp
 (c⁄° *
a_
, c⁄° *
b_
)

76 c⁄° *
a
 = (c⁄° *Ë
a_
;

77 c⁄° *
b
 = (c⁄° *Ë
b_
;

82 *
a
 !'\0' && *®=*
b
)

84 
a
++;

85 
b
++;

88  *
a
 < *
b
 ? -1 : *a > *b;

89 
	}
}

95 
	$memchr
 (c⁄° *
block_
, 
ch_
, 
size_t
 
size
)

97 c⁄° *
block
 = 
block_
;

98 
ch
 = 
ch_
;

102 ; 
size
-- > 0; 
block
++)

103 i‡(*
block
 =
ch
)

104  (*Ë
block
;

106  
NULL
;

107 
	}
}

114 
	$°rchr
 (c⁄° *
°rög
, 
c_
)

116 
c
 = 
c_
;

121 i‡(*
°rög
 =
c
)

122  (*Ë
°rög
;

123 i‡(*
°rög
 == '\0')

124  
NULL
;

126 
°rög
++;

127 
	}
}

131 
size_t


132 
	$°rc•n
 (c⁄° *
°rög
, c⁄° *
°›
)

134 
size_t
 
Àngth
;

136 
Àngth
 = 0; 
°rög
[length] != '\0';Üength++)

137 i‡(
	`°rchr
 (
°›
, 
°rög
[
Àngth
]Ë!
NULL
)

139  
Àngth
;

140 
	}
}

146 
	$°Ωbrk
 (c⁄° *
°rög
, c⁄° *
°›
)

148 ; *
°rög
 != '\0'; string++)

149 i‡(
	`°rchr
 (
°›
, *
°rög
Ë!
NULL
)

150  (*Ë
°rög
;

151  
NULL
;

152 
	}
}

157 
	$°ºchr
 (c⁄° *
°rög
, 
c_
)

159 
c
 = 
c_
;

160 c⁄° *
p
 = 
NULL
;

162 ; *
°rög
 != '\0'; string++)

163 i‡(*
°rög
 =
c
)

164 
p
 = 
°rög
;

165  (*Ë
p
;

166 
	}
}

170 
size_t


171 
	$°r•n
 (c⁄° *
°rög
, c⁄° *
skù
)

173 
size_t
 
Àngth
;

175 
Àngth
 = 0; 
°rög
[length] != '\0';Üength++)

176 i‡(
	`°rchr
 (
skù
, 
°rög
[
Àngth
]Ë=
NULL
)

178  
Àngth
;

179 
	}
}

185 
	$°r°r
 (c⁄° *
hay°ack
, c⁄° *
√edÀ
)

187 
size_t
 
hay°ack_Àn
 = 
	`°æí
 (
hay°ack
);

188 
size_t
 
√edÀ_Àn
 = 
	`°æí
 (
√edÀ
);

190 i‡(
hay°ack_Àn
 >
√edÀ_Àn
)

192 
size_t
 
i
;

194 
i
 = 0; i <
hay°ack_Àn
 - 
√edÀ_Àn
; i++)

195 i‡(!
	`memcmp
 (
hay°ack
 + 
i
, 
√edÀ
, 
√edÀ_Àn
))

196  (*Ë
hay°ack
 + 
i
;

199  
NULL
;

200 
	}
}

236 
	$°πok_r
 (*
s
, c⁄° *
dñimôîs
, **
ßve_±r
)

238 *
tokí
;

245 i‡(
s
 =
NULL
)

246 
s
 = *
ßve_±r
;

250 
	`°rchr
 (
dñimôîs
, *
s
Ë!
NULL
)

255 i‡(*
s
 == '\0')

257 *
ßve_±r
 = 
s
;

258  
NULL
;

261 
s
++;

265 
tokí
 = 
s
;

266 
	`°rchr
 (
dñimôîs
, *
s
Ë=
NULL
)

267 
s
++;

268 i‡(*
s
 != '\0')

270 *
s
 = '\0';

271 *
ßve_±r
 = 
s
 + 1;

274 *
ßve_±r
 = 
s
;

275  
tokí
;

276 
	}
}

280 
	$mem£t
 (*
d°_
, 
vÆue
, 
size_t
 
size
)

282 *
d°
 = 
d°_
;

286 
size
-- > 0)

287 *
d°
++ = 
vÆue
;

289  
d°_
;

290 
	}
}

307 
size_t


308 
	$°∫Àn
 (c⁄° *
°rög
, 
size_t
 
maxÀn
)

310 
size_t
 
Àngth
;

312 
Àngth
 = 0; 
°rög
[Àngth] !'\0' &&Üígth < 
maxÀn
;Üength++)

314  
Àngth
;

315 
	}
}

326 
size_t


327 
	$°æ˝y
 (*
d°
, c⁄° *
§c
, 
size_t
 
size
)

329 
size_t
 
§c_Àn
;

334 
§c_Àn
 = 
	`°æí
 (
§c
);

335 i‡(
size
 > 0)

337 
size_t
 
d°_Àn
 = 
size
 - 1;

338 i‡(
§c_Àn
 < 
d°_Àn
)

339 
d°_Àn
 = 
§c_Àn
;

340 
	`mem˝y
 (
d°
, 
§c
, 
d°_Àn
);

341 
d°
[
d°_Àn
] = '\0';

343  
§c_Àn
;

344 
	}
}

356 
size_t


357 
	$°æˇt
 (*
d°
, c⁄° *
§c
, 
size_t
 
size
)

359 
size_t
 
§c_Àn
, 
d°_Àn
;

364 
§c_Àn
 = 
	`°æí
 (
§c
);

365 
d°_Àn
 = 
	`°æí
 (
d°
);

366 i‡(
size
 > 0 && 
d°_Àn
 < size)

368 
size_t
 
c›y_˙t
 = 
size
 - 
d°_Àn
 - 1;

369 i‡(
§c_Àn
 < 
c›y_˙t
)

370 
c›y_˙t
 = 
§c_Àn
;

371 
	`mem˝y
 (
d°
 + 
d°_Àn
, 
§c
, 
c›y_˙t
);

372 
d°
[
d°_Àn
 + 
c›y_˙t
] = '\0';

374  
§c_Àn
 + 
d°_Àn
;

375 
	}
}

	@synch.c

1 
	~<synch.h
>

2 
	~<öãºu±.h
>

3 
	~<¥oc/¥oc.h
>

4 
	~<devi˚/c⁄sﬁe.h
>

6 #i‚de‡
ASSERT


7 
	#ASSERT
(
COND
Ë;

	)

21 
	$£ma_öô
(
£m≠h‹e
 *
£ma
, 
vÆue
)

23 
	`ASSERT
 (
£ma
 !
NULL
);

25 
£ma
->
vÆue
 = value;

26 
	`li°_öô
(&
£ma
->
waôîs
);

27 
	}
}

38 
	$£ma_down
 (
£m≠h‹e
 *
£ma
)

40 
öå_Àvñ
 
ﬁd_Àvñ
;

42 
	`ASSERT
 (
£ma
 !
NULL
);

43 
	`ASSERT
 (!
	`öå_c⁄ãxt
 ());

45 
ﬁd_Àvñ
 = 
	`öå_dißbÀ
 ();

46 
£ma
->
vÆue
 == 0)

49 
	`li°_push_back
 (&
£ma
->
waôîs
, &
cur_¥o˚ss
->
ñem_°©
);

50 
	`¥oc_block
 ();

52 
£ma
->
vÆue
--;

53 
	`öå_£t_Àvñ
 (
ﬁd_Àvñ
);

54 
	}
}

61 
boﬁ


62 
	$£ma_åy_down
 (
£m≠h‹e
 *
£ma
)

64 
öå_Àvñ
 
ﬁd_Àvñ
;

66 
boﬁ
 
suc˚ss
;

68 
	`ASSERT
 (
£ma
 !
NULL
);

70 
ﬁd_Àvñ
 = 
	`öå_dißbÀ
 ();

71 i‡(
£ma
->
vÆue
 > 0)

73 
£ma
->
vÆue
--;

74 
suc˚ss
 = 
åue
;

77 
suc˚ss
 = 
Ál£
;

78 
	`öå_£t_Àvñ
 (
ﬁd_Àvñ
);

80  
suc˚ss
;

81 
	}
}

88 
	$£ma_up
 (
£m≠h‹e
 *
£ma
)

90 
öå_Àvñ
 
ﬁd_Àvñ
;

92 
	`ASSERT
 (
£ma
 !
NULL
);

94 
ﬁd_Àvñ
 = 
	`öå_dißbÀ
 ();

95 i‡(!
	`li°_em±y
 (&
£ma
->
waôîs
))

96 
	`¥oc_unblock
 (
	`li°_íåy
 (
	`li°_p›_‰⁄t
 (&
£ma
->
waôîs
),

97 
¥o˚ss
, 
ñem_°©
));

98 
£ma
->
vÆue
++;

99 
	`öå_£t_Àvñ
 (
ﬁd_Àvñ
);

100 
	}
}

101 
£ma_ã°_hñ≥r
 (*
£ma_
);

107 
	$£ma_£lf_ã°
 ()

109 
£m≠h‹e
 
£ma
[2];

110 
i
;

112 
	`¥ötk
 ("Testing semaphores...");

113 
	`£ma_öô
 (&
£ma
[0], 0);

114 
	`£ma_öô
 (&
£ma
[1], 0);

115 
	`¥oc_¸óã
 (
£ma_ã°_hñ≥r
, 
NULL
, &
£ma
);

116 
i
 = 0; i < 10; i++)

118 
	`£ma_up
 (&
£ma
[0]);

119 
	`£ma_down
 (&
£ma
[1]);

121 
	`¥ötk
 ("done.\n");

122 
	}
}

126 
	$£ma_ã°_hñ≥r
 (*
£ma_
)

128 
£m≠h‹e
 *
£ma
 = 
£ma_
;

129 
i
;

130 
cur_¥o˚ss
 -> 
¥i‹ôy
 = 100;

132 
i
 = 0; i < 10; i++)

134 
	`£ma_down
 (&
£ma
[0]);

135 
	`£ma_up
 (&
£ma
[1]);

137 
	}
}

156 
	$lock_öô
 (
lock
 *lock)

158 
	`ASSERT
 (
lock
 !
NULL
);

160 
lock
->
hﬁdî
 = 
NULL
;

161 
	`£ma_öô
 (&
lock
->
£m≠h‹e
, 1);

162 
	}
}

173 
	$lock_acquúe
 (
lock
 *lock)

175 
	`ASSERT
 (
lock
 !
NULL
);

176 
	`ASSERT
 (!
	`öå_c⁄ãxt
 ());

177 
	`ASSERT
 (!
	`lock_hñd_by_cuºít_thªad
 (
lock
));

179 
	`£ma_down
 (&
lock
->
£m≠h‹e
);

180 
lock
->
hﬁdî
 = 
cur_¥o˚ss
;

181 
	}
}

189 
boﬁ


190 
	$lock_åy_acquúe
 (
lock
 *lock)

192 
boﬁ
 
suc˚ss
;

194 
	`ASSERT
 (
lock
 !
NULL
);

195 
	`ASSERT
 (!
	`lock_hñd_by_cuºít_thªad
 (
lock
));

197 
suc˚ss
 = 
	`£ma_åy_down
 (&
lock
->
£m≠h‹e
);

198 i‡(
suc˚ss
)

199 
lock
->
hﬁdî
 = 
cur_¥o˚ss
;

200  
suc˚ss
;

201 
	}
}

209 
	$lock_ªÀa£
 (
lock
 *lock)

211 
	`ASSERT
 (
lock
 !
NULL
);

212 
	`ASSERT
 (
	`lock_hñd_by_cuºít_thªad
 (
lock
));

214 
lock
->
hﬁdî
 = 
NULL
;

215 
	`£ma_up
 (&
lock
->
£m≠h‹e
);

216 
	}
}

221 
boﬁ


222 
	$lock_hñd_by_cuºít_thªad
 (c⁄° 
lock
 *lock)

224 
	`ASSERT
 (
lock
 !
NULL
);

226  
lock
->
hﬁdî
 =
cur_¥o˚ss
;

227 
	}
}

	@vsprintk.c

1 
	~<°d¨g.h
>

3 
	#ZEROPAD
 1

	)

4 
	#SIGN
 2

	)

5 
	#PLUS
 4

	)

6 
	#SPACE
 8

	)

7 
	#LEFT
 16

	)

8 
	#SPECIAL
 32

	)

9 
	#SMALL
 64

	)

11 
	#is_digô
(
c
Ë–(cË> '0' && (cË< '9' )

	)

13 
	#do_div
(
n
,
ba£
) \

15 
__ªs
; \

16 
__ªs
 = (()
n
Ë% ()
ba£
; \

17 
n
 = ((ÍË/ ()
ba£
; \

18 
__ªs
; \

19 })

	)

21 
	$°æí
(c⁄° *
°rög
)

23 c⁄° *
ªt
 = 
°rög
;

25 *
°rög
++);

27  
°rög
 - 1 - 
ªt
;

28 
	}
}

30 *
	$numbî
(* 
°r
, 
num
, 
ba£
, 
size
, 
¥ecisi⁄
, 
ty≥
)

32 
c
,
sign
,
tmp
[36];

33 c⁄° *
digôs
="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

34 
i
;

36 i‡(
ty≥
&
SMALL
Ë
digôs
="0123456789abcdefghijklmnopqrstuvwxyz";

37 i‡(
ty≥
&
LEFT
Ëty≥ &~
ZEROPAD
;

38 i‡(
ba£
<2 || base>36)

40 
c
 = (
ty≥
 & 
ZEROPAD
) ? '0' : ' ' ;

41 i‡(
ty≥
&
SIGN
 && 
num
<0) {

42 
sign
='-';

43 
num
 = -num;

45 
sign
=(
ty≥
&
PLUS
Ë? '+' : (—y≥&
SPACE
) ? ' ' : 0);

46 i‡(
sign
Ë
size
--;

47 i‡(
ty≥
&
SPECIAL
)

48 i‡(
ba£
==16Ë
size
 -= 2;

49 i‡(
ba£
==8Ë
size
--;

50 
i
=0;

51 i‡(
num
==0)

52 
tmp
[
i
++]='0';

53 
num
!=0)

54 
tmp
[
i
++]=
digôs
[
	`do_div
(
num
,
ba£
)];

55 i‡(
i
>
¥ecisi⁄
)Örecision=i;

56 
size
 -
¥ecisi⁄
;

57 i‡(!(
ty≥
&(
ZEROPAD
+
LEFT
)))

58 
size
-->0)

59 *
°r
++ = ' ';

60 i‡(
sign
)

61 *
°r
++ = 
sign
;

62 i‡(
ty≥
&
SPECIAL
)

63 i‡(
ba£
==8)

64 *
°r
++ = '0';

65 i‡(
ba£
==16) {

66 *
°r
++ = '0';

67 *
°r
++ = 
digôs
[33];

69 i‡(!(
ty≥
&
LEFT
))

70 
size
-->0)

71 *
°r
++ = 
c
;

72 
i
<
¥ecisi⁄
--)

73 *
°r
++ = '0';

74 
i
-->0)

75 *
°r
++ = 
tmp
[
i
];

76 
size
-->0)

77 *
°r
++ = ' ';

78  
°r
;

79 
	}
}

81 
	$skù_©oi
(c⁄° **
s
)

83 
i
=0;

85 
	`is_digô
(**
s
))

87 
i
 = i*10 + *((*
s
)++) - '0';

89  
i
;

90 
	}
}

92 
	$v•rötk
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

94 
Àn
;

95 
i
;

97 
quÆifõr
;

98 
¥ecisi⁄
;

99 
fõld_width
;

101 *
°r
;

102 *
s
;

103 *
ù
;

105 
Êags
;

107 
°r
 = 
buf
 ; *
fmt
 ; ++fmt)

109 if(*
fmt
 != '%')

111 *
°r
++ = *
fmt
;

115 
Êags
 = 0;

116 
ª≥©
:

117 ++
fmt
;

118 *
fmt
)

120 '-': 
Êags
 |
LEFT
; 
ª≥©
;

121 '+': 
Êags
 |
PLUS
; 
ª≥©
;

122 ' ': 
Êags
 |
SPACE
; 
ª≥©
;

123 '#': 
Êags
 |
SPECIAL
 ; 
ª≥©
;

124 '0': 
Êags
 |
ZEROPAD
; 
ª≥©
;

127 
fõld_width
 = -1;

129 if(
	`is_digô
(*
fmt
))

131 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

133 if(*
fmt
 == '*')

135 
fõld_width
 = 
	`va_¨g
(
¨gs
, );

136 if(
fõld_width
 < 0)

138 
fõld_width
 = -field_width;

139 
Êags
 |
LEFT
;

143 
¥ecisi⁄
 = -1;

145 if(*
fmt
 == '.')

147 ++
fmt
;

148 if(
	`is_digô
(*
fmt
))

150 
¥ecisi⁄
 = 
	`skù_©oi
(&
fmt
);

152 if(*
fmt
 == '*')

154 
¥ecisi⁄
 = 
	`va_¨g
(
¨gs
, );

156 if(
¥ecisi⁄
 < 0)

158 
¥ecisi⁄
 = 0;

162 
quÆifõr
 = -1;

164 if(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'L')

166 
quÆifõr
 = *
fmt
;

167 ++
fmt
;

170 *
fmt
)

174 if(!(
Êags
 & 
LEFT
))

176 --
fõld_width
 > 0)

178 *
°r
++ = ' ';

181 *
°r
++ = ()
	`va_¨g
(
¨gs
, );

182 --
fõld_width
 > 0)

184 *
°r
++ = ' ';

190 
s
 = 
	`va_¨g
(
¨gs
, *);

191 
Àn
 = 
	`°æí
(
s
);

192 if(
¥ecisi⁄
 < 0)

194 
¥ecisi⁄
 = 
Àn
;

196 if(
Àn
 > 
¥ecisi⁄
)

198 
Àn
 = 
¥ecisi⁄
;

201 if(!(
Êags
 & 
LEFT
))

203 
Àn
 < 
fõld_width
--)

205 *
°r
++ = ' ';

208 
i
 = 0 ; i < 
Àn
 ; ++i)

210 *
°r
++ = *
s
++;

213 
Àn
 < 
fõld_width
--)

215 *
°r
++ = ' ';

221 
°r
 = 
	`numbî
(°r, 
	`va_¨g
(
¨gs
, ), 8, 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

226 if(
fõld_width
 == -1)

228 
fõld_width
 = 8;

229 
Êags
 |
ZEROPAD
;

231 
°r
 = 
	`numbî
(°r, ()
	`va_¨g
(
¨gs
, *), 16, 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

236 
Êags
 |
SMALL
;

240 
°r
 = 
	`numbî
(°r, 
	`va_¨g
(
¨gs
, ), 16, 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

246 
Êags
 |
SIGN
;

250 
°r
 = 
	`numbî
(°r, 
	`va_¨g
(
¨gs
, ), 10, 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

255 
ù
 = 
	`va_¨g
(
¨gs
, *);

256 *
ù
 = (
°r
 - 
buf
);

261 if(*
fmt
 != '%')

263 *
°r
++ = '%';

265 if(*
fmt
)

267 *
°r
++ = *
fmt
;

271 --
fmt
;

278 *
°r
 = '\0';

279  (
°r
 - 
buf
);

280 
	}
}

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

108 
__ex˘y≥
 (
iß um
);

109 
__ex˘y≥
 (
ißÕha
);

110 
__ex˘y≥
 (
is˙ål
);

111 
__ex˘y≥
 (
isdigô
);

112 
__ex˘y≥
 (
i¶owî
);

113 
__ex˘y≥
 (
isgøph
);

114 
__ex˘y≥
 (
i•röt
);

115 
__ex˘y≥
 (
i•un˘
);

116 
__ex˘y≥
 (
is•a˚
);

117 
__ex˘y≥
 (
isuµî
);

118 
__ex˘y≥
 (
isxdigô
);

122 
	$tﬁowî
 (
__c
Ë
__THROW
;

125 
	$touµî
 (
__c
Ë
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__ex˘y≥
 (
isbœnk
);

133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE


173 #ifde‡
__is˘y≥_f


174 
	$__is˘y≥_f
 (
Ænum
)

175 
	$__is˘y≥_f
 (
Æpha
)

176 
	$__is˘y≥_f
 (
˙ål
)

177 
	$__is˘y≥_f
 (
digô
)

178 
	$__is˘y≥_f
 (
lowî
)

179 
	$__is˘y≥_f
 (
gøph
)

180 
	$__is˘y≥_f
 (
¥öt
)

181 
	$__is˘y≥_f
 (
pun˘
)

182 
	$__is˘y≥_f
 (
•a˚
)

183 
	$__is˘y≥_f
 (
uµî
)

184 
	$__is˘y≥_f
 (
xdigô
)

185 #ifde‡
__USE_ISOC99


186 
	$__is˘y≥_f
 (
bœnk
)

188 #ñi‡
deföed
 
__is˘y≥


189 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

190 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

191 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

192 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

193 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

194 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

195 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

196 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

197 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

198 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

199 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

200 #ifde‡
__USE_ISOC99


201 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

205 #ifde‡
__USE_EXTERN_INLINES


206 
__exã∫_ölöe
 

207 
	`__NTH
 (
	$tﬁowî
 (
__c
))

209  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

210 
	}
}

212 
__exã∫_ölöe
 

213 
__NTH
 (
	$touµî
 (
__c
))

215  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

216 
	}
}

219 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


220 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

221 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

224 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


225 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

226 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

228 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

229 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

235 #ifde‡
__USE_XOPEN2K8


237 
	~<bôs/ty≥s/loˇÀ_t.h
>

241 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

242 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

244 
	#__ex˘y≥_l
(
«me
) \

245 
	`«me
 (, 
loˇÀ_t
Ë
__THROW


	)

251 
__ex˘y≥_l
 (
iß um_l
);

252 
__ex˘y≥_l
 (
ißÕha_l
);

253 
__ex˘y≥_l
 (
is˙ål_l
);

254 
__ex˘y≥_l
 (
isdigô_l
);

255 
__ex˘y≥_l
 (
i¶owî_l
);

256 
__ex˘y≥_l
 (
isgøph_l
);

257 
__ex˘y≥_l
 (
i•röt_l
);

258 
__ex˘y≥_l
 (
i•un˘_l
);

259 
__ex˘y≥_l
 (
is•a˚_l
);

260 
__ex˘y≥_l
 (
isuµî_l
);

261 
__ex˘y≥_l
 (
isxdigô_l
);

263 
__ex˘y≥_l
 (
isbœnk_l
);

267 
	$__tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

271 
	$__touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

272 
	$touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

274 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


275 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

276 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

277 
	#__touµî_l
(
c
, 
loˇÀ
) \

278 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

279 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

280 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

284 #i‚de‡
__NO_CTYPE


285 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

286 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

287 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

288 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

289 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

290 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

291 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

292 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

293 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

294 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

295 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

297 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

299 #ifde‡
__USE_MISC


300 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

301 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

304 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

305 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

306 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

307 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

308 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

309 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

310 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

311 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

312 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

313 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

314 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

316 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

318 #ifde‡
__USE_MISC


319 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

320 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

181 #ifdef 
__USE_POSIX


183 
	~<bôs/posix1_lim.h
>

186 #ifdef 
__USE_POSIX2


187 
	~<bôs/posix2_lim.h
>

190 #ifdef 
__USE_XOPEN


191 
	~<bôs/x›í_lim.h
>

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 sig√d 
	töt_Àa°8_t
;

44 
	töt_Àa°16_t
;

45 
	töt_Àa°32_t
;

46 #i‡
__WORDSIZE
 == 64

47 
	töt_Àa°64_t
;

49 
__exãnsi⁄__


50 
	töt_Àa°64_t
;

54 
	tuöt_Àa°8_t
;

55 
	tuöt_Àa°16_t
;

56 
	tuöt_Àa°32_t
;

57 #i‡
__WORDSIZE
 == 64

58 
	tuöt_Àa°64_t
;

60 
__exãnsi⁄__


61 
	tuöt_Àa°64_t
;

68 sig√d 
	töt_Á°8_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Á°16_t
;

71 
	töt_Á°32_t
;

72 
	töt_Á°64_t
;

74 
	töt_Á°16_t
;

75 
	töt_Á°32_t
;

76 
__exãnsi⁄__


77 
	töt_Á°64_t
;

81 
	tuöt_Á°8_t
;

82 #i‡
__WORDSIZE
 == 64

83 
	tuöt_Á°16_t
;

84 
	tuöt_Á°32_t
;

85 
	tuöt_Á°64_t
;

87 
	tuöt_Á°16_t
;

88 
	tuöt_Á°32_t
;

89 
__exãnsi⁄__


90 
	tuöt_Á°64_t
;

95 #i‡
__WORDSIZE
 == 64

96 #i‚de‡
__öçå_t_deföed


97 
	töçå_t
;

98 
	#__öçå_t_deföed


	)

100 
	tuöçå_t
;

102 #i‚de‡
__öçå_t_deföed


103 
	töçå_t
;

104 
	#__öçå_t_deföed


	)

106 
	tuöçå_t
;

111 
__ötmax_t
 
	tötmax_t
;

112 
__uötmax_t
 
	tuötmax_t
;

115 #i‡
__WORDSIZE
 == 64

116 
	#__INT64_C
(
c
Ë¯## 
L


	)

117 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

119 
	#__INT64_C
(
c
Ë¯## 
LL


	)

120 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

126 
	#INT8_MIN
 (-128)

	)

127 
	#INT16_MIN
 (-32767-1)

	)

128 
	#INT32_MIN
 (-2147483647-1)

	)

129 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

131 
	#INT8_MAX
 (127)

	)

132 
	#INT16_MAX
 (32767)

	)

133 
	#INT32_MAX
 (2147483647)

	)

134 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

137 
	#UINT8_MAX
 (255)

	)

138 
	#UINT16_MAX
 (65535)

	)

139 
	#UINT32_MAX
 (4294967295U)

	)

140 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

144 
	#INT_LEAST8_MIN
 (-128)

	)

145 
	#INT_LEAST16_MIN
 (-32767-1)

	)

146 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

147 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

149 
	#INT_LEAST8_MAX
 (127)

	)

150 
	#INT_LEAST16_MAX
 (32767)

	)

151 
	#INT_LEAST32_MAX
 (2147483647)

	)

152 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

155 
	#UINT_LEAST8_MAX
 (255)

	)

156 
	#UINT_LEAST16_MAX
 (65535)

	)

157 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

158 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

162 
	#INT_FAST8_MIN
 (-128)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

165 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

167 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

168 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

170 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

172 
	#INT_FAST8_MAX
 (127)

	)

173 #i‡
__WORDSIZE
 == 64

174 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

175 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

177 
	#INT_FAST16_MAX
 (2147483647)

	)

178 
	#INT_FAST32_MAX
 (2147483647)

	)

180 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

183 
	#UINT_FAST8_MAX
 (255)

	)

184 #i‡
__WORDSIZE
 == 64

185 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

186 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

188 
	#UINT_FAST16_MAX
 (4294967295U)

	)

189 
	#UINT_FAST32_MAX
 (4294967295U)

	)

191 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

195 #i‡
__WORDSIZE
 == 64

196 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

197 
	#INTPTR_MAX
 (9223372036854775807L)

	)

198 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

200 
	#INTPTR_MIN
 (-2147483647-1)

	)

201 
	#INTPTR_MAX
 (2147483647)

	)

202 
	#UINTPTR_MAX
 (4294967295U)

	)

207 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

209 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

220 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

222 #i‡
__WORDSIZE32_PTRDIFF_LONG


223 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

224 
	#PTRDIFF_MAX
 (2147483647L)

	)

226 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

227 
	#PTRDIFF_MAX
 (2147483647)

	)

232 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

233 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

236 #i‡
__WORDSIZE
 == 64

237 
	#SIZE_MAX
 (18446744073709551615UL)

	)

239 #i‡
__WORDSIZE32_SIZE_ULONG


240 
	#SIZE_MAX
 (4294967295UL)

	)

242 
	#SIZE_MAX
 (4294967295U)

	)

247 #i‚de‡
WCHAR_MIN


249 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

250 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

254 
	#WINT_MIN
 (0u)

	)

255 
	#WINT_MAX
 (4294967295u)

	)

258 
	#INT8_C
(
c
Ë
	)
c

259 
	#INT16_C
(
c
Ë
	)
c

260 
	#INT32_C
(
c
Ë
	)
c

261 #i‡
__WORDSIZE
 == 64

262 
	#INT64_C
(
c
Ë¯## 
L


	)

264 
	#INT64_C
(
c
Ë¯## 
LL


	)

268 
	#UINT8_C
(
c
Ë
	)
c

269 
	#UINT16_C
(
c
Ë
	)
c

270 
	#UINT32_C
(
c
Ë¯## 
U


	)

271 #i‡
__WORDSIZE
 == 64

272 
	#UINT64_C
(
c
Ë¯## 
UL


	)

274 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

278 #i‡
__WORDSIZE
 == 64

279 
	#INTMAX_C
(
c
Ë¯## 
L


	)

280 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

282 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

283 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

286 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

288 
	#INT8_WIDTH
 8

	)

289 
	#UINT8_WIDTH
 8

	)

290 
	#INT16_WIDTH
 16

	)

291 
	#UINT16_WIDTH
 16

	)

292 
	#INT32_WIDTH
 32

	)

293 
	#UINT32_WIDTH
 32

	)

294 
	#INT64_WIDTH
 64

	)

295 
	#UINT64_WIDTH
 64

	)

297 
	#INT_LEAST8_WIDTH
 8

	)

298 
	#UINT_LEAST8_WIDTH
 8

	)

299 
	#INT_LEAST16_WIDTH
 16

	)

300 
	#UINT_LEAST16_WIDTH
 16

	)

301 
	#INT_LEAST32_WIDTH
 32

	)

302 
	#UINT_LEAST32_WIDTH
 32

	)

303 
	#INT_LEAST64_WIDTH
 64

	)

304 
	#UINT_LEAST64_WIDTH
 64

	)

306 
	#INT_FAST8_WIDTH
 8

	)

307 
	#UINT_FAST8_WIDTH
 8

	)

308 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

309 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

310 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

311 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

312 
	#INT_FAST64_WIDTH
 64

	)

313 
	#UINT_FAST64_WIDTH
 64

	)

315 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

316 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

318 
	#INTMAX_WIDTH
 64

	)

319 
	#UINTMAX_WIDTH
 64

	)

321 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

322 
	#SIG_ATOMIC_WIDTH
 32

	)

323 
	#SIZE_WIDTH
 
__WORDSIZE


	)

324 
	#WCHAR_WIDTH
 32

	)

325 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	~<bôs/ty≥s/__FILE.h
>

37 
	~<bôs/ty≥s/FILE.h
>

39 
	#_STDIO_USES_IOSTREAM


	)

41 
	~<bôs/libio.h
>

43 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


44 #ifde‡
__GNUC__


45 #i‚de‡
_VA_LIST_DEFINED


46 
_G_va_li°
 
	tva_li°
;

47 
	#_VA_LIST_DEFINED


	)

50 
	~<°d¨g.h
>

54 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


55 #i‚de‡
__off_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__off_t
 
	toff_t
;

59 
__off64_t
 
	toff_t
;

61 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

69 #ifde‡
__USE_XOPEN2K8


70 #i‚de‡
__ssize_t_deföed


71 
__ssize_t
 
	tssize_t
;

72 
	#__ssize_t_deföed


	)

77 #i‚de‡
__USE_FILE_OFFSET64


78 
_G_Âos_t
 
	tÂos_t
;

80 
_G_Âos64_t
 
	tÂos_t
;

82 #ifde‡
__USE_LARGEFILE64


83 
_G_Âos64_t
 
	tÂos64_t
;

87 
	#_IOFBF
 0

	)

88 
	#_IOLBF
 1

	)

89 
	#_IONBF
 2

	)

93 #i‚de‡
BUFSIZ


94 
	#BUFSIZ
 
_IO_BUFSIZ


	)

100 #i‚de‡
EOF


101 
	#EOF
 (-1)

	)

107 
	#SEEK_SET
 0

	)

108 
	#SEEK_CUR
 1

	)

109 
	#SEEK_END
 2

	)

110 #ifde‡
__USE_GNU


111 
	#SEEK_DATA
 3

	)

112 
	#SEEK_HOLE
 4

	)

116 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


118 
	#P_tmpdú
 "/tmp"

	)

131 
	~<bôs/°dio_lim.h
>

135 
_IO_FILE
 *
°dö
;

136 
_IO_FILE
 *
°dout
;

137 
_IO_FILE
 *
°dîr
;

139 
	#°dö
 
°dö


	)

140 
	#°dout
 
°dout


	)

141 
	#°dîr
 
°dîr


	)

144 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

146 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

148 #ifde‡
__USE_ATFILE


150 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

151 c⁄° *
__√w
Ë
__THROW
;

158 #i‚de‡
__USE_FILE_OFFSET64


159 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

161 #ifde‡
__REDIRECT


162 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

164 
	#tmpfûe
 
tmpfûe64


	)

168 #ifde‡
__USE_LARGEFILE64


169 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

173 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

175 #ifde‡
__USE_MISC


178 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

182 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


190 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

191 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

199 
	`f˛o£
 (
FILE
 *
__°ªam
);

204 
	`fÊush
 (
FILE
 *
__°ªam
);

206 #ifde‡
__USE_MISC


213 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

216 #ifde‡
__USE_GNU


223 
	`f˛o£Æl
 ();

227 #i‚de‡
__USE_FILE_OFFSET64


232 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

233 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

238 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

239 c⁄° *
__ª°ri˘
 
__modes
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

242 #ifde‡
__REDIRECT


243 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

244 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

245 
__wur
;

246 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

249 
__wur
;

251 
	#f›í
 
f›í64


	)

252 
	#‰e›í
 
‰e›í64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

257 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

258 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

263 #ifdef 
__USE_POSIX


265 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

268 #ifdef 
__USE_GNU


271 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

272 c⁄° *
__ª°ri˘
 
__modes
,

273 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

276 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

278 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

279 
__THROW
 
__wur
;

284 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

290 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

294 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

295 
__modes
, 
size_t
 
__n
Ë
__THROW
;

297 #ifdef 
__USE_MISC


300 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

301 
size_t
 
__size
Ë
__THROW
;

304 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

312 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

313 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

318 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

320 
	$•rötf
 (*
__ª°ri˘
 
__s
,

321 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

327 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

328 
_G_va_li°
 
__¨g
);

333 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

335 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

336 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

338 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


340 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

341 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

342 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

344 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

345 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

346 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

349 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

352 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

353 
_G_va_li°
 
__¨g
)

354 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

355 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

356 c⁄° *
__ª°ri˘
 
__fmt
, ...)

357 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

358 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

359 c⁄° *
__ª°ri˘
 
__fmt
, ...)

360 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

363 #ifde‡
__USE_XOPEN2K8


365 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

366 
_G_va_li°
 
__¨g
)

367 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

368 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

369 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

377 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

378 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

383 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

385 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

386 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

388 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

389 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

390 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

391 #ifde‡
__REDIRECT


395 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

396 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

397 
__isoc99_fsˇnf
Ë
__wur
;

398 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

399 
__isoc99_sˇnf
Ë
__wur
;

400 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

401 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

402 
__isoc99_ssˇnf
);

404 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

405 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

406 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

407 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

409 
	#fsˇnf
 
__isoc99_fsˇnf


	)

410 
	#sˇnf
 
__isoc99_sˇnf


	)

411 
	#ssˇnf
 
__isoc99_ssˇnf


	)

415 #ifdef 
__USE_ISOC99


420 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

421 
_G_va_li°
 
__¨g
)

422 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

428 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

429 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

432 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

433 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

434 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

436 #i‡!
deföed
 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
vfsˇnf
,

444 (
FILE
 *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

446 
__isoc99_vfsˇnf
)

447 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

448 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

449 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

450 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

451 
	`__REDIRECT_NTH
 (
vssˇnf
,

452 (c⁄° *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
,

454 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

455 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

457 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
,

459 
_G_va_li°
 
__¨g
Ë
__wur
;

460 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

461 
_G_va_li°
 
__¨g
Ë
__wur
;

462 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

463 c⁄° *
__ª°ri˘
 
__f‹m©
,

464 
_G_va_li°
 
__¨g
Ë
__THROW
;

465 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

466 
	#vsˇnf
 
__isoc99_vsˇnf


	)

467 
	#vssˇnf
 
__isoc99_vssˇnf


	)

477 
	`fgëc
 (
FILE
 *
__°ªam
);

478 
	`gëc
 (
FILE
 *
__°ªam
);

484 
	`gëch¨
 ();

488 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

490 #ifde‡
__USE_POSIX199506


495 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

496 
	`gëch¨_u∆ocked
 ();

499 #ifde‡
__USE_MISC


506 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

517 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

518 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

524 
	`putch¨
 (
__c
);

528 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
_G_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 #ifde‡
__USE_EXTERN_INLINES


859 
	~<bôs/°dio.h
>

861 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


862 
	~<bôs/°dio2.h
>

864 #ifde‡
__LDBL_COMPAT


865 
	~<bôs/°dio-ldbl.h
>

868 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


53 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

54 
__c
, 
size_t
 
__n
)

55 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

63 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

64 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


70 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

71 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

72 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__OPTIMIZE__


76 
__exã∫_Æways_ölöe
 *

77 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


79  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

82 
__exã∫_Æways_ölöe
 const *

83 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
	}
}

90 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

91 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

94 #ifde‡
__USE_GNU


97 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


98 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

99 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

100 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


109 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

110 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

112 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

122 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

124 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

125 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

129 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

133 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

137 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

139 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

140 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

147 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

148 
__THROW
 
	`__n⁄nuŒ
 ((2));

150 #ifde‡
__USE_XOPEN2K8


152 
	~<bôs/ty≥s/loˇÀ_t.h
>

155 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

156 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

159 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

160 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

163 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

164 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

166 *
	$°rdup
 (c⁄° *
__s
)

167 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

173 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

174 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

175 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


180 
	#°rdu∑
(
s
) \

181 (
__exãnsi⁄__
 \

183 c⁄° *
__ﬁd
 = (
s
); \

184 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

185 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

186 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

187 
	}
}))

	)

190 
	#°∫du∑
(
s
, 
n
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

196 
__√w
[
__Àn
] = '\0'; \

197 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

198 }))

	)

202 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


205 *
°rchr
 (*
__s
, 
__c
)

206 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

207 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

208 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

210 #ifde‡
__OPTIMIZE__


211 
__exã∫_Æways_ölöe
 *

212 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


214  
__buûtö_°rchr
 (
__s
, 
__c
);

217 
__exã∫_Æways_ölöe
 const *

218 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

225 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

226 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


232 *
	`°ºchr
 (*
__s
, 
__c
)

233 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

234 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

235 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__OPTIMIZE__


238 
__exã∫_Æways_ölöe
 *

239 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


241  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

244 
__exã∫_Æways_ölöe
 const *

245 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
	}
}

252 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

253 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

256 #ifde‡
__USE_GNU


259 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


260 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

261 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

266 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

276 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

279 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


282 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

283 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__OPTIMIZE__


288 
__exã∫_Æways_ölöe
 *

289 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


291  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

294 
__exã∫_Æways_ölöe
 const *

295 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


297  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

300 
	}
}

302 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

303 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

306 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


309 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

310 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

311 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

312 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__OPTIMIZE__


315 
__exã∫_Æways_ölöe
 *

316 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


318  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

321 
__exã∫_Æways_ölöe
 const *

322 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


324  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

327 
	}
}

329 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

336 
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

341 c⁄° *
__ª°ri˘
 
__dñim
,

342 **
__ª°ri˘
 
__ßve_±r
)

343 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

344 #ifde‡
__USE_POSIX


345 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

346 **
__ª°ri˘
 
__ßve_±r
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

350 #ifde‡
__USE_GNU


352 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


353 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

354 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

355 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

356 c⁄° *
__√edÀ
)

357 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

360 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 #ifde‡
__USE_GNU


368 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

369 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

374 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

375 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

378 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

384 
size_t
 
	$°æí
 (c⁄° *
__s
)

385 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

387 #ifdef 
__USE_XOPEN2K8


390 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

397 #ifde‡
__USE_XOPEN2K


405 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

410 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

411 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

413 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

414 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

420 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

425 #ifde‡
__USE_XOPEN2K8


427 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

430 #ifde‡
__USE_MISC


431 
	~<°rögs.h
>

435 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

439 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

440 c⁄° *
__ª°ri˘
 
__dñim
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 #ifdef 
__USE_XOPEN2K8


446 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

449 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

451 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

456 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

457 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

458 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

460 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifdef 
__USE_GNU


466 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

467 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

470 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

473 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

475 #i‚de‡
ba£«me


480 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


481 "C++" *
	$ba£«me
 (*
__fûíame
)

482 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

483 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

484 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

486 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 #i‡
	`__GNUC_PREREQ
 (3,4)

492 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


494 
	~<bôs/°rög_f‹tifõd.h
>

498 
__END_DECLS


	@/usr/include/syscall.h

1 
	~<sys/sysˇŒ.h
>

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

61 
	~<bôs/uöä-idítôy.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

80 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

81 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

82 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

83 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

85 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

86 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

87 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

88 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

90 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

91 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

92 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

93 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

119 #unde‡
__USE_ISOC11


120 #unde‡
__USE_ISOC99


121 #unde‡
__USE_ISOC95


122 #unde‡
__USE_ISOCXX11


123 #unde‡
__USE_POSIX


124 #unde‡
__USE_POSIX2


125 #unde‡
__USE_POSIX199309


126 #unde‡
__USE_POSIX199506


127 #unde‡
__USE_XOPEN


128 #unde‡
__USE_XOPEN_EXTENDED


129 #unde‡
__USE_UNIX98


130 #unde‡
__USE_XOPEN2K


131 #unde‡
__USE_XOPEN2KXSI


132 #unde‡
__USE_XOPEN2K8


133 #unde‡
__USE_XOPEN2K8XSI


134 #unde‡
__USE_LARGEFILE


135 #unde‡
__USE_LARGEFILE64


136 #unde‡
__USE_FILE_OFFSET64


137 #unde‡
__USE_MISC


138 #unde‡
__USE_ATFILE


139 #unde‡
__USE_GNU


140 #unde‡
__USE_FORTIFY_LEVEL


141 #unde‡
__KERNEL_STRICT_NAMES


142 #unde‡
__GLIBC_USE_DEPRECATED_GETS


146 #i‚de‡
_LOOSE_KERNEL_NAMES


147 
	#__KERNEL_STRICT_NAMES


	)

157 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


158 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

159 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

161 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

168 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


169 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

170 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

176 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

182 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

183 && !
deföed
 
	g_DEFAULT_SOURCE


185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

190 #ifde‡
_GNU_SOURCE


191 #unde‡
_ISOC95_SOURCE


192 
	#_ISOC95_SOURCE
 1

	)

193 #unde‡
_ISOC99_SOURCE


194 
	#_ISOC99_SOURCE
 1

	)

195 #unde‡
_ISOC11_SOURCE


196 
	#_ISOC11_SOURCE
 1

	)

197 #unde‡
_POSIX_SOURCE


198 
	#_POSIX_SOURCE
 1

	)

199 #unde‡
_POSIX_C_SOURCE


200 
	#_POSIX_C_SOURCE
 200809L

	)

201 #unde‡
_XOPEN_SOURCE


202 
	#_XOPEN_SOURCE
 700

	)

203 #unde‡
_XOPEN_SOURCE_EXTENDED


204 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

205 #unde‡
_LARGEFILE64_SOURCE


206 
	#_LARGEFILE64_SOURCE
 1

	)

207 #unde‡
_DEFAULT_SOURCE


208 
	#_DEFAULT_SOURCE
 1

	)

209 #unde‡
_ATFILE_SOURCE


210 
	#_ATFILE_SOURCE
 1

	)

215 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

216 || (!
deföed
 
	g__STRICT_ANSI__
 \

217 && !
deföed
 
	g_ISOC99_SOURCE
 \

218 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

219 && !
deföed
 
	g_XOPEN_SOURCE
))

220 #unde‡
_DEFAULT_SOURCE


221 
	#_DEFAULT_SOURCE
 1

	)

225 #i‡(
deföed
 
_ISOC11_SOURCE
 \

226 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

227 
	#__USE_ISOC11
 1

	)

231 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

232 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

233 
	#__USE_ISOC99
 1

	)

237 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

238 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

239 
	#__USE_ISOC95
 1

	)

242 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus
 >= 201703L

245 
	#__USE_ISOC11
 1

	)

249 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


250 
	#__USE_ISOCXX11
 1

	)

251 
	#__USE_ISOC99
 1

	)

258 #ifde‡
_DEFAULT_SOURCE


259 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


260 
	#__USE_POSIX_IMPLICITLY
 1

	)

262 #unde‡
_POSIX_SOURCE


263 
	#_POSIX_SOURCE
 1

	)

264 #unde‡
_POSIX_C_SOURCE


265 
	#_POSIX_C_SOURCE
 200809L

	)

268 #i‡((!
deföed
 
__STRICT_ANSI__
 \

269 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

270 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

271 
	#_POSIX_SOURCE
 1

	)

272 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

273 
	#_POSIX_C_SOURCE
 2

	)

274 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

275 
	#_POSIX_C_SOURCE
 199506L

	)

276 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

277 
	#_POSIX_C_SOURCE
 200112L

	)

279 
	#_POSIX_C_SOURCE
 200809L

	)

281 
	#__USE_POSIX_IMPLICITLY
 1

	)

290 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

291 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

292 
	#_POSIX_SOURCE
 1

	)

293 #unde‡
_POSIX_C_SOURCE


294 
	#_POSIX_C_SOURCE
 199506L

	)

297 #i‡(
deföed
 
_POSIX_SOURCE
 \

298 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

299 || 
deföed
 
_XOPEN_SOURCE
)

300 
	#__USE_POSIX
 1

	)

303 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


304 
	#__USE_POSIX2
 1

	)

307 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

308 
	#__USE_POSIX199309
 1

	)

311 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

312 
	#__USE_POSIX199506
 1

	)

315 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

316 
	#__USE_XOPEN2K
 1

	)

317 #unde‡
__USE_ISOC95


318 
	#__USE_ISOC95
 1

	)

319 #unde‡
__USE_ISOC99


320 
	#__USE_ISOC99
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

324 
	#__USE_XOPEN2K8
 1

	)

325 #unde‡
_ATFILE_SOURCE


326 
	#_ATFILE_SOURCE
 1

	)

329 #ifdef 
_XOPEN_SOURCE


330 
	#__USE_XOPEN
 1

	)

331 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

332 
	#__USE_XOPEN_EXTENDED
 1

	)

333 
	#__USE_UNIX98
 1

	)

334 #unde‡
_LARGEFILE_SOURCE


335 
	#_LARGEFILE_SOURCE
 1

	)

336 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

337 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

338 
	#__USE_XOPEN2K8
 1

	)

339 
	#__USE_XOPEN2K8XSI
 1

	)

341 
	#__USE_XOPEN2K
 1

	)

342 
	#__USE_XOPEN2KXSI
 1

	)

343 #unde‡
__USE_ISOC95


344 
	#__USE_ISOC95
 1

	)

345 #unde‡
__USE_ISOC99


346 
	#__USE_ISOC99
 1

	)

349 #ifde‡
_XOPEN_SOURCE_EXTENDED


350 
	#__USE_XOPEN_EXTENDED
 1

	)

355 #ifde‡
_LARGEFILE_SOURCE


356 
	#__USE_LARGEFILE
 1

	)

359 #ifde‡
_LARGEFILE64_SOURCE


360 
	#__USE_LARGEFILE64
 1

	)

363 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

364 
	#__USE_FILE_OFFSET64
 1

	)

367 #i‡
deföed
 
_DEFAULT_SOURCE


368 
	#__USE_MISC
 1

	)

371 #ifdef 
_ATFILE_SOURCE


372 
	#__USE_ATFILE
 1

	)

375 #ifdef 
_GNU_SOURCE


376 
	#__USE_GNU
 1

	)

379 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

380 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

381 #i‡
_FORTIFY_SOURCE
 > 1

382 
	#__USE_FORTIFY_LEVEL
 2

	)

384 
	#__USE_FORTIFY_LEVEL
 1

	)

387 
	#__USE_FORTIFY_LEVEL
 0

	)

394 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


395 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

397 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

402 
	~<°dc-¥edef.h
>

410 #unde‡
__GNU_LIBRARY__


411 
	#__GNU_LIBRARY__
 6

	)

415 
	#__GLIBC__
 2

	)

416 
	#__GLIBC_MINOR__
 27

	)

418 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

419 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

422 #i‚de‡
__ASSEMBLER__


423 #i‚de‡
_SYS_CDEFS_H


424 
	~<sys/cdefs.h
>

429 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


430 
	#__USE_LARGEFILE
 1

	)

431 
	#__USE_LARGEFILE64
 1

	)

437 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

438 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

439 && 
deföed
 
	g__exã∫_ölöe


440 
	#__USE_EXTERN_INLINES
 1

	)

448 
	~<gnu/°ubs.h
>

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

61 
	#__STDC_NO_THREADS__
 1

	)

	@
1
.
1
/usr/include
86
1521
arch/Main.c
arch/do_syscall.c
arch/i386/crset.asm
arch/i386/intr-stubs.S
arch/i386/io.asm
arch/i386/mem.asm
arch/i386/switch.S
arch/interrupt.c
arch/syscall.c
bitmap.c
device/ata.c
device/block.c
device/console.c
device/device.c
device/kbd.c
device/partition.c
device/pit.c
filesys/file.c
filesys/fs.c
filesys/inode.c
include/bitmap.h
include/ctype.h
include/debug.h
include/device/ata.h
include/device/block.h
include/device/console.h
include/device/device.h
include/device/io.h
include/device/io2.h
include/device/kbd.h
include/device/partition.h
include/device/pit.h
include/do_syscall.h
include/filesys/file.h
include/filesys/fs.h
include/filesys/inode.h
include/interrupt.h
include/intr-stubs.h
include/inttypes.h
include/limits.h
include/list.h
include/loader.h
include/mem/malloc.h
include/mem/mm.h
include/mem/paging.h
include/mem/palloc.h
include/packed.h
include/proc/proc.h
include/proc/sched.h
include/proc/switch.h
include/round.h
include/ssulib.h
include/stdarg.h
include/stdbool.h
include/stddef.h
include/stdint.h
include/stdio.h
include/stdlib.h
include/string.h
include/synch.h
include/syscall.h
include/type.h
include/vaddr.h
list.c
mem/malloc.c
mem/mm.c
mem/paging.c
mem/palloc.c
proc/proc.c
proc/sched.c
ssulib.c
stdio.c
string.c
synch.c
vsprintk.c
/usr/include/ctype.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/string.h
/usr/include/syscall.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/strings.h
/usr/include/stdc-predef.h
